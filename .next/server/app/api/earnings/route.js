"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/earnings/route";
exports.ids = ["app/api/earnings/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fearnings%2Froute&page=%2Fapi%2Fearnings%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fearnings%2Froute.ts&appDir=%2FUsers%2Fken%2FDesktop%2Fquantiv%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fken%2FDesktop%2Fquantiv&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fearnings%2Froute&page=%2Fapi%2Fearnings%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fearnings%2Froute.ts&appDir=%2FUsers%2Fken%2FDesktop%2Fquantiv%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fken%2FDesktop%2Fquantiv&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_ken_Desktop_quantiv_app_api_earnings_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/earnings/route.ts */ \"(rsc)/./app/api/earnings/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/earnings/route\",\n        pathname: \"/api/earnings\",\n        filename: \"route\",\n        bundlePath: \"app/api/earnings/route\"\n    },\n    resolvedPagePath: \"/Users/ken/Desktop/quantiv/app/api/earnings/route.ts\",\n    nextConfigOutput,\n    userland: _Users_ken_Desktop_quantiv_app_api_earnings_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/earnings/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZlYXJuaW5ncyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGZWFybmluZ3MlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZlYXJuaW5ncyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmtlbiUyRkRlc2t0b3AlMkZxdWFudGl2JTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRmtlbiUyRkRlc2t0b3AlMkZxdWFudGl2JmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNJO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVhbnRpdi8/MjIzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMva2VuL0Rlc2t0b3AvcXVhbnRpdi9hcHAvYXBpL2Vhcm5pbmdzL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9lYXJuaW5ncy9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2Vhcm5pbmdzXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9lYXJuaW5ncy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9rZW4vRGVza3RvcC9xdWFudGl2L2FwcC9hcGkvZWFybmluZ3Mvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2Vhcm5pbmdzL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fearnings%2Froute&page=%2Fapi%2Fearnings%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fearnings%2Froute.ts&appDir=%2FUsers%2Fken%2FDesktop%2Fquantiv%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fken%2FDesktop%2Fquantiv&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/earnings/route.ts":
/*!***********************************!*\
  !*** ./app/api/earnings/route.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   OPTIONS: () => (/* binding */ OPTIONS)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_schemas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/schemas */ \"(rsc)/./lib/schemas.ts\");\n/* harmony import */ var _lib_cache_lru__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/cache/lru */ \"(rsc)/./lib/cache/lru.ts\");\n/* harmony import */ var _lib_cache_redis__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/cache/redis */ \"(rsc)/./lib/cache/redis.ts\");\n/* harmony import */ var _lib_services_liveDataService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/services/liveDataService */ \"(rsc)/./lib/services/liveDataService.ts\");\n/**\n * /api/earnings - Earnings data endpoint\n * Returns upcoming and historical earnings with realized moves\n */ \n\n\n\n\n/**\n * Mock earnings data provider\n * In production, this would integrate with earnings calendar APIs\n */ class EarningsProvider {\n    static async getEarningsData(symbol) {\n        // Simulate API delay\n        await new Promise((resolve)=>setTimeout(resolve, 120));\n        const now = new Date();\n        const nextWeek = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);\n        // Mock upcoming earnings\n        const next = Math.random() > 0.3 ? {\n            date: nextWeek.toISOString().split(\"T\")[0],\n            confidence: Math.random() > 0.5 ? \"confirmed\" : \"estimated\",\n            timing: Math.random() > 0.5 ? \"bmo\" : \"amc\",\n            estimate: {\n                eps: Math.random() * 2 + 0.5,\n                revenue: Math.random() * 50 + 10 // $10B - $60B\n            }\n        } : undefined;\n        // Mock historical earnings with realized moves\n        const last = [];\n        for(let i = 1; i <= 4; i++){\n            const earningsDate = new Date(now.getTime() - i * 90 * 24 * 60 * 60 * 1000); // Quarterly\n            const priceBefore = 150 + Math.random() * 50;\n            const moveDirection = Math.random() > 0.5 ? 1 : -1;\n            const realizedMovePct = (Math.random() * 8 + 2) * moveDirection; // 2-10% move\n            const priceAfter = priceBefore * (1 + realizedMovePct / 100);\n            last.push({\n                date: earningsDate.toISOString().split(\"T\")[0],\n                realizedMovePct: Math.round(Math.abs(realizedMovePct) * 100) / 100,\n                priceChange: Math.round((priceAfter - priceBefore) * 100) / 100,\n                priceBefore: Math.round(priceBefore * 100) / 100,\n                priceAfter: Math.round(priceAfter * 100) / 100,\n                volume: Math.floor(Math.random() * 50000000 + 10000000) // 10M-60M volume\n            });\n        }\n        return {\n            symbol: symbol.toUpperCase(),\n            next,\n            last: last.reverse(),\n            timestamp: new Date().toISOString()\n        };\n    }\n}\n/**\n * GET /api/earnings?symbol=AAPL\n */ async function GET(request) {\n    const startTime = Date.now();\n    try {\n        // Parse and validate query parameters\n        const url = new URL(request.url);\n        const params = {\n            symbol: url.searchParams.get(\"symbol\")\n        };\n        const validation = (0,_lib_schemas__WEBPACK_IMPORTED_MODULE_1__.validateRequest)(_lib_schemas__WEBPACK_IMPORTED_MODULE_1__.EarningsRequestSchema, params);\n        if (!validation.success) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json((0,_lib_schemas__WEBPACK_IMPORTED_MODULE_1__.createApiResponse)(undefined, \"Invalid request parameters\", validation.details?.join(\", \")), {\n                status: 400\n            });\n        }\n        const { symbol } = validation.data;\n        // Generate cache key\n        const cacheKey = _lib_cache_lru__WEBPACK_IMPORTED_MODULE_2__.CacheKeys.earnings(symbol);\n        // Try L1 cache first\n        let earningsData = _lib_cache_lru__WEBPACK_IMPORTED_MODULE_2__.CacheInstances.earnings.get(cacheKey);\n        let cacheHit = \"l1\";\n        if (!earningsData) {\n            // Try L2 (Redis) cache\n            const redisKey = _lib_cache_redis__WEBPACK_IMPORTED_MODULE_3__.Keys.earnings(symbol);\n            earningsData = await _lib_cache_redis__WEBPACK_IMPORTED_MODULE_3__.RedisCache.getJson(redisKey);\n            cacheHit = earningsData ? \"l2\" : \"miss\";\n            if (!earningsData) {\n                // Try to fetch live earnings data first\n                let liveEarningsData = null;\n                if ((0,_lib_services_liveDataService__WEBPACK_IMPORTED_MODULE_4__.isLiveDataAvailable)()) {\n                    try {\n                        liveEarningsData = await (0,_lib_services_liveDataService__WEBPACK_IMPORTED_MODULE_4__.fetchLiveEarnings)(symbol);\n                        console.log(`[earnings-api] Live data ${liveEarningsData ? \"found\" : \"not found\"} for ${symbol}`);\n                    } catch (error) {\n                        console.warn(`[earnings-api] Live data fetch failed for ${symbol}:`, error);\n                    }\n                }\n                // If we have live data, use it; otherwise fall back to mock provider\n                if (liveEarningsData) {\n                    earningsData = {\n                        next: liveEarningsData.nextEarningsDate ? {\n                            date: liveEarningsData.nextEarningsDate,\n                            timing: liveEarningsData.nextEarningsTime?.toLowerCase() || \"unknown\",\n                            actualEPS: liveEarningsData.actualEPS,\n                            estimatedEPS: liveEarningsData.estimatedEPS\n                        } : null,\n                        last: liveEarningsData.historicalEarnings.map((earning)=>({\n                                date: earning.date,\n                                actualEPS: earning.actualEPS,\n                                estimatedEPS: earning.estimatedEPS,\n                                surprise: earning.surprise,\n                                realizedMovePct: earning.priceMovePercent\n                            })),\n                        avgMove: liveEarningsData.stats.avgMove,\n                        avgAbsMove: liveEarningsData.stats.avgAbsMove,\n                        beatRate: liveEarningsData.stats.beatRate,\n                        avgBeat: liveEarningsData.stats.avgBeat\n                    };\n                } else {\n                    // Cache miss - fetch from mock provider\n                    earningsData = await EarningsProvider.getEarningsData(symbol);\n                }\n                // Cache in both L1 and L2\n                _lib_cache_lru__WEBPACK_IMPORTED_MODULE_2__.CacheInstances.earnings.set(cacheKey, earningsData, 300 * 1000); // 5 minutes L1\n                await _lib_cache_redis__WEBPACK_IMPORTED_MODULE_3__.RedisCache.setJson(redisKey, earningsData, 1800); // 30 minutes L2\n                cacheHit = \"miss\";\n            } else {\n                // Cache in L1 for next time\n                _lib_cache_lru__WEBPACK_IMPORTED_MODULE_2__.CacheInstances.earnings.set(cacheKey, earningsData, 300 * 1000);\n            }\n        }\n        // Transform earnings data to match EarningsPanel component expectations\n        const earnings = earningsData; // Type assertion for mock data\n        const transformedData = {\n            events: earnings.next ? [\n                {\n                    date: earnings.next.date,\n                    time: earnings.next.timing === \"bmo\" ? \"BMO\" : earnings.next.timing === \"amc\" ? \"AMC\" : \"UNKNOWN\",\n                    actualEPS: earnings.next.actualEPS,\n                    estimatedEPS: earnings.next.estimatedEPS,\n                    surprise: earnings.next.surprise\n                }\n            ] : [],\n            stats: {\n                avgMove: earnings.avgMove || Math.random() * 8 + 2,\n                avgAbsMove: earnings.avgAbsMove || Math.random() * 8 + 2,\n                avgBeat: earnings.avgBeat || 0,\n                beatRate: earnings.beatRate || Math.random() * 0.4 + 0.4 // 40-80% beat rate\n            },\n            // Keep original data for backward compatibility\n            raw: earnings\n        };\n        const response = (0,_lib_schemas__WEBPACK_IMPORTED_MODULE_1__.createApiResponse)(transformedData);\n        const processingTime = Date.now() - startTime;\n        // Add performance headers\n        const headers = new Headers({\n            \"Content-Type\": \"application/json\",\n            \"Cache-Control\": \"public, s-maxage=300, stale-while-revalidate=1800\",\n            \"X-Cache-Hit\": cacheHit,\n            \"X-Processing-Time\": `${processingTime}ms`,\n            \"X-Symbol\": symbol,\n            \"X-Has-Next-Earnings\": earningsData?.next ? \"true\" : \"false\"\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response, {\n            headers\n        });\n    } catch (error) {\n        console.error(\"[API] /api/earnings error:\", error);\n        const errorResponse = (0,_lib_schemas__WEBPACK_IMPORTED_MODULE_1__.createApiResponse)(undefined, \"Internal server error\", error instanceof Error ? error.message : \"Unknown error\", \"Please check symbol format and try again\");\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(errorResponse, {\n            status: 500\n        });\n    }\n}\n/**\n * OPTIONS /api/earnings - CORS preflight\n */ async function OPTIONS() {\n    return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(null, {\n        status: 200,\n        headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Methods\": \"GET, OPTIONS\",\n            \"Access-Control-Allow-Headers\": \"Content-Type\"\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/earnings/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/cache/lru.ts":
/*!**************************!*\
  !*** ./lib/cache/lru.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheInstances: () => (/* binding */ CacheInstances),\n/* harmony export */   CacheKeys: () => (/* binding */ CacheKeys),\n/* harmony export */   QuantivLRUCache: () => (/* binding */ QuantivLRUCache),\n/* harmony export */   clearAllCaches: () => (/* binding */ clearAllCaches),\n/* harmony export */   getAllCacheStats: () => (/* binding */ getAllCacheStats)\n/* harmony export */ });\n/* harmony import */ var lru_cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lru-cache */ \"(rsc)/./node_modules/lru-cache/dist/esm/index.js\");\n/**\n * LRU Cache for L1 (in-process) caching\n * Used for fast API response caching within each API route\n */ \n/**\n * Generic LRU cache wrapper with TTL and statistics\n */ class QuantivLRUCache {\n    constructor(name, options = {}){\n        this.hits = 0;\n        this.misses = 0;\n        this.name = name;\n        this.cache = new lru_cache__WEBPACK_IMPORTED_MODULE_0__.LRUCache({\n            max: options.maxSize || 100,\n            ttl: options.ttlMs || 60 * 1000,\n            updateAgeOnGet: options.updateAgeOnGet ?? true,\n            dispose: (value, key)=>{\n                // Optional cleanup when items are evicted\n                console.debug(`[${this.name}] Evicted cache entry: ${key}`);\n            }\n        });\n    }\n    /**\n   * Get item from cache\n   */ get(key) {\n        const entry = this.cache.get(key);\n        if (entry) {\n            this.hits++;\n            return entry.data;\n        } else {\n            this.misses++;\n            return null;\n        }\n    }\n    /**\n   * Set item in cache\n   */ set(key, data, ttlMs) {\n        const entry = {\n            data,\n            timestamp: Date.now(),\n            key\n        };\n        if (ttlMs) {\n            this.cache.set(key, entry, {\n                ttl: ttlMs\n            });\n        } else {\n            this.cache.set(key, entry);\n        }\n    }\n    /**\n   * Check if key exists in cache\n   */ has(key) {\n        return this.cache.has(key);\n    }\n    /**\n   * Delete item from cache\n   */ delete(key) {\n        return this.cache.delete(key);\n    }\n    /**\n   * Clear all items from cache\n   */ clear() {\n        this.cache.clear();\n        this.hits = 0;\n        this.misses = 0;\n    }\n    /**\n   * Get cache statistics\n   */ getStats() {\n        const total = this.hits + this.misses;\n        return {\n            name: this.name,\n            size: this.cache.size,\n            maxSize: this.cache.max,\n            hits: this.hits,\n            misses: this.misses,\n            hitRate: total > 0 ? this.hits / total * 100 : 0,\n            calculatedSize: this.cache.calculatedSize || 0\n        };\n    }\n    /**\n   * Get or set pattern - fetch data if not in cache\n   */ async getOrSet(key, fetchFn, ttlMs) {\n        const cached = this.get(key);\n        if (cached !== null) {\n            return cached;\n        }\n        try {\n            const data = await fetchFn();\n            this.set(key, data, ttlMs);\n            return data;\n        } catch (error) {\n            console.error(`[${this.name}] Error fetching data for key ${key}:`, error);\n            throw error;\n        }\n    }\n    /**\n   * Peek at item without updating LRU order\n   */ peek(key) {\n        const entry = this.cache.peek(key);\n        return entry ? entry.data : null;\n    }\n    /**\n   * Get all keys in cache\n   */ keys() {\n        return Array.from(this.cache.keys());\n    }\n    /**\n   * Get cache info for debugging\n   */ getInfo() {\n        const entries = [];\n        const now = Date.now();\n        // Convert iterator to array to avoid downlevelIteration issues\n        const cacheEntries = Array.from(this.cache.entries());\n        for (const [key, entry] of cacheEntries){\n            entries.push({\n                key,\n                timestamp: entry.timestamp,\n                age: now - entry.timestamp\n            });\n        }\n        return {\n            name: this.name,\n            entries,\n            stats: this.getStats()\n        };\n    }\n}\n/**\n * Pre-configured cache instances for different data types\n */ const CacheInstances = {\n    // Options chain cache - larger size, shorter TTL\n    optionsChain: new QuantivLRUCache(\"options-chain\", {\n        maxSize: 200,\n        ttlMs: 60 * 1000,\n        updateAgeOnGet: true\n    }),\n    // Expected move cache - medium size, medium TTL\n    expectedMove: new QuantivLRUCache(\"expected-move\", {\n        maxSize: 150,\n        ttlMs: 90 * 1000,\n        updateAgeOnGet: true\n    }),\n    // Earnings data cache - smaller size, longer TTL\n    earnings: new QuantivLRUCache(\"earnings\", {\n        maxSize: 100,\n        ttlMs: 300 * 1000,\n        updateAgeOnGet: true\n    }),\n    // Price history cache - smaller size, longer TTL\n    priceHistory: new QuantivLRUCache(\"price-history\", {\n        maxSize: 50,\n        ttlMs: 600 * 1000,\n        updateAgeOnGet: false // Don't update age for historical data\n    }),\n    // IV series cache - medium size, longer TTL\n    ivSeries: new QuantivLRUCache(\"iv-series\", {\n        maxSize: 100,\n        ttlMs: 1800 * 1000,\n        updateAgeOnGet: false\n    })\n};\n/**\n * Get all cache statistics for monitoring\n */ function getAllCacheStats() {\n    return {\n        optionsChain: CacheInstances.optionsChain.getStats(),\n        expectedMove: CacheInstances.expectedMove.getStats(),\n        earnings: CacheInstances.earnings.getStats(),\n        priceHistory: CacheInstances.priceHistory.getStats(),\n        ivSeries: CacheInstances.ivSeries.getStats()\n    };\n}\n/**\n * Clear all caches (useful for testing or manual cache invalidation)\n */ function clearAllCaches() {\n    Object.values(CacheInstances).forEach((cache)=>cache.clear());\n}\n/**\n * Utility to generate cache keys for different data types\n */ const CacheKeys = {\n    optionsChain: (symbol, expiry)=>`${symbol.toUpperCase()}:${expiry}`,\n    expectedMove: (symbol, expiry)=>`${symbol.toUpperCase()}:${expiry}`,\n    earnings: (symbol)=>symbol.toUpperCase(),\n    priceHistory: (symbol, days)=>`${symbol.toUpperCase()}:${days}d`,\n    ivSeries: (symbol, days)=>`${symbol.toUpperCase()}:${days}d`\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/cache/lru.ts\n");

/***/ }),

/***/ "(rsc)/./lib/cache/redis.ts":
/*!****************************!*\
  !*** ./lib/cache/redis.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Keys: () => (/* binding */ Keys),\n/* harmony export */   QuantivCache: () => (/* binding */ QuantivCache),\n/* harmony export */   RedisCache: () => (/* binding */ RedisCache),\n/* harmony export */   checkRedisHealth: () => (/* binding */ checkRedisHealth),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   formatDateForKey: () => (/* binding */ formatDateForKey)\n/* harmony export */ });\n/* harmony import */ var _upstash_redis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @upstash/redis */ \"(rsc)/./node_modules/@upstash/redis/nodejs.mjs\");\n/**\n * Redis Client Wrapper for Upstash\n * Provides caching utilities and key builders for Quantiv\n */ \n// Initialize Redis client - disabled for development\nconst redis = process.env.REDIS_URL && process.env.REDIS_TOKEN ? new _upstash_redis__WEBPACK_IMPORTED_MODULE_0__.Redis({\n    url: process.env.REDIS_URL,\n    token: process.env.REDIS_TOKEN\n}) : null;\n/**\n * Redis key builders following Quantiv's naming convention\n */ const Keys = {\n    // Expected move snapshot: em:snap:${symbol}:${expiry}\n    expectedMoveSnapshot: (symbol, expiry)=>`em:snap:${symbol.toUpperCase()}:${expiry}`,\n    // Top movers for a date: em:top:${YYYYMMDD}\n    topMovers: (date)=>`em:top:${date}`,\n    // IV series for a symbol: iv:series:${symbol}\n    ivSeries: (symbol)=>`iv:series:${symbol.toUpperCase()}`,\n    // Daily visitor count: d:visits:${YYYYMMDD}\n    dailyVisits: (date)=>`d:visits:${date}`,\n    // Options chain cache: chain:${symbol}:${expiry}\n    optionsChain: (symbol, expiry)=>`chain:${symbol.toUpperCase()}:${expiry}`,\n    // Earnings data: earnings:${symbol}\n    earnings: (symbol)=>`earnings:${symbol.toUpperCase()}`,\n    // Price history: prices:${symbol}\n    priceHistory: (symbol)=>`prices:${symbol.toUpperCase()}`\n};\n/**\n * Generic JSON cache operations\n */ class RedisCache {\n    /**\n   * Set JSON data with TTL\n   */ static async setJson(key, data, ttlSeconds = 120) {\n        if (!redis) return; // Skip if Redis not configured\n        try {\n            await redis.setex(key, ttlSeconds, JSON.stringify(data));\n        } catch (error) {\n            console.error(`Redis setJson error for key ${key}:`, error);\n        // Don't throw - degrade gracefully without cache\n        }\n    }\n    /**\n   * Get JSON data\n   */ static async getJson(key) {\n        if (!redis) return null; // Skip if Redis not configured\n        try {\n            const result = await redis.get(key);\n            return result ? JSON.parse(result) : null;\n        } catch (error) {\n            console.error(`Redis getJson error for key ${key}:`, error);\n            return null; // Degrade gracefully\n        }\n    }\n    /**\n   * Increment counter and return new value\n   */ static async increment(key, ttlSeconds) {\n        if (!redis) return 1; // Return 1 if Redis not configured\n        try {\n            const newValue = await redis.incr(key);\n            if (ttlSeconds && newValue === 1) {\n                // Set TTL only on first increment (when key is created)\n                await redis.expire(key, ttlSeconds);\n            }\n            return newValue;\n        } catch (error) {\n            console.error(`Redis increment error for key ${key}:`, error);\n            return 0; // Return 0 on error\n        }\n    }\n    /**\n   * Add to sorted set (for top movers)\n   */ static async addToSortedSet(key, score, member, ttlSeconds) {\n        if (!redis) return; // Skip if Redis not configured\n        try {\n            await redis.zadd(key, {\n                score,\n                member\n            });\n            if (ttlSeconds) {\n                await redis.expire(key, ttlSeconds);\n            }\n        } catch (error) {\n            console.error(`Redis zadd error for key ${key}:`, error);\n        // Don't throw - degrade gracefully\n        }\n    }\n    /**\n   * Get top N members from sorted set (descending order)\n   */ static async getTopFromSortedSet(key, count = 10) {\n        if (!redis) return []; // Return empty array if Redis not configured\n        try {\n            const result = await redis.zrange(key, 0, count - 1, {\n                rev: true,\n                withScores: true\n            });\n            // Convert flat array to objects\n            const items = [];\n            for(let i = 0; i < result.length; i += 2){\n                items.push({\n                    member: result[i],\n                    score: result[i + 1]\n                });\n            }\n            return items;\n        } catch (error) {\n            console.error(`Redis zrange error for key ${key}:`, error);\n            return []; // Return empty array on error\n        }\n    }\n    /**\n   * Delete a key\n   */ static async delete(key) {\n        if (!redis) return; // Skip if Redis not configured\n        try {\n            await redis.del(key);\n        } catch (error) {\n            console.error(`Redis delete error for key ${key}:`, error);\n        // Don't throw - degrade gracefully\n        }\n    }\n    /**\n   * Check if key exists\n   */ static async exists(key) {\n        if (!redis) return false; // Return false if Redis not configured\n        try {\n            const result = await redis.exists(key);\n            return result === 1;\n        } catch (error) {\n            console.error(`Redis exists error for key ${key}:`, error);\n            return false;\n        }\n    }\n    /**\n   * Get TTL for a key\n   */ static async getTTL(key) {\n        if (!redis) return -1; // Return -1 if Redis not configured\n        try {\n            return await redis.ttl(key);\n        } catch (error) {\n            console.error(`Redis TTL error for key ${key}:`, error);\n            return -1;\n        }\n    }\n}\n/**\n * Specialized cache operations for Quantiv\n */ class QuantivCache {\n    /**\n   * Cache expected move snapshot\n   */ static async cacheExpectedMove(symbol, expiry, data, ttlSeconds = 120) {\n        const key = Keys.expectedMoveSnapshot(symbol, expiry);\n        const snapshot = {\n            ...data,\n            timestamp: new Date().toISOString(),\n            symbol: symbol.toUpperCase(),\n            expiry\n        };\n        await RedisCache.setJson(key, snapshot, ttlSeconds);\n    }\n    /**\n   * Get cached expected move\n   */ static async getExpectedMove(symbol, expiry) {\n        const key = Keys.expectedMoveSnapshot(symbol, expiry);\n        return await RedisCache.getJson(key);\n    }\n    /**\n   * Increment daily visitor count\n   */ static async incrementVisitorCount() {\n        const today = new Date().toISOString().split(\"T\")[0].replace(/-/g, \"\");\n        const key = Keys.dailyVisits(today);\n        // Set TTL to 48 hours (keep yesterday's count available)\n        return await RedisCache.increment(key, 48 * 60 * 60);\n    }\n    /**\n   * Get daily visitor count\n   */ static async getVisitorCount(date) {\n        const targetDate = date || new Date().toISOString().split(\"T\")[0].replace(/-/g, \"\");\n        const key = Keys.dailyVisits(targetDate);\n        if (!redis) return 0; // Return 0 if Redis not configured\n        try {\n            const count = await redis.get(key);\n            return count ? parseInt(count, 10) : 0;\n        } catch (error) {\n            console.error(`Error getting visitor count for ${targetDate}:`, error);\n            return 0;\n        }\n    }\n    /**\n   * Cache IV series data\n   */ static async cacheIVSeries(symbol, data, ttlSeconds = 24 * 60 * 60) {\n        const key = Keys.ivSeries(symbol);\n        await RedisCache.setJson(key, data, ttlSeconds);\n    }\n    /**\n   * Get cached IV series\n   */ static async getIVSeries(symbol) {\n        const key = Keys.ivSeries(symbol);\n        return await RedisCache.getJson(key);\n    }\n    /**\n   * Add symbol to top movers for a date\n   */ static async addTopMover(symbol, expectedMovePct, date) {\n        const targetDate = date || new Date().toISOString().split(\"T\")[0].replace(/-/g, \"\");\n        const key = Keys.topMovers(targetDate);\n        await RedisCache.addToSortedSet(key, expectedMovePct, symbol.toUpperCase(), 24 * 60 * 60 // 24 hour TTL\n        );\n    }\n    /**\n   * Get top movers for a date\n   */ static async getTopMovers(date, count = 10) {\n        const targetDate = date || new Date().toISOString().split(\"T\")[0].replace(/-/g, \"\");\n        const key = Keys.topMovers(targetDate);\n        const result = await RedisCache.getTopFromSortedSet(key, count);\n        return result.map((item)=>({\n                symbol: item.member,\n                expectedMovePct: item.score\n            }));\n    }\n}\n/**\n * Health check for Redis connection\n */ async function checkRedisHealth() {\n    if (!redis) {\n        return {\n            connected: false,\n            error: \"Redis not configured (missing REDIS_URL or REDIS_TOKEN)\"\n        };\n    }\n    try {\n        const start = Date.now();\n        await redis.ping();\n        const latency = Date.now() - start;\n        return {\n            connected: true,\n            latency\n        };\n    } catch (error) {\n        return {\n            connected: false,\n            error: error instanceof Error ? error.message : \"Unknown error\"\n        };\n    }\n}\n/**\n * Utility to format date for Redis keys\n */ function formatDateForKey(date = new Date()) {\n    return date.toISOString().split(\"T\")[0].replace(/-/g, \"\");\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (redis);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/cache/redis.ts\n");

/***/ }),

/***/ "(rsc)/./lib/schemas.ts":
/*!************************!*\
  !*** ./lib/schemas.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DateSchema: () => (/* binding */ DateSchema),\n/* harmony export */   EarningsDataSchema: () => (/* binding */ EarningsDataSchema),\n/* harmony export */   EarningsEventSchema: () => (/* binding */ EarningsEventSchema),\n/* harmony export */   EarningsRequestSchema: () => (/* binding */ EarningsRequestSchema),\n/* harmony export */   EarningsResponseSchema: () => (/* binding */ EarningsResponseSchema),\n/* harmony export */   ErrorResponseSchema: () => (/* binding */ ErrorResponseSchema),\n/* harmony export */   ExpectedMoveRequestSchema: () => (/* binding */ ExpectedMoveRequestSchema),\n/* harmony export */   ExpectedMoveResponseSchema: () => (/* binding */ ExpectedMoveResponseSchema),\n/* harmony export */   ExpectedMoveSchema: () => (/* binding */ ExpectedMoveSchema),\n/* harmony export */   ExpirySchema: () => (/* binding */ ExpirySchema),\n/* harmony export */   HealthResponseSchema: () => (/* binding */ HealthResponseSchema),\n/* harmony export */   HitResponseSchema: () => (/* binding */ HitResponseSchema),\n/* harmony export */   IVStatsSchema: () => (/* binding */ IVStatsSchema),\n/* harmony export */   OptionSchema: () => (/* binding */ OptionSchema),\n/* harmony export */   OptionalExpirySchema: () => (/* binding */ OptionalExpirySchema),\n/* harmony export */   OptionsChainSchema: () => (/* binding */ OptionsChainSchema),\n/* harmony export */   OptionsRequestSchema: () => (/* binding */ OptionsRequestSchema),\n/* harmony export */   OptionsResponseSchema: () => (/* binding */ OptionsResponseSchema),\n/* harmony export */   RealizedMoveSchema: () => (/* binding */ RealizedMoveSchema),\n/* harmony export */   SymbolSchema: () => (/* binding */ SymbolSchema),\n/* harmony export */   TopMoversRequestSchema: () => (/* binding */ TopMoversRequestSchema),\n/* harmony export */   TopMoversResponseSchema: () => (/* binding */ TopMoversResponseSchema),\n/* harmony export */   createApiResponse: () => (/* binding */ createApiResponse),\n/* harmony export */   validateRequest: () => (/* binding */ validateRequest)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/ZodError.js\");\n/**\n * Zod schemas for API validation and type safety\n * Used across all API routes for request/response validation\n */ \n/**\n * Common validation schemas\n */ const SymbolSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, \"Symbol is required\").max(10, \"Symbol too long\").regex(/^[A-Za-z0-9.-]+$/, \"Invalid symbol format\").transform((s)=>s.toUpperCase());\nconst ExpirySchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Expiry must be in YYYY-MM-DD format\").refine((date)=>{\n    const parsed = new Date(date);\n    const now = new Date();\n    return parsed > now;\n}, \"Expiry must be in the future\");\nconst OptionalExpirySchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Expiry must be in YYYY-MM-DD format\").refine((date)=>{\n    const parsed = new Date(date);\n    const now = new Date();\n    return parsed > now;\n}, \"Expiry must be in the future\").optional();\nconst DateSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Date must be in YYYY-MM-DD format\");\n/**\n * Options chain schemas\n */ const OptionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    strike: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Strike must be positive\"),\n    mid: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(\"Mid price cannot be negative\"),\n    bid: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(\"Bid price cannot be negative\"),\n    ask: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(\"Ask price cannot be negative\"),\n    iv: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"IV must be positive\").optional(),\n    delta: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    gamma: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    theta: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    vega: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    rho: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    volume: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative().optional(),\n    openInterest: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative().optional(),\n    lastPrice: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative().optional(),\n    change: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    changePct: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional()\n});\nconst OptionsChainSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    symbol: SymbolSchema,\n    spot: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Spot price must be positive\"),\n    expiryDate: ExpirySchema,\n    daysToExpiry: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Days to expiry must be positive\"),\n    strikes: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.number().positive()).min(1, \"At least one strike required\"),\n    calls: zod__WEBPACK_IMPORTED_MODULE_0__.array(OptionSchema).min(1, \"At least one call required\"),\n    puts: zod__WEBPACK_IMPORTED_MODULE_0__.array(OptionSchema).min(1, \"At least one put required\"),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime().optional(),\n    source: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\n/**\n * Expected move schemas\n */ const ExpectedMoveSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    straddle: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        abs: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(\"Straddle move cannot be negative\"),\n        pct: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(\"Straddle percentage cannot be negative\")\n    }),\n    iv: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        abs: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(\"IV move cannot be negative\"),\n        pct: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(\"IV percentage cannot be negative\")\n    }),\n    bands: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        oneSigma: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            upper: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n            lower: zod__WEBPACK_IMPORTED_MODULE_0__.number()\n        }),\n        twoSigma: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            upper: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n            lower: zod__WEBPACK_IMPORTED_MODULE_0__.number()\n        })\n    }),\n    confidence: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        straddle: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n            \"high\",\n            \"medium\",\n            \"low\"\n        ]),\n        iv: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n            \"high\",\n            \"medium\",\n            \"low\"\n        ])\n    })\n});\n/**\n * IV statistics schemas\n */ const IVStatsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    rank: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0).max(1, \"IV rank must be between 0 and 1\"),\n    percentile: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0).max(100, \"Percentile must be between 0 and 100\"),\n    current: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Current IV must be positive\"),\n    min: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Min IV must be positive\"),\n    max: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Max IV must be positive\"),\n    mean: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Mean IV must be positive\"),\n    median: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Median IV must be positive\"),\n    stdDev: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(\"Standard deviation cannot be negative\"),\n    daysInSample: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Days in sample must be positive\")\n});\n/**\n * Earnings schemas\n */ const EarningsEventSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    date: DateSchema,\n    confidence: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        \"confirmed\",\n        \"estimated\"\n    ]),\n    timing: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        \"bmo\",\n        \"amc\",\n        \"unknown\"\n    ]).optional(),\n    estimate: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        eps: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n        revenue: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional()\n    }).optional()\n});\nconst RealizedMoveSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    date: DateSchema,\n    realizedMovePct: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    priceChange: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    priceBefore: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(),\n    priceAfter: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(),\n    volume: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative().optional()\n});\nconst EarningsDataSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    symbol: SymbolSchema,\n    next: EarningsEventSchema.optional(),\n    last: zod__WEBPACK_IMPORTED_MODULE_0__.array(RealizedMoveSchema).max(8, \"Maximum 8 historical earnings\"),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime().optional()\n});\n/**\n * API request schemas\n */ const OptionsRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    symbol: SymbolSchema,\n    expiry: OptionalExpirySchema\n});\nconst ExpectedMoveRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    symbol: SymbolSchema,\n    expiry: OptionalExpirySchema\n});\nconst EarningsRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    symbol: SymbolSchema\n});\nconst TopMoversRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    date: DateSchema.optional(),\n    limit: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1).max(50).default(10)\n});\n/**\n * API response schemas\n */ const OptionsResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    success: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n    data: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        spot: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(),\n        expiryUsed: ExpirySchema,\n        atm: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            strike: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(),\n            callMid: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(),\n            putMid: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(),\n            iv: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(),\n            T: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive()\n        }),\n        rows: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            strike: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(),\n            call: OptionSchema,\n            put: OptionSchema\n        }))\n    }).optional(),\n    error: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime()\n});\nconst ExpectedMoveResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    success: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n    data: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        em: ExpectedMoveSchema,\n        ivRank: IVStatsSchema\n    }).optional(),\n    error: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime()\n});\nconst EarningsResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    success: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n    data: EarningsDataSchema.optional(),\n    error: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime()\n});\nconst HitResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    success: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n    data: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        count: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative()\n    }).optional(),\n    error: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime()\n});\nconst TopMoversResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    success: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n    data: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        symbol: SymbolSchema,\n        expectedMovePct: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(),\n        spot: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive().optional(),\n        volume: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative().optional()\n    })).optional(),\n    error: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime()\n});\n/**\n * Error response schema\n */ const ErrorResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    success: zod__WEBPACK_IMPORTED_MODULE_0__.literal(false),\n    error: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    detail: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    hint: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime()\n});\n/**\n * Health check schema\n */ const HealthResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    status: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        \"healthy\",\n        \"degraded\",\n        \"unhealthy\"\n    ]),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime(),\n    services: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        redis: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            connected: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n            latency: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n            error: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n        }),\n        cache: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            l1Stats: zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n                size: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n                hitRate: zod__WEBPACK_IMPORTED_MODULE_0__.number()\n            }))\n        })\n    }),\n    version: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\n/**\n * Utility functions for schema validation\n */ function validateRequest(schema, data) {\n    try {\n        const result = schema.parse(data);\n        return {\n            success: true,\n            data: result\n        };\n    } catch (error) {\n        if (error instanceof zod__WEBPACK_IMPORTED_MODULE_1__.ZodError) {\n            return {\n                success: false,\n                error: \"Validation failed\",\n                details: error.errors.map((e)=>`${e.path.join(\".\")}: ${e.message}`)\n            };\n        }\n        return {\n            success: false,\n            error: \"Unknown validation error\",\n            details: [\n                error instanceof Error ? error.message : \"Unknown error\"\n            ]\n        };\n    }\n}\n/**\n * Create standardized API response\n */ function createApiResponse(data, error, detail, hint) {\n    return {\n        success: !error,\n        ...data && {\n            data\n        },\n        ...error && {\n            error\n        },\n        ...detail && {\n            detail\n        },\n        ...hint && {\n            hint\n        },\n        timestamp: new Date().toISOString()\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/schemas.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/liveDataService.ts":
/*!*****************************************!*\
  !*** ./lib/services/liveDataService.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchLiveEarnings: () => (/* binding */ fetchLiveEarnings),\n/* harmony export */   fetchLiveExpectedMove: () => (/* binding */ fetchLiveExpectedMove),\n/* harmony export */   fetchLiveOptionsChain: () => (/* binding */ fetchLiveOptionsChain),\n/* harmony export */   isLiveDataAvailable: () => (/* binding */ isLiveDataAvailable),\n/* harmony export */   liveDataService: () => (/* binding */ liveDataService)\n/* harmony export */ });\n/* harmony import */ var yahoo_finance2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! yahoo-finance2 */ \"(rsc)/./node_modules/yahoo-finance2/dist/esm/src/index-node.js\");\n/**\n * Live Financial Data Service\n * Integrates with multiple financial data providers for real-time market data\n */ \nclass LiveDataService {\n    constructor(){\n        // Initialize API clients with environment variables\n        this.finnhubApiKey = process.env.FINNHUB_API_KEY || \"\";\n        this.alphaVantageApiKey = process.env.ALPHA_VANTAGE_API_KEY || \"\";\n    }\n    static getInstance() {\n        if (!LiveDataService.instance) {\n            LiveDataService.instance = new LiveDataService();\n        }\n        return LiveDataService.instance;\n    }\n    // Check if live data services are available\n    isLiveDataAvailable() {\n        return !!(this.finnhubApiKey || this.alphaVantageApiKey);\n    }\n    // Fetch live options chain data\n    async fetchLiveOptionsChain(symbol, expiration) {\n        try {\n            // Use Yahoo Finance for options data\n            return await this.fetchYahooOptionsChain(symbol, expiration);\n        } catch (error) {\n            console.error(`Failed to fetch live options chain for ${symbol}:`, error);\n            return null;\n        }\n    }\n    // Fetch live earnings data\n    async fetchLiveEarnings(symbol) {\n        try {\n            // Use Yahoo Finance for earnings data\n            const yahooData = await this.fetchYahooEarnings(symbol);\n            return this.processYahooEarnings(symbol, yahooData);\n        } catch (error) {\n            console.error(`Failed to fetch live earnings for ${symbol}:`, error);\n            return null;\n        }\n    }\n    // Fetch live expected move data\n    async fetchLiveExpectedMove(symbol) {\n        try {\n            // Get current stock price and IV data\n            const [quote, optionsData] = await Promise.all([\n                yahoo_finance2__WEBPACK_IMPORTED_MODULE_0__[\"default\"].quote(symbol),\n                this.fetchLiveOptionsChain(symbol)\n            ]);\n            if (!quote || !optionsData) return null;\n            return this.calculateExpectedMove(symbol, quote, optionsData);\n        } catch (error) {\n            console.error(`Failed to fetch live expected move for ${symbol}:`, error);\n            return null;\n        }\n    }\n    // Yahoo Finance options chain implementation (simplified)\n    async fetchYahooOptionsChain(symbol, expiration) {\n        try {\n            // For now, return null to use enhanced mock data\n            // Yahoo Finance options API has complex structure that requires more setup\n            console.log(`[live-data] Yahoo options chain not implemented yet for ${symbol}, using enhanced mock data`);\n            return null;\n        } catch (error) {\n            console.error(\"Yahoo options chain error:\", error);\n            return null;\n        }\n    }\n    // Yahoo Finance earnings implementation (simplified)\n    async fetchYahooEarnings(symbol) {\n        try {\n            // For now, return null to use enhanced mock data\n            // Yahoo Finance earnings API requires more complex setup\n            console.log(`[live-data] Yahoo earnings not implemented yet for ${symbol}, using enhanced mock data`);\n            return null;\n        } catch (error) {\n            console.error(\"Yahoo earnings error:\", error);\n            return null;\n        }\n    }\n    // Process Yahoo Finance earnings data\n    processYahooEarnings(symbol, yahooData) {\n        try {\n            if (!yahooData) return null;\n            // Extract earnings data from Yahoo Finance response\n            const calendarEvents = yahooData.calendarEvents;\n            const earningsHistory = yahooData.earningsHistory;\n            // Next earnings date\n            let nextEarningsDate;\n            let nextEarningsTime = \"UNKNOWN\";\n            if (calendarEvents?.earnings?.[0]) {\n                nextEarningsDate = calendarEvents.earnings[0].date;\n                // Yahoo doesn't provide timing, so we'll estimate\n                nextEarningsTime = Math.random() > 0.5 ? \"BMO\" : \"AMC\";\n            }\n            // Historical earnings\n            const historicalEarnings = [];\n            if (earningsHistory?.history) {\n                for (const earning of earningsHistory.history.slice(0, 8)){\n                    historicalEarnings.push({\n                        date: earning.quarter?.fmt || \"\",\n                        actualEPS: earning.epsActual?.raw,\n                        estimatedEPS: earning.epsEstimate?.raw,\n                        surprise: earning.epsDifference?.raw,\n                        priceMoveBefore: 0,\n                        priceMoveAfter: 0,\n                        priceMovePercent: Math.random() * 10 - 5 // Mock price move\n                    });\n                }\n            }\n            // Calculate stats\n            const avgMove = Math.random() * 8 + 2; // 2-10%\n            const beatCount = historicalEarnings.filter((e)=>(e.surprise || 0) > 0).length;\n            const beatRate = historicalEarnings.length > 0 ? beatCount / historicalEarnings.length : 0.6;\n            return {\n                symbol,\n                nextEarningsDate,\n                nextEarningsTime,\n                historicalEarnings,\n                stats: {\n                    avgMove,\n                    avgAbsMove: avgMove,\n                    beatRate,\n                    avgBeat: historicalEarnings.length > 0 ? historicalEarnings.reduce((sum, e)=>sum + (e.surprise || 0), 0) / historicalEarnings.length : 0\n                }\n            };\n        } catch (error) {\n            console.error(\"Error processing Yahoo earnings data:\", error);\n            return null;\n        }\n    }\n    // Calculate expected move from options data\n    calculateExpectedMove(symbol, quote, optionsData) {\n        try {\n            const underlyingPrice = quote.regularMarketPrice || optionsData.underlyingPrice;\n            // Find ATM options for straddle calculation\n            const atmStrike = optionsData.strikes.reduce((closest, strike)=>Math.abs(strike.strike - underlyingPrice) < Math.abs(closest.strike - underlyingPrice) ? strike : closest);\n            // Calculate straddle price and move\n            const straddlePrice = atmStrike.call.last + atmStrike.put.last || (atmStrike.call.bid + atmStrike.call.ask) / 2 + (atmStrike.put.bid + atmStrike.put.ask) / 2;\n            const straddleMove = straddlePrice;\n            const straddleMovePercent = straddleMove / underlyingPrice * 100;\n            // Calculate average IV\n            const allIVs = optionsData.strikes.flatMap((s)=>[\n                    s.call.impliedVolatility,\n                    s.put.impliedVolatility\n                ]).filter((iv)=>iv > 0);\n            const avgIV = allIVs.length > 0 ? allIVs.reduce((sum, iv)=>sum + iv, 0) / allIVs.length : 0.3;\n            // Mock IV rank/percentile (would need historical IV data)\n            const ivRank = Math.random() * 100;\n            const ivPercentile = Math.random() * 100;\n            return {\n                symbol,\n                underlyingPrice,\n                impliedVolatility: avgIV,\n                timeToExpiry: 30,\n                straddle: {\n                    price: straddlePrice,\n                    move: straddleMove,\n                    movePercent: straddleMovePercent\n                },\n                iv: {\n                    rank: ivRank,\n                    percentile: ivPercentile,\n                    current: avgIV * 100,\n                    high52Week: avgIV * 150,\n                    low52Week: avgIV * 50\n                },\n                summary: {\n                    daily: straddleMovePercent / 30,\n                    weekly: straddleMovePercent / 4,\n                    monthly: straddleMovePercent // Monthly move\n                }\n            };\n        } catch (error) {\n            console.error(\"Error calculating expected move:\", error);\n            return null;\n        }\n    }\n}\n// Export singleton instance\nconst liveDataService = LiveDataService.getInstance();\n// Utility functions for easy access\nasync function fetchLiveOptionsChain(symbol, expiration) {\n    return await liveDataService.fetchLiveOptionsChain(symbol, expiration);\n}\nasync function fetchLiveEarnings(symbol) {\n    return await liveDataService.fetchLiveEarnings(symbol);\n}\nasync function fetchLiveExpectedMove(symbol) {\n    return await liveDataService.fetchLiveExpectedMove(symbol);\n}\nfunction isLiveDataAvailable() {\n    return liveDataService.isLiveDataAvailable();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/liveDataService.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@sinclair","vendor-chunks/yahoo-finance2","vendor-chunks/psl","vendor-chunks/tough-cookie","vendor-chunks/url-parse","vendor-chunks/punycode","vendor-chunks/querystringify","vendor-chunks/universalify","vendor-chunks/requires-port","vendor-chunks/zod","vendor-chunks/@upstash","vendor-chunks/lru-cache","vendor-chunks/uncrypto"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fearnings%2Froute&page=%2Fapi%2Fearnings%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fearnings%2Froute.ts&appDir=%2FUsers%2Fken%2FDesktop%2Fquantiv%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fken%2FDesktop%2Fquantiv&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();