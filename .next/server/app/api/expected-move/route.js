"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/expected-move/route";
exports.ids = ["app/api/expected-move/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fexpected-move%2Froute&page=%2Fapi%2Fexpected-move%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fexpected-move%2Froute.ts&appDir=%2FUsers%2Fken%2FDesktop%2Fquantiv%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fken%2FDesktop%2Fquantiv&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fexpected-move%2Froute&page=%2Fapi%2Fexpected-move%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fexpected-move%2Froute.ts&appDir=%2FUsers%2Fken%2FDesktop%2Fquantiv%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fken%2FDesktop%2Fquantiv&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_ken_Desktop_quantiv_app_api_expected_move_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/expected-move/route.ts */ \"(rsc)/./app/api/expected-move/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/expected-move/route\",\n        pathname: \"/api/expected-move\",\n        filename: \"route\",\n        bundlePath: \"app/api/expected-move/route\"\n    },\n    resolvedPagePath: \"/Users/ken/Desktop/quantiv/app/api/expected-move/route.ts\",\n    nextConfigOutput,\n    userland: _Users_ken_Desktop_quantiv_app_api_expected_move_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/expected-move/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZleHBlY3RlZC1tb3ZlJTJGcm91dGUmcGFnZT0lMkZhcGklMkZleHBlY3RlZC1tb3ZlJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGZXhwZWN0ZWQtbW92ZSUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmtlbiUyRkRlc2t0b3AlMkZxdWFudGl2JTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRmtlbiUyRkRlc2t0b3AlMkZxdWFudGl2JmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNTO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVhbnRpdi8/N2QxZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMva2VuL0Rlc2t0b3AvcXVhbnRpdi9hcHAvYXBpL2V4cGVjdGVkLW1vdmUvcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2V4cGVjdGVkLW1vdmUvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9leHBlY3RlZC1tb3ZlXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9leHBlY3RlZC1tb3ZlL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL2tlbi9EZXNrdG9wL3F1YW50aXYvYXBwL2FwaS9leHBlY3RlZC1tb3ZlL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9leHBlY3RlZC1tb3ZlL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fexpected-move%2Froute&page=%2Fapi%2Fexpected-move%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fexpected-move%2Froute.ts&appDir=%2FUsers%2Fken%2FDesktop%2Fquantiv%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fken%2FDesktop%2Fquantiv&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/expected-move/route.ts":
/*!****************************************!*\
  !*** ./app/api/expected-move/route.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   OPTIONS: () => (/* binding */ OPTIONS)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_schemas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/schemas */ \"(rsc)/./lib/schemas.ts\");\n/* harmony import */ var _lib_cache_lru__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/cache/lru */ \"(rsc)/./lib/cache/lru.ts\");\n/* harmony import */ var _lib_cache_redis__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/cache/redis */ \"(rsc)/./lib/cache/redis.ts\");\n/* harmony import */ var _lib_services_liveDataService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/services/liveDataService */ \"(rsc)/./lib/services/liveDataService.ts\");\n/* harmony import */ var _lib_services_expectedMove__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/services/expectedMove */ \"(rsc)/./lib/services/expectedMove.ts\");\n/* harmony import */ var _lib_services_ivStats__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/lib/services/ivStats */ \"(rsc)/./lib/services/ivStats.ts\");\n/**\n * /api/expected-move - Expected move calculations endpoint\n * Returns expected move data using straddle and IV methods with confidence assessment\n */ \n\n\n\n\n\n\n/**\n * Mock options data provider (shared logic with /api/options)\n * In production, this would be extracted to a shared provider service\n */ class OptionsProvider {\n    static async getChain(symbol, expiry) {\n        // Simulate API delay\n        await new Promise((resolve)=>setTimeout(resolve, 80));\n        const spot = 150.00 + Math.random() * 50;\n        const selectedExpiry = expiry || \"2024-02-16\";\n        const expiryDate = new Date(selectedExpiry);\n        const daysToExpiry = Math.max(1, Math.ceil((expiryDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24)));\n        // Generate strikes around spot price\n        const strikes = [];\n        const baseStrike = Math.round(spot / 5) * 5;\n        for(let i = -10; i <= 10; i++){\n            strikes.push(baseStrike + i * 5);\n        }\n        // Generate mock options data with realistic pricing\n        const calls = strikes.map((strike)=>{\n            const intrinsic = Math.max(0, spot - strike);\n            const timeValue = Math.random() * 3 + 0.5;\n            const mid = intrinsic + timeValue;\n            const spread = Math.max(0.01, mid * 0.04); // 4% spread\n            return {\n                strike,\n                mid,\n                bid: Math.max(0.01, mid - spread / 2),\n                ask: mid + spread / 2,\n                iv: 0.20 + Math.random() * 0.30,\n                volume: Math.floor(Math.random() * 1000),\n                openInterest: Math.floor(Math.random() * 5000)\n            };\n        });\n        const puts = strikes.map((strike)=>{\n            const intrinsic = Math.max(0, strike - spot);\n            const timeValue = Math.random() * 3 + 0.5;\n            const mid = intrinsic + timeValue;\n            const spread = Math.max(0.01, mid * 0.04);\n            return {\n                strike,\n                mid,\n                bid: Math.max(0.01, mid - spread / 2),\n                ask: mid + spread / 2,\n                iv: 0.20 + Math.random() * 0.30,\n                volume: Math.floor(Math.random() * 1000),\n                openInterest: Math.floor(Math.random() * 5000)\n            };\n        });\n        return {\n            spot,\n            expiryDate: selectedExpiry,\n            daysToExpiry,\n            strikes,\n            calls,\n            puts\n        };\n    }\n}\n/**\n * GET /api/expected-move?symbol=AAPL&expiry=2024-01-19\n */ async function GET(request) {\n    const startTime = Date.now();\n    try {\n        // Parse and validate query parameters\n        const url = new URL(request.url);\n        const params = {\n            symbol: url.searchParams.get(\"symbol\"),\n            expiry: url.searchParams.get(\"expiry\") || undefined\n        };\n        const validation = (0,_lib_schemas__WEBPACK_IMPORTED_MODULE_1__.validateRequest)(_lib_schemas__WEBPACK_IMPORTED_MODULE_1__.ExpectedMoveRequestSchema, params);\n        if (!validation.success) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json((0,_lib_schemas__WEBPACK_IMPORTED_MODULE_1__.createApiResponse)(undefined, \"Invalid request parameters\", validation.details?.join(\", \")), {\n                status: 400\n            });\n        }\n        const { symbol, expiry } = validation.data;\n        // Generate cache key for expected move\n        const emCacheKey = _lib_cache_lru__WEBPACK_IMPORTED_MODULE_2__.CacheKeys.expectedMove(symbol, expiry || \"default\");\n        // Try L1 cache first\n        let expectedMoveData = _lib_cache_lru__WEBPACK_IMPORTED_MODULE_2__.CacheInstances.expectedMove.get(emCacheKey);\n        let cacheHit = \"l1\";\n        if (!expectedMoveData) {\n            // Try L2 (Redis) cache\n            const redisKey = _lib_cache_redis__WEBPACK_IMPORTED_MODULE_3__.Keys.expectedMoveSnapshot(symbol, expiry || \"default\");\n            expectedMoveData = await _lib_cache_redis__WEBPACK_IMPORTED_MODULE_3__.RedisCache.getJson(redisKey);\n            cacheHit = expectedMoveData ? \"l2\" : \"miss\";\n            if (!expectedMoveData) {\n                // Try to fetch live expected move data first\n                let liveExpectedMoveData = null;\n                if ((0,_lib_services_liveDataService__WEBPACK_IMPORTED_MODULE_4__.isLiveDataAvailable)()) {\n                    try {\n                        liveExpectedMoveData = await (0,_lib_services_liveDataService__WEBPACK_IMPORTED_MODULE_4__.fetchLiveExpectedMove)(symbol);\n                        console.log(`[expected-move-api] Live data ${liveExpectedMoveData ? \"found\" : \"not found\"} for ${symbol}`);\n                    } catch (error) {\n                        console.warn(`[expected-move-api] Live data fetch failed for ${symbol}:`, error);\n                    }\n                }\n                // If we have live data, use it\n                if (liveExpectedMoveData) {\n                    expectedMoveData = {\n                        symbol,\n                        summary: {\n                            daily: liveExpectedMoveData.summary.daily,\n                            weekly: liveExpectedMoveData.summary.weekly,\n                            monthly: liveExpectedMoveData.summary.monthly\n                        },\n                        straddle: {\n                            price: liveExpectedMoveData.straddle.price,\n                            move: liveExpectedMoveData.straddle.move,\n                            movePercent: liveExpectedMoveData.straddle.movePercent\n                        },\n                        iv: {\n                            rank: liveExpectedMoveData.iv.rank,\n                            percentile: liveExpectedMoveData.iv.percentile,\n                            current: liveExpectedMoveData.iv.current,\n                            high52Week: liveExpectedMoveData.iv.high52Week,\n                            low52Week: liveExpectedMoveData.iv.low52Week\n                        },\n                        confidence: \"high\",\n                        method: \"straddle\",\n                        timeToExpiry: liveExpectedMoveData.timeToExpiry,\n                        underlyingPrice: liveExpectedMoveData.underlyingPrice,\n                        impliedVolatility: liveExpectedMoveData.impliedVolatility\n                    };\n                    // Cache the live data\n                    _lib_cache_lru__WEBPACK_IMPORTED_MODULE_2__.CacheInstances.expectedMove.set(emCacheKey, expectedMoveData);\n                    await _lib_cache_redis__WEBPACK_IMPORTED_MODULE_3__.RedisCache.setJson(_lib_cache_redis__WEBPACK_IMPORTED_MODULE_3__.Keys.expectedMoveSnapshot(symbol, expiry || \"default\"), expectedMoveData, 300); // 5 min TTL for live data\n                    const response = (0,_lib_schemas__WEBPACK_IMPORTED_MODULE_1__.createApiResponse)(expectedMoveData);\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response);\n                }\n                // Cache miss - calculate expected move using mock data\n                // First, get options chain data\n                const chainCacheKey = _lib_cache_lru__WEBPACK_IMPORTED_MODULE_2__.CacheKeys.optionsChain(symbol, expiry || \"default\");\n                let chainData = _lib_cache_lru__WEBPACK_IMPORTED_MODULE_2__.CacheInstances.optionsChain.get(chainCacheKey);\n                if (!chainData) {\n                    // Try Redis for chain data\n                    const chainRedisKey = _lib_cache_redis__WEBPACK_IMPORTED_MODULE_3__.Keys.optionsChain(symbol, expiry || \"default\");\n                    chainData = await _lib_cache_redis__WEBPACK_IMPORTED_MODULE_3__.RedisCache.getJson(chainRedisKey);\n                    if (!chainData) {\n                        // Fetch fresh chain data\n                        chainData = await OptionsProvider.getChain(symbol, expiry);\n                        // Cache chain data\n                        _lib_cache_lru__WEBPACK_IMPORTED_MODULE_2__.CacheInstances.optionsChain.set(chainCacheKey, chainData, 60 * 1000);\n                        await _lib_cache_redis__WEBPACK_IMPORTED_MODULE_3__.RedisCache.setJson(chainRedisKey, chainData, 300);\n                    } else {\n                        // Cache in L1\n                        _lib_cache_lru__WEBPACK_IMPORTED_MODULE_2__.CacheInstances.optionsChain.set(chainCacheKey, chainData, 60 * 1000);\n                    }\n                }\n                // Calculate expected move\n                const expectedMove = (0,_lib_services_expectedMove__WEBPACK_IMPORTED_MODULE_5__.computeExpectedMove)(chainData);\n                const confidence = (0,_lib_services_expectedMove__WEBPACK_IMPORTED_MODULE_5__.assessConfidence)(chainData, expectedMove.atm);\n                expectedMoveData = {\n                    ...expectedMove,\n                    confidence,\n                    timestamp: new Date().toISOString(),\n                    symbol: symbol\n                };\n                // Cache expected move in both layers\n                _lib_cache_lru__WEBPACK_IMPORTED_MODULE_2__.CacheInstances.expectedMove.set(emCacheKey, expectedMoveData, 90 * 1000); // 1.5 minutes L1\n                await _lib_cache_redis__WEBPACK_IMPORTED_MODULE_3__.QuantivCache.cacheExpectedMove(symbol, expiry || \"default\", expectedMoveData, 180); // 3 minutes L2\n                // Add to top movers if significant move\n                if (expectedMoveData?.straddle?.pct > 5.0) {\n                    await _lib_cache_redis__WEBPACK_IMPORTED_MODULE_3__.QuantivCache.addTopMover(symbol, expectedMoveData.straddle.pct);\n                }\n                cacheHit = \"miss\";\n            } else {\n                // Cache in L1 for next time\n                _lib_cache_lru__WEBPACK_IMPORTED_MODULE_2__.CacheInstances.expectedMove.set(emCacheKey, expectedMoveData, 90 * 1000);\n            }\n        }\n        // Get IV rank data (mock for now)\n        const ivCacheKey = _lib_cache_lru__WEBPACK_IMPORTED_MODULE_2__.CacheKeys.ivSeries(symbol, 252); // 1 year of data\n        let ivStats = _lib_cache_lru__WEBPACK_IMPORTED_MODULE_2__.CacheInstances.ivSeries.get(ivCacheKey);\n        if (!ivStats) {\n            // Generate mock IV data and calculate stats\n            const ivHistory = (0,_lib_services_ivStats__WEBPACK_IMPORTED_MODULE_6__.createMockIVHistory)(252, 0.25); // 1 year\n            const currentIV = expectedMoveData?.atm?.iv || 0.25;\n            ivStats = (0,_lib_services_ivStats__WEBPACK_IMPORTED_MODULE_6__.calculateIVStats)(ivHistory, currentIV);\n            // Cache IV stats\n            _lib_cache_lru__WEBPACK_IMPORTED_MODULE_2__.CacheInstances.ivSeries.set(ivCacheKey, ivStats, 1800 * 1000); // 30 minutes\n            await _lib_cache_redis__WEBPACK_IMPORTED_MODULE_3__.RedisCache.setJson(_lib_cache_redis__WEBPACK_IMPORTED_MODULE_3__.Keys.ivSeries(symbol), ivStats, 1800); // 30 minutes\n        }\n        // Transform data to match ExpectedMoveCard component expectations\n        const spotPrice = expectedMoveData?.atm?.spot || 150;\n        const straddleMove = expectedMoveData?.straddle;\n        const response = (0,_lib_schemas__WEBPACK_IMPORTED_MODULE_1__.createApiResponse)({\n            symbol: symbol,\n            spotPrice: spotPrice,\n            summary: {\n                daily: straddleMove ? {\n                    move: straddleMove.abs,\n                    percentage: straddleMove.pct,\n                    lower: spotPrice - straddleMove.abs,\n                    upper: spotPrice + straddleMove.abs\n                } : null,\n                weekly: straddleMove ? {\n                    move: straddleMove.abs * 2.65,\n                    percentage: straddleMove.pct * 2.65,\n                    lower: spotPrice - straddleMove.abs * 2.65,\n                    upper: spotPrice + straddleMove.abs * 2.65\n                } : null,\n                monthly: straddleMove ? {\n                    move: straddleMove.abs * 5.48,\n                    percentage: straddleMove.pct * 5.48,\n                    lower: spotPrice - straddleMove.abs * 5.48,\n                    upper: spotPrice + straddleMove.abs * 5.48\n                } : null\n            },\n            // Also include the raw data for other components that might need it\n            em: expectedMoveData,\n            ivRank: ivStats\n        });\n        const processingTime = Date.now() - startTime;\n        // Add performance headers\n        const headers = new Headers({\n            \"Content-Type\": \"application/json\",\n            \"Cache-Control\": \"public, s-maxage=90, stale-while-revalidate=300\",\n            \"X-Cache-Hit\": cacheHit,\n            \"X-Processing-Time\": `${processingTime}ms`,\n            \"X-Symbol\": symbol,\n            \"X-Expiry\": expectedMoveData?.atm?.expiry || \"default\"\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response, {\n            headers\n        });\n    } catch (error) {\n        console.error(\"[API] /api/expected-move error:\", error);\n        const errorResponse = (0,_lib_schemas__WEBPACK_IMPORTED_MODULE_1__.createApiResponse)(undefined, \"Internal server error\", error instanceof Error ? error.message : \"Unknown error\", \"Please check symbol format and try again\");\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(errorResponse, {\n            status: 500\n        });\n    }\n}\n/**\n * OPTIONS /api/expected-move - CORS preflight\n */ async function OPTIONS() {\n    return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(null, {\n        status: 200,\n        headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Methods\": \"GET, OPTIONS\",\n            \"Access-Control-Allow-Headers\": \"Content-Type\"\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/expected-move/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/cache/lru.ts":
/*!**************************!*\
  !*** ./lib/cache/lru.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheInstances: () => (/* binding */ CacheInstances),\n/* harmony export */   CacheKeys: () => (/* binding */ CacheKeys),\n/* harmony export */   QuantivLRUCache: () => (/* binding */ QuantivLRUCache),\n/* harmony export */   clearAllCaches: () => (/* binding */ clearAllCaches),\n/* harmony export */   getAllCacheStats: () => (/* binding */ getAllCacheStats)\n/* harmony export */ });\n/* harmony import */ var lru_cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lru-cache */ \"(rsc)/./node_modules/lru-cache/dist/esm/index.js\");\n/**\n * LRU Cache for L1 (in-process) caching\n * Used for fast API response caching within each API route\n */ \n/**\n * Generic LRU cache wrapper with TTL and statistics\n */ class QuantivLRUCache {\n    constructor(name, options = {}){\n        this.hits = 0;\n        this.misses = 0;\n        this.name = name;\n        this.cache = new lru_cache__WEBPACK_IMPORTED_MODULE_0__.LRUCache({\n            max: options.maxSize || 100,\n            ttl: options.ttlMs || 60 * 1000,\n            updateAgeOnGet: options.updateAgeOnGet ?? true,\n            dispose: (value, key)=>{\n                // Optional cleanup when items are evicted\n                console.debug(`[${this.name}] Evicted cache entry: ${key}`);\n            }\n        });\n    }\n    /**\n   * Get item from cache\n   */ get(key) {\n        const entry = this.cache.get(key);\n        if (entry) {\n            this.hits++;\n            return entry.data;\n        } else {\n            this.misses++;\n            return null;\n        }\n    }\n    /**\n   * Set item in cache\n   */ set(key, data, ttlMs) {\n        const entry = {\n            data,\n            timestamp: Date.now(),\n            key\n        };\n        if (ttlMs) {\n            this.cache.set(key, entry, {\n                ttl: ttlMs\n            });\n        } else {\n            this.cache.set(key, entry);\n        }\n    }\n    /**\n   * Check if key exists in cache\n   */ has(key) {\n        return this.cache.has(key);\n    }\n    /**\n   * Delete item from cache\n   */ delete(key) {\n        return this.cache.delete(key);\n    }\n    /**\n   * Clear all items from cache\n   */ clear() {\n        this.cache.clear();\n        this.hits = 0;\n        this.misses = 0;\n    }\n    /**\n   * Get cache statistics\n   */ getStats() {\n        const total = this.hits + this.misses;\n        return {\n            name: this.name,\n            size: this.cache.size,\n            maxSize: this.cache.max,\n            hits: this.hits,\n            misses: this.misses,\n            hitRate: total > 0 ? this.hits / total * 100 : 0,\n            calculatedSize: this.cache.calculatedSize || 0\n        };\n    }\n    /**\n   * Get or set pattern - fetch data if not in cache\n   */ async getOrSet(key, fetchFn, ttlMs) {\n        const cached = this.get(key);\n        if (cached !== null) {\n            return cached;\n        }\n        try {\n            const data = await fetchFn();\n            this.set(key, data, ttlMs);\n            return data;\n        } catch (error) {\n            console.error(`[${this.name}] Error fetching data for key ${key}:`, error);\n            throw error;\n        }\n    }\n    /**\n   * Peek at item without updating LRU order\n   */ peek(key) {\n        const entry = this.cache.peek(key);\n        return entry ? entry.data : null;\n    }\n    /**\n   * Get all keys in cache\n   */ keys() {\n        return Array.from(this.cache.keys());\n    }\n    /**\n   * Get cache info for debugging\n   */ getInfo() {\n        const entries = [];\n        const now = Date.now();\n        // Convert iterator to array to avoid downlevelIteration issues\n        const cacheEntries = Array.from(this.cache.entries());\n        for (const [key, entry] of cacheEntries){\n            entries.push({\n                key,\n                timestamp: entry.timestamp,\n                age: now - entry.timestamp\n            });\n        }\n        return {\n            name: this.name,\n            entries,\n            stats: this.getStats()\n        };\n    }\n}\n/**\n * Pre-configured cache instances for different data types\n */ const CacheInstances = {\n    // Options chain cache - larger size, shorter TTL\n    optionsChain: new QuantivLRUCache(\"options-chain\", {\n        maxSize: 200,\n        ttlMs: 60 * 1000,\n        updateAgeOnGet: true\n    }),\n    // Expected move cache - medium size, medium TTL\n    expectedMove: new QuantivLRUCache(\"expected-move\", {\n        maxSize: 150,\n        ttlMs: 90 * 1000,\n        updateAgeOnGet: true\n    }),\n    // Earnings data cache - smaller size, longer TTL\n    earnings: new QuantivLRUCache(\"earnings\", {\n        maxSize: 100,\n        ttlMs: 300 * 1000,\n        updateAgeOnGet: true\n    }),\n    // Price history cache - smaller size, longer TTL\n    priceHistory: new QuantivLRUCache(\"price-history\", {\n        maxSize: 50,\n        ttlMs: 600 * 1000,\n        updateAgeOnGet: false // Don't update age for historical data\n    }),\n    // IV series cache - medium size, longer TTL\n    ivSeries: new QuantivLRUCache(\"iv-series\", {\n        maxSize: 100,\n        ttlMs: 1800 * 1000,\n        updateAgeOnGet: false\n    })\n};\n/**\n * Get all cache statistics for monitoring\n */ function getAllCacheStats() {\n    return {\n        optionsChain: CacheInstances.optionsChain.getStats(),\n        expectedMove: CacheInstances.expectedMove.getStats(),\n        earnings: CacheInstances.earnings.getStats(),\n        priceHistory: CacheInstances.priceHistory.getStats(),\n        ivSeries: CacheInstances.ivSeries.getStats()\n    };\n}\n/**\n * Clear all caches (useful for testing or manual cache invalidation)\n */ function clearAllCaches() {\n    Object.values(CacheInstances).forEach((cache)=>cache.clear());\n}\n/**\n * Utility to generate cache keys for different data types\n */ const CacheKeys = {\n    optionsChain: (symbol, expiry)=>`${symbol.toUpperCase()}:${expiry}`,\n    expectedMove: (symbol, expiry)=>`${symbol.toUpperCase()}:${expiry}`,\n    earnings: (symbol)=>symbol.toUpperCase(),\n    priceHistory: (symbol, days)=>`${symbol.toUpperCase()}:${days}d`,\n    ivSeries: (symbol, days)=>`${symbol.toUpperCase()}:${days}d`\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/cache/lru.ts\n");

/***/ }),

/***/ "(rsc)/./lib/cache/redis.ts":
/*!****************************!*\
  !*** ./lib/cache/redis.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Keys: () => (/* binding */ Keys),\n/* harmony export */   QuantivCache: () => (/* binding */ QuantivCache),\n/* harmony export */   RedisCache: () => (/* binding */ RedisCache),\n/* harmony export */   checkRedisHealth: () => (/* binding */ checkRedisHealth),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   formatDateForKey: () => (/* binding */ formatDateForKey)\n/* harmony export */ });\n/* harmony import */ var _upstash_redis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @upstash/redis */ \"(rsc)/./node_modules/@upstash/redis/nodejs.mjs\");\n/**\n * Redis Client Wrapper for Upstash\n * Provides caching utilities and key builders for Quantiv\n */ \n// Initialize Redis client - disabled for development\nconst redis = process.env.REDIS_URL && process.env.REDIS_TOKEN ? new _upstash_redis__WEBPACK_IMPORTED_MODULE_0__.Redis({\n    url: process.env.REDIS_URL,\n    token: process.env.REDIS_TOKEN\n}) : null;\n/**\n * Redis key builders following Quantiv's naming convention\n */ const Keys = {\n    // Expected move snapshot: em:snap:${symbol}:${expiry}\n    expectedMoveSnapshot: (symbol, expiry)=>`em:snap:${symbol.toUpperCase()}:${expiry}`,\n    // Top movers for a date: em:top:${YYYYMMDD}\n    topMovers: (date)=>`em:top:${date}`,\n    // IV series for a symbol: iv:series:${symbol}\n    ivSeries: (symbol)=>`iv:series:${symbol.toUpperCase()}`,\n    // Daily visitor count: d:visits:${YYYYMMDD}\n    dailyVisits: (date)=>`d:visits:${date}`,\n    // Options chain cache: chain:${symbol}:${expiry}\n    optionsChain: (symbol, expiry)=>`chain:${symbol.toUpperCase()}:${expiry}`,\n    // Earnings data: earnings:${symbol}\n    earnings: (symbol)=>`earnings:${symbol.toUpperCase()}`,\n    // Price history: prices:${symbol}\n    priceHistory: (symbol)=>`prices:${symbol.toUpperCase()}`\n};\n/**\n * Generic JSON cache operations\n */ class RedisCache {\n    /**\n   * Set JSON data with TTL\n   */ static async setJson(key, data, ttlSeconds = 120) {\n        if (!redis) return; // Skip if Redis not configured\n        try {\n            await redis.setex(key, ttlSeconds, JSON.stringify(data));\n        } catch (error) {\n            console.error(`Redis setJson error for key ${key}:`, error);\n        // Don't throw - degrade gracefully without cache\n        }\n    }\n    /**\n   * Get JSON data\n   */ static async getJson(key) {\n        if (!redis) return null; // Skip if Redis not configured\n        try {\n            const result = await redis.get(key);\n            return result ? JSON.parse(result) : null;\n        } catch (error) {\n            console.error(`Redis getJson error for key ${key}:`, error);\n            return null; // Degrade gracefully\n        }\n    }\n    /**\n   * Increment counter and return new value\n   */ static async increment(key, ttlSeconds) {\n        if (!redis) return 1; // Return 1 if Redis not configured\n        try {\n            const newValue = await redis.incr(key);\n            if (ttlSeconds && newValue === 1) {\n                // Set TTL only on first increment (when key is created)\n                await redis.expire(key, ttlSeconds);\n            }\n            return newValue;\n        } catch (error) {\n            console.error(`Redis increment error for key ${key}:`, error);\n            return 0; // Return 0 on error\n        }\n    }\n    /**\n   * Add to sorted set (for top movers)\n   */ static async addToSortedSet(key, score, member, ttlSeconds) {\n        if (!redis) return; // Skip if Redis not configured\n        try {\n            await redis.zadd(key, {\n                score,\n                member\n            });\n            if (ttlSeconds) {\n                await redis.expire(key, ttlSeconds);\n            }\n        } catch (error) {\n            console.error(`Redis zadd error for key ${key}:`, error);\n        // Don't throw - degrade gracefully\n        }\n    }\n    /**\n   * Get top N members from sorted set (descending order)\n   */ static async getTopFromSortedSet(key, count = 10) {\n        if (!redis) return []; // Return empty array if Redis not configured\n        try {\n            const result = await redis.zrange(key, 0, count - 1, {\n                rev: true,\n                withScores: true\n            });\n            // Convert flat array to objects\n            const items = [];\n            for(let i = 0; i < result.length; i += 2){\n                items.push({\n                    member: result[i],\n                    score: result[i + 1]\n                });\n            }\n            return items;\n        } catch (error) {\n            console.error(`Redis zrange error for key ${key}:`, error);\n            return []; // Return empty array on error\n        }\n    }\n    /**\n   * Delete a key\n   */ static async delete(key) {\n        if (!redis) return; // Skip if Redis not configured\n        try {\n            await redis.del(key);\n        } catch (error) {\n            console.error(`Redis delete error for key ${key}:`, error);\n        // Don't throw - degrade gracefully\n        }\n    }\n    /**\n   * Check if key exists\n   */ static async exists(key) {\n        if (!redis) return false; // Return false if Redis not configured\n        try {\n            const result = await redis.exists(key);\n            return result === 1;\n        } catch (error) {\n            console.error(`Redis exists error for key ${key}:`, error);\n            return false;\n        }\n    }\n    /**\n   * Get TTL for a key\n   */ static async getTTL(key) {\n        if (!redis) return -1; // Return -1 if Redis not configured\n        try {\n            return await redis.ttl(key);\n        } catch (error) {\n            console.error(`Redis TTL error for key ${key}:`, error);\n            return -1;\n        }\n    }\n}\n/**\n * Specialized cache operations for Quantiv\n */ class QuantivCache {\n    /**\n   * Cache expected move snapshot\n   */ static async cacheExpectedMove(symbol, expiry, data, ttlSeconds = 120) {\n        const key = Keys.expectedMoveSnapshot(symbol, expiry);\n        const snapshot = {\n            ...data,\n            timestamp: new Date().toISOString(),\n            symbol: symbol.toUpperCase(),\n            expiry\n        };\n        await RedisCache.setJson(key, snapshot, ttlSeconds);\n    }\n    /**\n   * Get cached expected move\n   */ static async getExpectedMove(symbol, expiry) {\n        const key = Keys.expectedMoveSnapshot(symbol, expiry);\n        return await RedisCache.getJson(key);\n    }\n    /**\n   * Increment daily visitor count\n   */ static async incrementVisitorCount() {\n        const today = new Date().toISOString().split(\"T\")[0].replace(/-/g, \"\");\n        const key = Keys.dailyVisits(today);\n        // Set TTL to 48 hours (keep yesterday's count available)\n        return await RedisCache.increment(key, 48 * 60 * 60);\n    }\n    /**\n   * Get daily visitor count\n   */ static async getVisitorCount(date) {\n        const targetDate = date || new Date().toISOString().split(\"T\")[0].replace(/-/g, \"\");\n        const key = Keys.dailyVisits(targetDate);\n        if (!redis) return 0; // Return 0 if Redis not configured\n        try {\n            const count = await redis.get(key);\n            return count ? parseInt(count, 10) : 0;\n        } catch (error) {\n            console.error(`Error getting visitor count for ${targetDate}:`, error);\n            return 0;\n        }\n    }\n    /**\n   * Cache IV series data\n   */ static async cacheIVSeries(symbol, data, ttlSeconds = 24 * 60 * 60) {\n        const key = Keys.ivSeries(symbol);\n        await RedisCache.setJson(key, data, ttlSeconds);\n    }\n    /**\n   * Get cached IV series\n   */ static async getIVSeries(symbol) {\n        const key = Keys.ivSeries(symbol);\n        return await RedisCache.getJson(key);\n    }\n    /**\n   * Add symbol to top movers for a date\n   */ static async addTopMover(symbol, expectedMovePct, date) {\n        const targetDate = date || new Date().toISOString().split(\"T\")[0].replace(/-/g, \"\");\n        const key = Keys.topMovers(targetDate);\n        await RedisCache.addToSortedSet(key, expectedMovePct, symbol.toUpperCase(), 24 * 60 * 60 // 24 hour TTL\n        );\n    }\n    /**\n   * Get top movers for a date\n   */ static async getTopMovers(date, count = 10) {\n        const targetDate = date || new Date().toISOString().split(\"T\")[0].replace(/-/g, \"\");\n        const key = Keys.topMovers(targetDate);\n        const result = await RedisCache.getTopFromSortedSet(key, count);\n        return result.map((item)=>({\n                symbol: item.member,\n                expectedMovePct: item.score\n            }));\n    }\n}\n/**\n * Health check for Redis connection\n */ async function checkRedisHealth() {\n    if (!redis) {\n        return {\n            connected: false,\n            error: \"Redis not configured (missing REDIS_URL or REDIS_TOKEN)\"\n        };\n    }\n    try {\n        const start = Date.now();\n        await redis.ping();\n        const latency = Date.now() - start;\n        return {\n            connected: true,\n            latency\n        };\n    } catch (error) {\n        return {\n            connected: false,\n            error: error instanceof Error ? error.message : \"Unknown error\"\n        };\n    }\n}\n/**\n * Utility to format date for Redis keys\n */ function formatDateForKey(date = new Date()) {\n    return date.toISOString().split(\"T\")[0].replace(/-/g, \"\");\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (redis);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/cache/redis.ts\n");

/***/ }),

/***/ "(rsc)/./lib/pricing/blackScholes.ts":
/*!*************************************!*\
  !*** ./lib/pricing/blackScholes.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blackScholes: () => (/* binding */ blackScholes),\n/* harmony export */   findATMStrike: () => (/* binding */ findATMStrike),\n/* harmony export */   impliedVolBrent: () => (/* binding */ impliedVolBrent)\n/* harmony export */ });\n/**\n * Black-Scholes pricing model with Greeks calculation\n * Used for options pricing and implied volatility calculations\n */ /**\n * Standard normal cumulative distribution function\n */ function normCDF(x) {\n    const a1 = 0.254829592;\n    const a2 = -0.284496736;\n    const a3 = 1.421413741;\n    const a4 = -1.453152027;\n    const a5 = 1.061405429;\n    const p = 0.3275911;\n    const sign = x < 0 ? -1 : 1;\n    x = Math.abs(x) / Math.sqrt(2.0);\n    const t = 1.0 / (1.0 + p * x);\n    const y = 1.0 - ((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\n    return 0.5 * (1.0 + sign * y);\n}\n/**\n * Standard normal probability density function\n */ function normPDF(x) {\n    return Math.exp(-0.5 * x * x) / Math.sqrt(2 * Math.PI);\n}\n/**\n * Calculate d1 and d2 parameters for Black-Scholes\n */ function calculateD1D2(params) {\n    const { S, K, T, r, q, iv } = params;\n    if (T <= 0 || iv <= 0) {\n        throw new Error(\"Time to expiration and volatility must be positive\");\n    }\n    const d1 = (Math.log(S / K) + (r - q + 0.5 * iv * iv) * T) / (iv * Math.sqrt(T));\n    const d2 = d1 - iv * Math.sqrt(T);\n    return {\n        d1,\n        d2\n    };\n}\n/**\n * Calculate Black-Scholes option prices and Greeks\n */ function blackScholes(params) {\n    const { S, K, T, r, q } = params;\n    if (S <= 0 || K <= 0) {\n        throw new Error(\"Stock price and strike price must be positive\");\n    }\n    const { d1, d2 } = calculateD1D2(params);\n    const Nd1 = normCDF(d1);\n    const Nd2 = normCDF(d2);\n    const NegD1 = normCDF(-d1);\n    const NegD2 = normCDF(-d2);\n    const nd1 = normPDF(d1);\n    const discountFactor = Math.exp(-r * T);\n    const dividendFactor = Math.exp(-q * T);\n    // Option prices\n    const call = S * dividendFactor * Nd1 - K * discountFactor * Nd2;\n    const put = K * discountFactor * NegD2 - S * dividendFactor * NegD1;\n    // Greeks\n    const delta = {\n        call: dividendFactor * Nd1,\n        put: -dividendFactor * NegD1\n    };\n    const gamma = dividendFactor * nd1 / (S * params.iv * Math.sqrt(T));\n    const theta = {\n        call: (-S * dividendFactor * nd1 * params.iv / (2 * Math.sqrt(T)) - r * K * discountFactor * Nd2 + q * S * dividendFactor * Nd1) / 365,\n        put: (-S * dividendFactor * nd1 * params.iv / (2 * Math.sqrt(T)) + r * K * discountFactor * NegD2 - q * S * dividendFactor * NegD1) / 365\n    };\n    const vega = S * dividendFactor * nd1 * Math.sqrt(T) / 100;\n    const rho = {\n        call: K * T * discountFactor * Nd2 / 100,\n        put: -K * T * discountFactor * NegD2 / 100\n    };\n    return {\n        call: Math.max(0, call),\n        put: Math.max(0, put),\n        delta,\n        gamma,\n        theta,\n        vega,\n        rho\n    };\n}\n/**\n * Calculate implied volatility using Brent's method\n */ function impliedVolBrent(marketPrice, params, isCall = true, tolerance = 1e-6, maxIterations = 100) {\n    if (marketPrice <= 0) {\n        throw new Error(\"Market price must be positive\");\n    }\n    const { S, K, T } = params;\n    // Intrinsic value bounds\n    const intrinsic = isCall ? Math.max(0, S - K) : Math.max(0, K - S);\n    if (marketPrice <= intrinsic) {\n        return 0.01; // Minimum volatility\n    }\n    // Initial bounds for volatility search\n    let volLow = 0.01;\n    let volHigh = 5.0;\n    // Test bounds\n    const testLow = blackScholes({\n        ...params,\n        iv: volLow\n    });\n    const testHigh = blackScholes({\n        ...params,\n        iv: volHigh\n    });\n    const priceLow = isCall ? testLow.call : testLow.put;\n    const priceHigh = isCall ? testHigh.call : testHigh.put;\n    if (marketPrice < priceLow) return volLow;\n    if (marketPrice > priceHigh) return volHigh;\n    // Brent's method\n    let a = volLow;\n    let b = volHigh;\n    let c = volHigh;\n    let fa = priceLow - marketPrice;\n    let fb = priceHigh - marketPrice;\n    let fc = fb;\n    for(let iter = 0; iter < maxIterations; iter++){\n        if (Math.abs(fb) < tolerance) {\n            return b;\n        }\n        if (Math.sign(fa) === Math.sign(fb)) {\n            a = c;\n            fa = fc;\n        }\n        if (Math.abs(fa) < Math.abs(fb)) {\n            [a, b] = [\n                b,\n                a\n            ];\n            [fa, fb] = [\n                fb,\n                fa\n            ];\n        }\n        const tol = 2 * tolerance * Math.abs(b) + tolerance;\n        const m = (a - b) / 2;\n        if (Math.abs(m) < tol) {\n            return b;\n        }\n        let p, q, r, s;\n        if (Math.abs(c - b) < tolerance || Math.abs(fc - fb) < tolerance) {\n            // Bisection\n            p = m;\n            q = 1;\n        } else {\n            // Inverse quadratic interpolation\n            s = fb / fc;\n            if (Math.abs(a - c) < tolerance) {\n                p = 2 * m * s;\n                q = 1 - s;\n            } else {\n                q = fc / fa;\n                r = fb / fa;\n                p = s * (2 * m * q * (q - r) - (b - c) * (r - 1));\n                q = (q - 1) * (r - 1) * (s - 1);\n            }\n        }\n        if (p > 0) q = -q;\n        else p = -p;\n        if (2 * p < Math.min(3 * m * q - Math.abs(tol * q), Math.abs((c - b) * q))) {\n            c = b;\n            fc = fb;\n            b += p / q;\n        } else {\n            c = b;\n            fc = fb;\n            b += m;\n        }\n        const bsResult = blackScholes({\n            ...params,\n            iv: b\n        });\n        fb = (isCall ? bsResult.call : bsResult.put) - marketPrice;\n    }\n    return b;\n}\n/**\n * Find at-the-money strike and calculate ATM implied volatility\n */ function findATMStrike(strikes, spot) {\n    if (strikes.length === 0) {\n        throw new Error(\"No strikes provided\");\n    }\n    return strikes.reduce((closest, strike)=>Math.abs(strike - spot) < Math.abs(closest - spot) ? strike : closest);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/pricing/blackScholes.ts\n");

/***/ }),

/***/ "(rsc)/./lib/schemas.ts":
/*!************************!*\
  !*** ./lib/schemas.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DateSchema: () => (/* binding */ DateSchema),\n/* harmony export */   EarningsDataSchema: () => (/* binding */ EarningsDataSchema),\n/* harmony export */   EarningsEventSchema: () => (/* binding */ EarningsEventSchema),\n/* harmony export */   EarningsRequestSchema: () => (/* binding */ EarningsRequestSchema),\n/* harmony export */   EarningsResponseSchema: () => (/* binding */ EarningsResponseSchema),\n/* harmony export */   ErrorResponseSchema: () => (/* binding */ ErrorResponseSchema),\n/* harmony export */   ExpectedMoveRequestSchema: () => (/* binding */ ExpectedMoveRequestSchema),\n/* harmony export */   ExpectedMoveResponseSchema: () => (/* binding */ ExpectedMoveResponseSchema),\n/* harmony export */   ExpectedMoveSchema: () => (/* binding */ ExpectedMoveSchema),\n/* harmony export */   ExpirySchema: () => (/* binding */ ExpirySchema),\n/* harmony export */   HealthResponseSchema: () => (/* binding */ HealthResponseSchema),\n/* harmony export */   HitResponseSchema: () => (/* binding */ HitResponseSchema),\n/* harmony export */   IVStatsSchema: () => (/* binding */ IVStatsSchema),\n/* harmony export */   OptionSchema: () => (/* binding */ OptionSchema),\n/* harmony export */   OptionalExpirySchema: () => (/* binding */ OptionalExpirySchema),\n/* harmony export */   OptionsChainSchema: () => (/* binding */ OptionsChainSchema),\n/* harmony export */   OptionsRequestSchema: () => (/* binding */ OptionsRequestSchema),\n/* harmony export */   OptionsResponseSchema: () => (/* binding */ OptionsResponseSchema),\n/* harmony export */   RealizedMoveSchema: () => (/* binding */ RealizedMoveSchema),\n/* harmony export */   SymbolSchema: () => (/* binding */ SymbolSchema),\n/* harmony export */   TopMoversRequestSchema: () => (/* binding */ TopMoversRequestSchema),\n/* harmony export */   TopMoversResponseSchema: () => (/* binding */ TopMoversResponseSchema),\n/* harmony export */   createApiResponse: () => (/* binding */ createApiResponse),\n/* harmony export */   validateRequest: () => (/* binding */ validateRequest)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/ZodError.js\");\n/**\n * Zod schemas for API validation and type safety\n * Used across all API routes for request/response validation\n */ \n/**\n * Common validation schemas\n */ const SymbolSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, \"Symbol is required\").max(10, \"Symbol too long\").regex(/^[A-Za-z0-9.-]+$/, \"Invalid symbol format\").transform((s)=>s.toUpperCase());\nconst ExpirySchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Expiry must be in YYYY-MM-DD format\").refine((date)=>{\n    const parsed = new Date(date);\n    const now = new Date();\n    return parsed > now;\n}, \"Expiry must be in the future\");\nconst OptionalExpirySchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Expiry must be in YYYY-MM-DD format\").refine((date)=>{\n    const parsed = new Date(date);\n    const now = new Date();\n    return parsed > now;\n}, \"Expiry must be in the future\").optional();\nconst DateSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Date must be in YYYY-MM-DD format\");\n/**\n * Options chain schemas\n */ const OptionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    strike: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Strike must be positive\"),\n    mid: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(\"Mid price cannot be negative\"),\n    bid: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(\"Bid price cannot be negative\"),\n    ask: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(\"Ask price cannot be negative\"),\n    iv: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"IV must be positive\").optional(),\n    delta: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    gamma: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    theta: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    vega: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    rho: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    volume: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative().optional(),\n    openInterest: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative().optional(),\n    lastPrice: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative().optional(),\n    change: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    changePct: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional()\n});\nconst OptionsChainSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    symbol: SymbolSchema,\n    spot: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Spot price must be positive\"),\n    expiryDate: ExpirySchema,\n    daysToExpiry: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Days to expiry must be positive\"),\n    strikes: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.number().positive()).min(1, \"At least one strike required\"),\n    calls: zod__WEBPACK_IMPORTED_MODULE_0__.array(OptionSchema).min(1, \"At least one call required\"),\n    puts: zod__WEBPACK_IMPORTED_MODULE_0__.array(OptionSchema).min(1, \"At least one put required\"),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime().optional(),\n    source: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\n/**\n * Expected move schemas\n */ const ExpectedMoveSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    straddle: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        abs: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(\"Straddle move cannot be negative\"),\n        pct: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(\"Straddle percentage cannot be negative\")\n    }),\n    iv: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        abs: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(\"IV move cannot be negative\"),\n        pct: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(\"IV percentage cannot be negative\")\n    }),\n    bands: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        oneSigma: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            upper: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n            lower: zod__WEBPACK_IMPORTED_MODULE_0__.number()\n        }),\n        twoSigma: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            upper: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n            lower: zod__WEBPACK_IMPORTED_MODULE_0__.number()\n        })\n    }),\n    confidence: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        straddle: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n            \"high\",\n            \"medium\",\n            \"low\"\n        ]),\n        iv: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n            \"high\",\n            \"medium\",\n            \"low\"\n        ])\n    })\n});\n/**\n * IV statistics schemas\n */ const IVStatsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    rank: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0).max(1, \"IV rank must be between 0 and 1\"),\n    percentile: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0).max(100, \"Percentile must be between 0 and 100\"),\n    current: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Current IV must be positive\"),\n    min: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Min IV must be positive\"),\n    max: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Max IV must be positive\"),\n    mean: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Mean IV must be positive\"),\n    median: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Median IV must be positive\"),\n    stdDev: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(\"Standard deviation cannot be negative\"),\n    daysInSample: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Days in sample must be positive\")\n});\n/**\n * Earnings schemas\n */ const EarningsEventSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    date: DateSchema,\n    confidence: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        \"confirmed\",\n        \"estimated\"\n    ]),\n    timing: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        \"bmo\",\n        \"amc\",\n        \"unknown\"\n    ]).optional(),\n    estimate: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        eps: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n        revenue: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional()\n    }).optional()\n});\nconst RealizedMoveSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    date: DateSchema,\n    realizedMovePct: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    priceChange: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    priceBefore: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(),\n    priceAfter: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(),\n    volume: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative().optional()\n});\nconst EarningsDataSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    symbol: SymbolSchema,\n    next: EarningsEventSchema.optional(),\n    last: zod__WEBPACK_IMPORTED_MODULE_0__.array(RealizedMoveSchema).max(8, \"Maximum 8 historical earnings\"),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime().optional()\n});\n/**\n * API request schemas\n */ const OptionsRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    symbol: SymbolSchema,\n    expiry: OptionalExpirySchema\n});\nconst ExpectedMoveRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    symbol: SymbolSchema,\n    expiry: OptionalExpirySchema\n});\nconst EarningsRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    symbol: SymbolSchema\n});\nconst TopMoversRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    date: DateSchema.optional(),\n    limit: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1).max(50).default(10)\n});\n/**\n * API response schemas\n */ const OptionsResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    success: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n    data: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        spot: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(),\n        expiryUsed: ExpirySchema,\n        atm: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            strike: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(),\n            callMid: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(),\n            putMid: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(),\n            iv: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(),\n            T: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive()\n        }),\n        rows: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            strike: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(),\n            call: OptionSchema,\n            put: OptionSchema\n        }))\n    }).optional(),\n    error: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime()\n});\nconst ExpectedMoveResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    success: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n    data: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        em: ExpectedMoveSchema,\n        ivRank: IVStatsSchema\n    }).optional(),\n    error: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime()\n});\nconst EarningsResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    success: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n    data: EarningsDataSchema.optional(),\n    error: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime()\n});\nconst HitResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    success: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n    data: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        count: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative()\n    }).optional(),\n    error: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime()\n});\nconst TopMoversResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    success: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n    data: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        symbol: SymbolSchema,\n        expectedMovePct: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(),\n        spot: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive().optional(),\n        volume: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative().optional()\n    })).optional(),\n    error: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime()\n});\n/**\n * Error response schema\n */ const ErrorResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    success: zod__WEBPACK_IMPORTED_MODULE_0__.literal(false),\n    error: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    detail: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    hint: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime()\n});\n/**\n * Health check schema\n */ const HealthResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    status: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        \"healthy\",\n        \"degraded\",\n        \"unhealthy\"\n    ]),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime(),\n    services: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        redis: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            connected: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n            latency: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n            error: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n        }),\n        cache: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            l1Stats: zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n                size: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n                hitRate: zod__WEBPACK_IMPORTED_MODULE_0__.number()\n            }))\n        })\n    }),\n    version: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\n/**\n * Utility functions for schema validation\n */ function validateRequest(schema, data) {\n    try {\n        const result = schema.parse(data);\n        return {\n            success: true,\n            data: result\n        };\n    } catch (error) {\n        if (error instanceof zod__WEBPACK_IMPORTED_MODULE_1__.ZodError) {\n            return {\n                success: false,\n                error: \"Validation failed\",\n                details: error.errors.map((e)=>`${e.path.join(\".\")}: ${e.message}`)\n            };\n        }\n        return {\n            success: false,\n            error: \"Unknown validation error\",\n            details: [\n                error instanceof Error ? error.message : \"Unknown error\"\n            ]\n        };\n    }\n}\n/**\n * Create standardized API response\n */ function createApiResponse(data, error, detail, hint) {\n    return {\n        success: !error,\n        ...data && {\n            data\n        },\n        ...error && {\n            error\n        },\n        ...detail && {\n            detail\n        },\n        ...hint && {\n            hint\n        },\n        timestamp: new Date().toISOString()\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/schemas.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/expectedMove.ts":
/*!**************************************!*\
  !*** ./lib/services/expectedMove.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assessConfidence: () => (/* binding */ assessConfidence),\n/* harmony export */   calculateIVMove: () => (/* binding */ calculateIVMove),\n/* harmony export */   calculatePriceBands: () => (/* binding */ calculatePriceBands),\n/* harmony export */   calculateStraddleMove: () => (/* binding */ calculateStraddleMove),\n/* harmony export */   computeExpectedMove: () => (/* binding */ computeExpectedMove),\n/* harmony export */   findATMData: () => (/* binding */ findATMData),\n/* harmony export */   formatExpectedMove: () => (/* binding */ formatExpectedMove)\n/* harmony export */ });\n/* harmony import */ var _pricing_blackScholes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pricing/blackScholes */ \"(rsc)/./lib/pricing/blackScholes.ts\");\n/**\n * Expected Move Service\n * Calculates expected moves using both straddle and IV methods\n * Provides price bands for 1σ and 2σ moves\n */ \n/**\n * Find ATM options data from chain\n */ function findATMData(chain) {\n    const atmStrike = (0,_pricing_blackScholes__WEBPACK_IMPORTED_MODULE_0__.findATMStrike)(chain.strikes, chain.spot);\n    // Find corresponding call and put\n    const atmCall = chain.calls.find((c)=>c.strike === atmStrike);\n    const atmPut = chain.puts.find((p)=>p.strike === atmStrike);\n    if (!atmCall || !atmPut) {\n        throw new Error(`ATM options not found for strike ${atmStrike}`);\n    }\n    // Calculate implied volatility - prefer average if both available\n    let iv;\n    const callIV = atmCall.iv;\n    const putIV = atmPut.iv;\n    if (callIV && putIV) {\n        iv = (callIV + putIV) / 2;\n    } else if (callIV) {\n        iv = callIV;\n    } else if (putIV) {\n        iv = putIV;\n    } else {\n        // Fallback: estimate IV from option prices\n        iv = estimateIVFromPrices(chain.spot, atmStrike, atmCall.mid, chain.daysToExpiry);\n    }\n    return {\n        strike: atmStrike,\n        callMid: atmCall.mid,\n        putMid: atmPut.mid,\n        iv: iv,\n        T: chain.daysToExpiry / 365\n    };\n}\n/**\n * Estimate IV from option prices when not available\n */ function estimateIVFromPrices(spot, strike, optionPrice, daysToExpiry) {\n    const T = daysToExpiry / 365;\n    const moneyness = spot / strike;\n    // Simple heuristic based on time value and moneyness\n    // This is a rough approximation - real IV should come from data provider\n    let baseIV = 0.20; // 20% base volatility\n    // Adjust for time to expiry\n    if (T < 0.1) baseIV *= 1.5; // Short-term options tend to have higher IV\n    if (T > 0.5) baseIV *= 0.8; // Longer-term options tend to have lower IV\n    // Adjust for moneyness\n    const timeValue = optionPrice - Math.max(0, spot - strike);\n    if (timeValue > 0) {\n        baseIV *= Math.min(2.0, timeValue / (spot * 0.02)); // Scale by time value\n    }\n    return Math.max(0.05, Math.min(2.0, baseIV)); // Clamp between 5% and 200%\n}\n/**\n * Calculate expected move using straddle method\n */ function calculateStraddleMove(atm, spot) {\n    const straddlePrice = atm.callMid + atm.putMid;\n    return {\n        abs: straddlePrice,\n        pct: straddlePrice / spot * 100\n    };\n}\n/**\n * Calculate expected move using IV method\n */ function calculateIVMove(atm, spot) {\n    const ivMove = spot * atm.iv * Math.sqrt(atm.T);\n    return {\n        abs: ivMove,\n        pct: ivMove / spot * 100\n    };\n}\n/**\n * Calculate price bands for 1σ and 2σ moves\n */ function calculatePriceBands(spot, ivMove) {\n    return {\n        oneSigma: {\n            upper: spot + ivMove,\n            lower: spot - ivMove\n        },\n        twoSigma: {\n            upper: spot + 2 * ivMove,\n            lower: spot - 2 * ivMove\n        }\n    };\n}\n/**\n * Assess confidence in expected move calculations\n */ function assessConfidence(chain, atm) {\n    // Factors that affect confidence:\n    // 1. Volume and open interest\n    // 2. Bid-ask spreads\n    // 3. Time to expiry\n    // 4. IV availability and consistency\n    const atmCall = chain.calls.find((c)=>c.strike === atm.strike);\n    const atmPut = chain.puts.find((p)=>p.strike === atm.strike);\n    let straddleConfidence = \"medium\";\n    let ivConfidence = \"medium\";\n    if (atmCall && atmPut) {\n        // Check bid-ask spreads\n        const callSpread = (atmCall.ask - atmCall.bid) / atmCall.mid;\n        const putSpread = (atmPut.ask - atmPut.bid) / atmPut.mid;\n        const avgSpread = (callSpread + putSpread) / 2;\n        if (avgSpread < 0.10) {\n            straddleConfidence = \"high\";\n        } else if (avgSpread > 0.25) {\n            straddleConfidence = \"low\";\n        }\n        // Check volume (if available) - adjust confidence but don't override good spreads\n        const totalVolume = (atmCall.volume || 0) + (atmPut.volume || 0);\n        if (totalVolume > 100) {\n            // High volume reinforces confidence\n            if (straddleConfidence === \"medium\") straddleConfidence = \"high\";\n        } else if (totalVolume < 10) {\n            // Low volume reduces confidence\n            if (straddleConfidence === \"high\") straddleConfidence = \"medium\";\n            if (straddleConfidence === \"medium\") straddleConfidence = \"low\";\n        }\n    }\n    // IV confidence based on availability and time to expiry\n    if (atmCall?.iv && atmPut?.iv) {\n        const ivDiff = Math.abs(atmCall.iv - atmPut.iv);\n        if (ivDiff < 0.02) {\n            ivConfidence = \"high\";\n        } else if (ivDiff > 0.05) {\n            ivConfidence = \"low\";\n        }\n    } else if (!atmCall?.iv && !atmPut?.iv) {\n        ivConfidence = \"low\"; // No IV data available\n    }\n    // Adjust for time to expiry\n    if (atm.T < 0.02) {\n        straddleConfidence = straddleConfidence === \"high\" ? \"medium\" : \"low\";\n        ivConfidence = ivConfidence === \"high\" ? \"medium\" : \"low\";\n    }\n    return {\n        straddle: straddleConfidence,\n        iv: ivConfidence\n    };\n}\n/**\n * Main function to compute expected move\n */ function computeExpectedMove(chain) {\n    const atm = findATMData(chain);\n    const straddleMove = calculateStraddleMove(atm, chain.spot);\n    const ivMove = calculateIVMove(atm, chain.spot);\n    const bands = calculatePriceBands(chain.spot, ivMove.abs);\n    const confidence = assessConfidence(chain, atm);\n    return {\n        straddle: straddleMove,\n        iv: ivMove,\n        bands,\n        confidence,\n        atm\n    };\n}\n/**\n * Utility function to format expected move for display\n */ function formatExpectedMove(result, spot) {\n    return {\n        straddle: {\n            display: `±$${result.straddle.abs.toFixed(2)} (${result.straddle.pct.toFixed(1)}%)`,\n            confidence: result.confidence.straddle\n        },\n        iv: {\n            display: `±$${result.iv.abs.toFixed(2)} (${result.iv.pct.toFixed(1)}%)`,\n            confidence: result.confidence.iv\n        },\n        bands: {\n            oneSigma: `$${result.bands.oneSigma.lower.toFixed(2)} - $${result.bands.oneSigma.upper.toFixed(2)}`,\n            twoSigma: `$${result.bands.twoSigma.lower.toFixed(2)} - $${result.bands.twoSigma.upper.toFixed(2)}`\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/expectedMove.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/ivStats.ts":
/*!*********************************!*\
  !*** ./lib/services/ivStats.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateIVBands: () => (/* binding */ calculateIVBands),\n/* harmony export */   calculateIVStats: () => (/* binding */ calculateIVStats),\n/* harmony export */   createMockIVHistory: () => (/* binding */ createMockIVHistory),\n/* harmony export */   detectIVTrend: () => (/* binding */ detectIVTrend),\n/* harmony export */   formatIVStats: () => (/* binding */ formatIVStats),\n/* harmony export */   generateIVSparkline: () => (/* binding */ generateIVSparkline),\n/* harmony export */   getIVContext: () => (/* binding */ getIVContext)\n/* harmony export */ });\n/**\n * IV Statistics Service\n * Calculates IV rank and percentile from historical IV data\n * Provides context for current implied volatility levels\n */ /**\n * Calculate IV rank and percentile from historical data\n */ function calculateIVStats(history, currentIV) {\n    if (history.length === 0) {\n        throw new Error(\"No historical IV data provided\");\n    }\n    const ivValues = history.map((d)=>d.iv).filter((iv)=>iv > 0 && iv < 10); // Filter outliers\n    if (ivValues.length === 0) {\n        throw new Error(\"No valid IV data points found\");\n    }\n    const sortedIVs = [\n        ...ivValues\n    ].sort((a, b)=>a - b);\n    const min = sortedIVs[0];\n    const max = sortedIVs[sortedIVs.length - 1];\n    // Calculate rank (0-1 scale)\n    const rank = max === min ? 0.5 : (currentIV - min) / (max - min);\n    // Calculate percentile (0-100 scale)\n    const belowOrEqual = ivValues.filter((iv)=>iv <= currentIV).length;\n    const percentile = belowOrEqual / ivValues.length * 100;\n    // Calculate statistics\n    const mean = ivValues.reduce((sum, iv)=>sum + iv, 0) / ivValues.length;\n    // Calculate median properly for even/odd number of elements\n    const median = sortedIVs.length % 2 === 1 ? sortedIVs[Math.floor(sortedIVs.length / 2)] : (sortedIVs[sortedIVs.length / 2 - 1] + sortedIVs[sortedIVs.length / 2]) / 2;\n    const variance = ivValues.reduce((sum, iv)=>sum + Math.pow(iv - mean, 2), 0) / ivValues.length;\n    const stdDev = Math.sqrt(variance);\n    return {\n        rank: Math.max(0, Math.min(1, rank)),\n        percentile: Math.max(0, Math.min(100, percentile)),\n        current: currentIV,\n        min,\n        max,\n        mean,\n        median,\n        stdDev,\n        daysInSample: ivValues.length\n    };\n}\n/**\n * Get IV context and interpretation\n */ function getIVContext(stats) {\n    const { rank, percentile } = stats;\n    if (percentile >= 90) {\n        return {\n            level: \"extremely-high\",\n            description: `IV is in the top 10% of the ${stats.daysInSample}-day range. Options are very expensive.`,\n            color: \"red\",\n            recommendation: \"strong-sell\"\n        };\n    } else if (percentile >= 75) {\n        return {\n            level: \"high\",\n            description: `IV is in the top 25% of the ${stats.daysInSample}-day range. Options are expensive.`,\n            color: \"orange\",\n            recommendation: \"sell\"\n        };\n    } else if (percentile >= 60) {\n        return {\n            level: \"above-average\",\n            description: `IV is above average for the ${stats.daysInSample}-day period. Options are moderately expensive.`,\n            color: \"yellow\",\n            recommendation: \"neutral\"\n        };\n    } else if (percentile >= 40) {\n        return {\n            level: \"average\",\n            description: `IV is near the average for the ${stats.daysInSample}-day period. Options are fairly priced.`,\n            color: \"green\",\n            recommendation: \"neutral\"\n        };\n    } else if (percentile >= 25) {\n        return {\n            level: \"below-average\",\n            description: `IV is below average for the ${stats.daysInSample}-day period. Options are moderately cheap.`,\n            color: \"blue\",\n            recommendation: \"neutral\"\n        };\n    } else if (percentile >= 10) {\n        return {\n            level: \"low\",\n            description: `IV is in the bottom 25% of the ${stats.daysInSample}-day range. Options are cheap.`,\n            color: \"blue\",\n            recommendation: \"buy\"\n        };\n    } else {\n        return {\n            level: \"extremely-low\",\n            description: `IV is in the bottom 10% of the ${stats.daysInSample}-day range. Options are very cheap.`,\n            color: \"purple\",\n            recommendation: \"strong-buy\"\n        };\n    }\n}\n/**\n * Generate IV sparkline data for visualization\n */ function generateIVSparkline(history, currentIV, points = 50) {\n    if (history.length === 0) {\n        // Return just today's point when no history\n        return [\n            {\n                date: new Date().toISOString().split(\"T\")[0],\n                iv: currentIV,\n                isToday: true\n            }\n        ];\n    }\n    // Sort by date and take the most recent points\n    const sortedHistory = [\n        ...history\n    ].sort((a, b)=>new Date(a.date).getTime() - new Date(b.date).getTime()).slice(-points);\n    const sparklineData = sortedHistory.map((point)=>({\n            date: point.date,\n            iv: point.iv,\n            isToday: false\n        }));\n    // Add current IV as today's point if not already included\n    const today = new Date().toISOString().split(\"T\")[0];\n    const hasToday = sparklineData.some((point)=>point.date === today);\n    if (!hasToday) {\n        sparklineData.push({\n            date: today,\n            iv: currentIV,\n            isToday: true\n        });\n    } else {\n        // Mark the last point as today\n        sparklineData[sparklineData.length - 1].isToday = true;\n    }\n    return sparklineData;\n}\n/**\n * Calculate IV percentile bands for visualization\n */ function calculateIVBands(history) {\n    if (history.length === 0) {\n        throw new Error(\"No historical data provided\");\n    }\n    const ivValues = history.map((d)=>d.iv).filter((iv)=>iv > 0 && iv < 10).sort((a, b)=>a - b);\n    if (ivValues.length === 0) {\n        throw new Error(\"No valid IV data points found\");\n    }\n    const getPercentile = (arr, p)=>{\n        if (arr.length === 1) return arr[0];\n        const index = p / 100 * (arr.length - 1);\n        const lower = Math.floor(index);\n        const upper = Math.ceil(index);\n        if (lower === upper) {\n            return arr[lower];\n        }\n        // Linear interpolation between the two nearest values\n        const weight = index - lower;\n        return arr[lower] * (1 - weight) + arr[upper] * weight;\n    };\n    return {\n        p10: getPercentile(ivValues, 10),\n        p25: getPercentile(ivValues, 25),\n        p50: getPercentile(ivValues, 50),\n        p75: getPercentile(ivValues, 75),\n        p90: getPercentile(ivValues, 90)\n    };\n}\n/**\n * Detect IV expansion/contraction trends\n */ function detectIVTrend(history, lookbackDays = 10) {\n    if (history.length < lookbackDays) {\n        return {\n            trend: \"stable\",\n            strength: \"weak\",\n            change: 0\n        };\n    }\n    const recent = history.slice(-lookbackDays);\n    const firstIV = recent[0].iv;\n    const lastIV = recent[recent.length - 1].iv;\n    const change = (lastIV - firstIV) / firstIV * 100;\n    const absChange = Math.abs(change);\n    let trend;\n    if (change > 2) {\n        trend = \"expanding\";\n    } else if (change < -2) {\n        trend = \"contracting\";\n    } else {\n        trend = \"stable\";\n    }\n    let strength;\n    if (absChange < 5) {\n        strength = \"weak\";\n    } else if (absChange < 15) {\n        strength = \"moderate\";\n    } else {\n        strength = \"strong\";\n    }\n    return {\n        trend,\n        strength,\n        change\n    };\n}\n/**\n * Format IV stats for display\n */ function formatIVStats(stats) {\n    const context = getIVContext(stats);\n    return {\n        rank: `${(stats.rank * 100).toFixed(0)}%`,\n        percentile: `${stats.percentile.toFixed(0)}th percentile`,\n        current: `${(stats.current * 100).toFixed(1)}%`,\n        range: `${(stats.min * 100).toFixed(1)}% - ${(stats.max * 100).toFixed(1)}%`,\n        context\n    };\n}\n/**\n * Utility function to create mock IV history for testing\n */ function createMockIVHistory(days, baseIV = 0.25, volatility = 0.05) {\n    const history = [];\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n    for(let i = 0; i < days; i++){\n        const date = new Date(startDate);\n        date.setDate(date.getDate() + i);\n        // Generate IV with some randomness and mean reversion\n        const randomFactor = (Math.random() - 0.5) * volatility;\n        const meanReversion = (baseIV - (history[i - 1]?.iv || baseIV)) * 0.1;\n        const iv = Math.max(0.05, Math.min(2.0, (history[i - 1]?.iv || baseIV) + randomFactor + meanReversion));\n        history.push({\n            date: date.toISOString().split(\"T\")[0],\n            iv: iv,\n            close: 100 + Math.random() * 20 - 10 // Mock stock price\n        });\n    }\n    return history;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/ivStats.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/liveDataService.ts":
/*!*****************************************!*\
  !*** ./lib/services/liveDataService.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchLiveEarnings: () => (/* binding */ fetchLiveEarnings),\n/* harmony export */   fetchLiveExpectedMove: () => (/* binding */ fetchLiveExpectedMove),\n/* harmony export */   fetchLiveOptionsChain: () => (/* binding */ fetchLiveOptionsChain),\n/* harmony export */   isLiveDataAvailable: () => (/* binding */ isLiveDataAvailable),\n/* harmony export */   liveDataService: () => (/* binding */ liveDataService)\n/* harmony export */ });\n/* harmony import */ var yahoo_finance2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! yahoo-finance2 */ \"(rsc)/./node_modules/yahoo-finance2/dist/esm/src/index-node.js\");\n/**\n * Live Financial Data Service\n * Integrates with multiple financial data providers for real-time market data\n */ \nclass LiveDataService {\n    constructor(){\n        // Initialize API clients with environment variables\n        this.finnhubApiKey = process.env.FINNHUB_API_KEY || \"\";\n        this.alphaVantageApiKey = process.env.ALPHA_VANTAGE_API_KEY || \"\";\n    }\n    static getInstance() {\n        if (!LiveDataService.instance) {\n            LiveDataService.instance = new LiveDataService();\n        }\n        return LiveDataService.instance;\n    }\n    // Check if live data services are available\n    isLiveDataAvailable() {\n        return !!(this.finnhubApiKey || this.alphaVantageApiKey);\n    }\n    // Fetch live options chain data\n    async fetchLiveOptionsChain(symbol, expiration) {\n        try {\n            // Use Yahoo Finance for options data\n            return await this.fetchYahooOptionsChain(symbol, expiration);\n        } catch (error) {\n            console.error(`Failed to fetch live options chain for ${symbol}:`, error);\n            return null;\n        }\n    }\n    // Fetch live earnings data\n    async fetchLiveEarnings(symbol) {\n        try {\n            // Use Yahoo Finance for earnings data\n            const yahooData = await this.fetchYahooEarnings(symbol);\n            return this.processYahooEarnings(symbol, yahooData);\n        } catch (error) {\n            console.error(`Failed to fetch live earnings for ${symbol}:`, error);\n            return null;\n        }\n    }\n    // Fetch live expected move data\n    async fetchLiveExpectedMove(symbol) {\n        try {\n            // Get current stock price and IV data\n            const [quote, optionsData] = await Promise.all([\n                yahoo_finance2__WEBPACK_IMPORTED_MODULE_0__[\"default\"].quote(symbol),\n                this.fetchLiveOptionsChain(symbol)\n            ]);\n            if (!quote || !optionsData) return null;\n            return this.calculateExpectedMove(symbol, quote, optionsData);\n        } catch (error) {\n            console.error(`Failed to fetch live expected move for ${symbol}:`, error);\n            return null;\n        }\n    }\n    // Yahoo Finance options chain implementation (simplified)\n    async fetchYahooOptionsChain(symbol, expiration) {\n        try {\n            // For now, return null to use enhanced mock data\n            // Yahoo Finance options API has complex structure that requires more setup\n            console.log(`[live-data] Yahoo options chain not implemented yet for ${symbol}, using enhanced mock data`);\n            return null;\n        } catch (error) {\n            console.error(\"Yahoo options chain error:\", error);\n            return null;\n        }\n    }\n    // Yahoo Finance earnings implementation (simplified)\n    async fetchYahooEarnings(symbol) {\n        try {\n            // For now, return null to use enhanced mock data\n            // Yahoo Finance earnings API requires more complex setup\n            console.log(`[live-data] Yahoo earnings not implemented yet for ${symbol}, using enhanced mock data`);\n            return null;\n        } catch (error) {\n            console.error(\"Yahoo earnings error:\", error);\n            return null;\n        }\n    }\n    // Process Yahoo Finance earnings data\n    processYahooEarnings(symbol, yahooData) {\n        try {\n            if (!yahooData) return null;\n            // Extract earnings data from Yahoo Finance response\n            const calendarEvents = yahooData.calendarEvents;\n            const earningsHistory = yahooData.earningsHistory;\n            // Next earnings date\n            let nextEarningsDate;\n            let nextEarningsTime = \"UNKNOWN\";\n            if (calendarEvents?.earnings?.[0]) {\n                nextEarningsDate = calendarEvents.earnings[0].date;\n                // Yahoo doesn't provide timing, so we'll estimate\n                nextEarningsTime = Math.random() > 0.5 ? \"BMO\" : \"AMC\";\n            }\n            // Historical earnings\n            const historicalEarnings = [];\n            if (earningsHistory?.history) {\n                for (const earning of earningsHistory.history.slice(0, 8)){\n                    historicalEarnings.push({\n                        date: earning.quarter?.fmt || \"\",\n                        actualEPS: earning.epsActual?.raw,\n                        estimatedEPS: earning.epsEstimate?.raw,\n                        surprise: earning.epsDifference?.raw,\n                        priceMoveBefore: 0,\n                        priceMoveAfter: 0,\n                        priceMovePercent: Math.random() * 10 - 5 // Mock price move\n                    });\n                }\n            }\n            // Calculate stats\n            const avgMove = Math.random() * 8 + 2; // 2-10%\n            const beatCount = historicalEarnings.filter((e)=>(e.surprise || 0) > 0).length;\n            const beatRate = historicalEarnings.length > 0 ? beatCount / historicalEarnings.length : 0.6;\n            return {\n                symbol,\n                nextEarningsDate,\n                nextEarningsTime,\n                historicalEarnings,\n                stats: {\n                    avgMove,\n                    avgAbsMove: avgMove,\n                    beatRate,\n                    avgBeat: historicalEarnings.length > 0 ? historicalEarnings.reduce((sum, e)=>sum + (e.surprise || 0), 0) / historicalEarnings.length : 0\n                }\n            };\n        } catch (error) {\n            console.error(\"Error processing Yahoo earnings data:\", error);\n            return null;\n        }\n    }\n    // Calculate expected move from options data\n    calculateExpectedMove(symbol, quote, optionsData) {\n        try {\n            const underlyingPrice = quote.regularMarketPrice || optionsData.underlyingPrice;\n            // Find ATM options for straddle calculation\n            const atmStrike = optionsData.strikes.reduce((closest, strike)=>Math.abs(strike.strike - underlyingPrice) < Math.abs(closest.strike - underlyingPrice) ? strike : closest);\n            // Calculate straddle price and move\n            const straddlePrice = atmStrike.call.last + atmStrike.put.last || (atmStrike.call.bid + atmStrike.call.ask) / 2 + (atmStrike.put.bid + atmStrike.put.ask) / 2;\n            const straddleMove = straddlePrice;\n            const straddleMovePercent = straddleMove / underlyingPrice * 100;\n            // Calculate average IV\n            const allIVs = optionsData.strikes.flatMap((s)=>[\n                    s.call.impliedVolatility,\n                    s.put.impliedVolatility\n                ]).filter((iv)=>iv > 0);\n            const avgIV = allIVs.length > 0 ? allIVs.reduce((sum, iv)=>sum + iv, 0) / allIVs.length : 0.3;\n            // Mock IV rank/percentile (would need historical IV data)\n            const ivRank = Math.random() * 100;\n            const ivPercentile = Math.random() * 100;\n            return {\n                symbol,\n                underlyingPrice,\n                impliedVolatility: avgIV,\n                timeToExpiry: 30,\n                straddle: {\n                    price: straddlePrice,\n                    move: straddleMove,\n                    movePercent: straddleMovePercent\n                },\n                iv: {\n                    rank: ivRank,\n                    percentile: ivPercentile,\n                    current: avgIV * 100,\n                    high52Week: avgIV * 150,\n                    low52Week: avgIV * 50\n                },\n                summary: {\n                    daily: straddleMovePercent / 30,\n                    weekly: straddleMovePercent / 4,\n                    monthly: straddleMovePercent // Monthly move\n                }\n            };\n        } catch (error) {\n            console.error(\"Error calculating expected move:\", error);\n            return null;\n        }\n    }\n}\n// Export singleton instance\nconst liveDataService = LiveDataService.getInstance();\n// Utility functions for easy access\nasync function fetchLiveOptionsChain(symbol, expiration) {\n    return await liveDataService.fetchLiveOptionsChain(symbol, expiration);\n}\nasync function fetchLiveEarnings(symbol) {\n    return await liveDataService.fetchLiveEarnings(symbol);\n}\nasync function fetchLiveExpectedMove(symbol) {\n    return await liveDataService.fetchLiveExpectedMove(symbol);\n}\nfunction isLiveDataAvailable() {\n    return liveDataService.isLiveDataAvailable();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LHFCQUFxQixDQUFDQyxRQUFRQztBQUM3RDtBQUVPLGVBQWVJLGtCQUFrQkwsTUFBYztJQUNwRCxPQUFPLE1BQU15RixnQkFBZ0JwRixpQkFBaUIsQ0FBQ0w7QUFDakQ7QUFFTyxlQUFlUyxzQkFBc0JULE1BQWM7SUFDeEQsT0FBTyxNQUFNeUYsZ0JBQWdCaEYscUJBQXFCLENBQUNUO0FBQ3JEO0FBRU8sU0FBU0Y7SUFDZCxPQUFPMkYsZ0JBQWdCM0YsbUJBQW1CO0FBQzVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVhbnRpdi8uL2xpYi9zZXJ2aWNlcy9saXZlRGF0YVNlcnZpY2UudHM/NTBlNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExpdmUgRmluYW5jaWFsIERhdGEgU2VydmljZVxuICogSW50ZWdyYXRlcyB3aXRoIG11bHRpcGxlIGZpbmFuY2lhbCBkYXRhIHByb3ZpZGVycyBmb3IgcmVhbC10aW1lIG1hcmtldCBkYXRhXG4gKi9cblxuaW1wb3J0IHlhaG9vRmluYW5jZSBmcm9tICd5YWhvby1maW5hbmNlMic7XG4vLyBOb3RlOiBBZHZhbmNlZCBBUElzIGxpa2UgUG9seWdvbi5pbyByZXF1aXJlIEFQSSBrZXlzIGFuZCBjb21wbGV4IHNldHVwXG4vLyBGb3Igbm93LCB3ZSdsbCBmb2N1cyBvbiBZYWhvbyBGaW5hbmNlIHdoaWNoIHdvcmtzIHJlbGlhYmx5XG5cbi8vIFR5cGVzIGZvciBsaXZlIGRhdGFcbmV4cG9ydCBpbnRlcmZhY2UgTGl2ZU9wdGlvbnNDaGFpbiB7XG4gIHN5bWJvbDogc3RyaW5nO1xuICBleHBpcmF0aW9uRGF0ZTogc3RyaW5nO1xuICB1bmRlcmx5aW5nUHJpY2U6IG51bWJlcjtcbiAgc3RyaWtlczogQXJyYXk8e1xuICAgIHN0cmlrZTogbnVtYmVyO1xuICAgIGNhbGw6IHtcbiAgICAgIGJpZDogbnVtYmVyO1xuICAgICAgYXNrOiBudW1iZXI7XG4gICAgICBsYXN0OiBudW1iZXI7XG4gICAgICB2b2x1bWU6IG51bWJlcjtcbiAgICAgIG9wZW5JbnRlcmVzdDogbnVtYmVyO1xuICAgICAgaW1wbGllZFZvbGF0aWxpdHk6IG51bWJlcjtcbiAgICAgIGRlbHRhPzogbnVtYmVyO1xuICAgICAgZ2FtbWE/OiBudW1iZXI7XG4gICAgICB0aGV0YT86IG51bWJlcjtcbiAgICAgIHZlZ2E/OiBudW1iZXI7XG4gICAgfTtcbiAgICBwdXQ6IHtcbiAgICAgIGJpZDogbnVtYmVyO1xuICAgICAgYXNrOiBudW1iZXI7XG4gICAgICBsYXN0OiBudW1iZXI7XG4gICAgICB2b2x1bWU6IG51bWJlcjtcbiAgICAgIG9wZW5JbnRlcmVzdDogbnVtYmVyO1xuICAgICAgaW1wbGllZFZvbGF0aWxpdHk6IG51bWJlcjtcbiAgICAgIGRlbHRhPzogbnVtYmVyO1xuICAgICAgZ2FtbWE/OiBudW1iZXI7XG4gICAgICB0aGV0YT86IG51bWJlcjtcbiAgICAgIHZlZ2E/OiBudW1iZXI7XG4gICAgfTtcbiAgfT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGl2ZUVhcm5pbmdzRGF0YSB7XG4gIHN5bWJvbDogc3RyaW5nO1xuICBuZXh0RWFybmluZ3NEYXRlPzogc3RyaW5nO1xuICBuZXh0RWFybmluZ3NUaW1lPzogJ0JNTycgfCAnQU1DJyB8ICdVTktOT1dOJztcbiAgZXN0aW1hdGVkRVBTPzogbnVtYmVyO1xuICBhY3R1YWxFUFM/OiBudW1iZXI7XG4gIGhpc3RvcmljYWxFYXJuaW5nczogQXJyYXk8e1xuICAgIGRhdGU6IHN0cmluZztcbiAgICBhY3R1YWxFUFM/OiBudW1iZXI7XG4gICAgZXN0aW1hdGVkRVBTPzogbnVtYmVyO1xuICAgIHN1cnByaXNlPzogbnVtYmVyO1xuICAgIHByaWNlTW92ZUJlZm9yZTogbnVtYmVyO1xuICAgIHByaWNlTW92ZUFmdGVyOiBudW1iZXI7XG4gICAgcHJpY2VNb3ZlUGVyY2VudDogbnVtYmVyO1xuICB9PjtcbiAgc3RhdHM6IHtcbiAgICBhdmdNb3ZlOiBudW1iZXI7XG4gICAgYXZnQWJzTW92ZTogbnVtYmVyO1xuICAgIGJlYXRSYXRlOiBudW1iZXI7XG4gICAgYXZnQmVhdDogbnVtYmVyO1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExpdmVFeHBlY3RlZE1vdmVEYXRhIHtcbiAgc3ltYm9sOiBzdHJpbmc7XG4gIHVuZGVybHlpbmdQcmljZTogbnVtYmVyO1xuICBpbXBsaWVkVm9sYXRpbGl0eTogbnVtYmVyO1xuICB0aW1lVG9FeHBpcnk6IG51bWJlcjtcbiAgc3RyYWRkbGU6IHtcbiAgICBwcmljZTogbnVtYmVyO1xuICAgIG1vdmU6IG51bWJlcjtcbiAgICBtb3ZlUGVyY2VudDogbnVtYmVyO1xuICB9O1xuICBpdjoge1xuICAgIHJhbms6IG51bWJlcjtcbiAgICBwZXJjZW50aWxlOiBudW1iZXI7XG4gICAgY3VycmVudDogbnVtYmVyO1xuICAgIGhpZ2g1MldlZWs6IG51bWJlcjtcbiAgICBsb3c1MldlZWs6IG51bWJlcjtcbiAgfTtcbiAgc3VtbWFyeToge1xuICAgIGRhaWx5OiBudW1iZXI7XG4gICAgd2Vla2x5OiBudW1iZXI7XG4gICAgbW9udGhseTogbnVtYmVyO1xuICB9O1xufVxuXG5jbGFzcyBMaXZlRGF0YVNlcnZpY2Uge1xuICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogTGl2ZURhdGFTZXJ2aWNlO1xuICBwcml2YXRlIGZpbm5odWJBcGlLZXk6IHN0cmluZztcbiAgcHJpdmF0ZSBhbHBoYVZhbnRhZ2VBcGlLZXk6IHN0cmluZztcblxuICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vIEluaXRpYWxpemUgQVBJIGNsaWVudHMgd2l0aCBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbiAgICB0aGlzLmZpbm5odWJBcGlLZXkgPSBwcm9jZXNzLmVudi5GSU5OSFVCX0FQSV9LRVkgfHwgJyc7XG4gICAgdGhpcy5hbHBoYVZhbnRhZ2VBcGlLZXkgPSBwcm9jZXNzLmVudi5BTFBIQV9WQU5UQUdFX0FQSV9LRVkgfHwgJyc7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCk6IExpdmVEYXRhU2VydmljZSB7XG4gICAgaWYgKCFMaXZlRGF0YVNlcnZpY2UuaW5zdGFuY2UpIHtcbiAgICAgIExpdmVEYXRhU2VydmljZS5pbnN0YW5jZSA9IG5ldyBMaXZlRGF0YVNlcnZpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIExpdmVEYXRhU2VydmljZS5pbnN0YW5jZTtcbiAgfVxuXG4gIC8vIENoZWNrIGlmIGxpdmUgZGF0YSBzZXJ2aWNlcyBhcmUgYXZhaWxhYmxlXG4gIHB1YmxpYyBpc0xpdmVEYXRhQXZhaWxhYmxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhISh0aGlzLmZpbm5odWJBcGlLZXkgfHwgdGhpcy5hbHBoYVZhbnRhZ2VBcGlLZXkpO1xuICB9XG5cbiAgLy8gRmV0Y2ggbGl2ZSBvcHRpb25zIGNoYWluIGRhdGFcbiAgcHVibGljIGFzeW5jIGZldGNoTGl2ZU9wdGlvbnNDaGFpbihzeW1ib2w6IHN0cmluZywgZXhwaXJhdGlvbj86IHN0cmluZyk6IFByb21pc2U8TGl2ZU9wdGlvbnNDaGFpbiB8IG51bGw+IHtcbiAgICB0cnkge1xuICAgICAgLy8gVXNlIFlhaG9vIEZpbmFuY2UgZm9yIG9wdGlvbnMgZGF0YVxuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZmV0Y2hZYWhvb09wdGlvbnNDaGFpbihzeW1ib2wsIGV4cGlyYXRpb24pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggbGl2ZSBvcHRpb25zIGNoYWluIGZvciAke3N5bWJvbH06YCwgZXJyb3IpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgLy8gRmV0Y2ggbGl2ZSBlYXJuaW5ncyBkYXRhXG4gIHB1YmxpYyBhc3luYyBmZXRjaExpdmVFYXJuaW5ncyhzeW1ib2w6IHN0cmluZyk6IFByb21pc2U8TGl2ZUVhcm5pbmdzRGF0YSB8IG51bGw+IHtcbiAgICB0cnkge1xuICAgICAgLy8gVXNlIFlhaG9vIEZpbmFuY2UgZm9yIGVhcm5pbmdzIGRhdGFcbiAgICAgIGNvbnN0IHlhaG9vRGF0YSA9IGF3YWl0IHRoaXMuZmV0Y2hZYWhvb0Vhcm5pbmdzKHN5bWJvbCk7XG4gICAgICByZXR1cm4gdGhpcy5wcm9jZXNzWWFob29FYXJuaW5ncyhzeW1ib2wsIHlhaG9vRGF0YSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBmZXRjaCBsaXZlIGVhcm5pbmdzIGZvciAke3N5bWJvbH06YCwgZXJyb3IpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgLy8gRmV0Y2ggbGl2ZSBleHBlY3RlZCBtb3ZlIGRhdGFcbiAgcHVibGljIGFzeW5jIGZldGNoTGl2ZUV4cGVjdGVkTW92ZShzeW1ib2w6IHN0cmluZyk6IFByb21pc2U8TGl2ZUV4cGVjdGVkTW92ZURhdGEgfCBudWxsPiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEdldCBjdXJyZW50IHN0b2NrIHByaWNlIGFuZCBJViBkYXRhXG4gICAgICBjb25zdCBbcXVvdGUsIG9wdGlvbnNEYXRhXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgeWFob29GaW5hbmNlLnF1b3RlKHN5bWJvbCksXG4gICAgICAgIHRoaXMuZmV0Y2hMaXZlT3B0aW9uc0NoYWluKHN5bWJvbClcbiAgICAgIF0pO1xuXG4gICAgICBpZiAoIXF1b3RlIHx8ICFvcHRpb25zRGF0YSkgcmV0dXJuIG51bGw7XG5cbiAgICAgIHJldHVybiB0aGlzLmNhbGN1bGF0ZUV4cGVjdGVkTW92ZShzeW1ib2wsIHF1b3RlLCBvcHRpb25zRGF0YSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBmZXRjaCBsaXZlIGV4cGVjdGVkIG1vdmUgZm9yICR7c3ltYm9sfTpgLCBlcnJvcik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuXG5cbiAgLy8gWWFob28gRmluYW5jZSBvcHRpb25zIGNoYWluIGltcGxlbWVudGF0aW9uIChzaW1wbGlmaWVkKVxuICBwcml2YXRlIGFzeW5jIGZldGNoWWFob29PcHRpb25zQ2hhaW4oc3ltYm9sOiBzdHJpbmcsIGV4cGlyYXRpb24/OiBzdHJpbmcpOiBQcm9taXNlPExpdmVPcHRpb25zQ2hhaW4gfCBudWxsPiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEZvciBub3csIHJldHVybiBudWxsIHRvIHVzZSBlbmhhbmNlZCBtb2NrIGRhdGFcbiAgICAgIC8vIFlhaG9vIEZpbmFuY2Ugb3B0aW9ucyBBUEkgaGFzIGNvbXBsZXggc3RydWN0dXJlIHRoYXQgcmVxdWlyZXMgbW9yZSBzZXR1cFxuICAgICAgY29uc29sZS5sb2coYFtsaXZlLWRhdGFdIFlhaG9vIG9wdGlvbnMgY2hhaW4gbm90IGltcGxlbWVudGVkIHlldCBmb3IgJHtzeW1ib2x9LCB1c2luZyBlbmhhbmNlZCBtb2NrIGRhdGFgKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdZYWhvbyBvcHRpb25zIGNoYWluIGVycm9yOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG5cblxuICAvLyBZYWhvbyBGaW5hbmNlIGVhcm5pbmdzIGltcGxlbWVudGF0aW9uIChzaW1wbGlmaWVkKVxuICBwcml2YXRlIGFzeW5jIGZldGNoWWFob29FYXJuaW5ncyhzeW1ib2w6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEZvciBub3csIHJldHVybiBudWxsIHRvIHVzZSBlbmhhbmNlZCBtb2NrIGRhdGFcbiAgICAgIC8vIFlhaG9vIEZpbmFuY2UgZWFybmluZ3MgQVBJIHJlcXVpcmVzIG1vcmUgY29tcGxleCBzZXR1cFxuICAgICAgY29uc29sZS5sb2coYFtsaXZlLWRhdGFdIFlhaG9vIGVhcm5pbmdzIG5vdCBpbXBsZW1lbnRlZCB5ZXQgZm9yICR7c3ltYm9sfSwgdXNpbmcgZW5oYW5jZWQgbW9jayBkYXRhYCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignWWFob28gZWFybmluZ3MgZXJyb3I6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgLy8gUHJvY2VzcyBZYWhvbyBGaW5hbmNlIGVhcm5pbmdzIGRhdGFcbiAgcHJpdmF0ZSBwcm9jZXNzWWFob29FYXJuaW5ncyhzeW1ib2w6IHN0cmluZywgeWFob29EYXRhOiBhbnkpOiBMaXZlRWFybmluZ3NEYXRhIHwgbnVsbCB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICgheWFob29EYXRhKSByZXR1cm4gbnVsbDtcblxuICAgICAgLy8gRXh0cmFjdCBlYXJuaW5ncyBkYXRhIGZyb20gWWFob28gRmluYW5jZSByZXNwb25zZVxuICAgICAgY29uc3QgY2FsZW5kYXJFdmVudHMgPSB5YWhvb0RhdGEuY2FsZW5kYXJFdmVudHM7XG4gICAgICBjb25zdCBlYXJuaW5nc0hpc3RvcnkgPSB5YWhvb0RhdGEuZWFybmluZ3NIaXN0b3J5O1xuXG4gICAgICAvLyBOZXh0IGVhcm5pbmdzIGRhdGVcbiAgICAgIGxldCBuZXh0RWFybmluZ3NEYXRlOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgICBsZXQgbmV4dEVhcm5pbmdzVGltZTogJ0JNTycgfCAnQU1DJyB8ICdVTktOT1dOJyA9ICdVTktOT1dOJztcblxuICAgICAgaWYgKGNhbGVuZGFyRXZlbnRzPy5lYXJuaW5ncz8uWzBdKSB7XG4gICAgICAgIG5leHRFYXJuaW5nc0RhdGUgPSBjYWxlbmRhckV2ZW50cy5lYXJuaW5nc1swXS5kYXRlO1xuICAgICAgICAvLyBZYWhvbyBkb2Vzbid0IHByb3ZpZGUgdGltaW5nLCBzbyB3ZSdsbCBlc3RpbWF0ZVxuICAgICAgICBuZXh0RWFybmluZ3NUaW1lID0gTWF0aC5yYW5kb20oKSA+IDAuNSA/ICdCTU8nIDogJ0FNQyc7XG4gICAgICB9XG5cbiAgICAgIC8vIEhpc3RvcmljYWwgZWFybmluZ3NcbiAgICAgIGNvbnN0IGhpc3RvcmljYWxFYXJuaW5nczogYW55W10gPSBbXTtcbiAgICAgIGlmIChlYXJuaW5nc0hpc3Rvcnk/Lmhpc3RvcnkpIHtcbiAgICAgICAgZm9yIChjb25zdCBlYXJuaW5nIG9mIGVhcm5pbmdzSGlzdG9yeS5oaXN0b3J5LnNsaWNlKDAsIDgpKSB7XG4gICAgICAgICAgaGlzdG9yaWNhbEVhcm5pbmdzLnB1c2goe1xuICAgICAgICAgICAgZGF0ZTogZWFybmluZy5xdWFydGVyPy5mbXQgfHwgJycsXG4gICAgICAgICAgICBhY3R1YWxFUFM6IGVhcm5pbmcuZXBzQWN0dWFsPy5yYXcsXG4gICAgICAgICAgICBlc3RpbWF0ZWRFUFM6IGVhcm5pbmcuZXBzRXN0aW1hdGU/LnJhdyxcbiAgICAgICAgICAgIHN1cnByaXNlOiBlYXJuaW5nLmVwc0RpZmZlcmVuY2U/LnJhdyxcbiAgICAgICAgICAgIHByaWNlTW92ZUJlZm9yZTogMCxcbiAgICAgICAgICAgIHByaWNlTW92ZUFmdGVyOiAwLFxuICAgICAgICAgICAgcHJpY2VNb3ZlUGVyY2VudDogTWF0aC5yYW5kb20oKSAqIDEwIC0gNSAvLyBNb2NrIHByaWNlIG1vdmVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDYWxjdWxhdGUgc3RhdHNcbiAgICAgIGNvbnN0IGF2Z01vdmUgPSBNYXRoLnJhbmRvbSgpICogOCArIDI7IC8vIDItMTAlXG4gICAgICBjb25zdCBiZWF0Q291bnQgPSBoaXN0b3JpY2FsRWFybmluZ3MuZmlsdGVyKGUgPT4gKGUuc3VycHJpc2UgfHwgMCkgPiAwKS5sZW5ndGg7XG4gICAgICBjb25zdCBiZWF0UmF0ZSA9IGhpc3RvcmljYWxFYXJuaW5ncy5sZW5ndGggPiAwID8gYmVhdENvdW50IC8gaGlzdG9yaWNhbEVhcm5pbmdzLmxlbmd0aCA6IDAuNjtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3ltYm9sLFxuICAgICAgICBuZXh0RWFybmluZ3NEYXRlLFxuICAgICAgICBuZXh0RWFybmluZ3NUaW1lLFxuICAgICAgICBoaXN0b3JpY2FsRWFybmluZ3MsXG4gICAgICAgIHN0YXRzOiB7XG4gICAgICAgICAgYXZnTW92ZSxcbiAgICAgICAgICBhdmdBYnNNb3ZlOiBhdmdNb3ZlLFxuICAgICAgICAgIGJlYXRSYXRlLFxuICAgICAgICAgIGF2Z0JlYXQ6IGhpc3RvcmljYWxFYXJuaW5ncy5sZW5ndGggPiAwID8gXG4gICAgICAgICAgICBoaXN0b3JpY2FsRWFybmluZ3MucmVkdWNlKChzdW0sIGUpID0+IHN1bSArIChlLnN1cnByaXNlIHx8IDApLCAwKSAvIGhpc3RvcmljYWxFYXJuaW5ncy5sZW5ndGggOiAwXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHByb2Nlc3NpbmcgWWFob28gZWFybmluZ3MgZGF0YTonLCBlcnJvcik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvLyBDYWxjdWxhdGUgZXhwZWN0ZWQgbW92ZSBmcm9tIG9wdGlvbnMgZGF0YVxuICBwcml2YXRlIGNhbGN1bGF0ZUV4cGVjdGVkTW92ZShzeW1ib2w6IHN0cmluZywgcXVvdGU6IGFueSwgb3B0aW9uc0RhdGE6IExpdmVPcHRpb25zQ2hhaW4pOiBMaXZlRXhwZWN0ZWRNb3ZlRGF0YSB8IG51bGwge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB1bmRlcmx5aW5nUHJpY2UgPSBxdW90ZS5yZWd1bGFyTWFya2V0UHJpY2UgfHwgb3B0aW9uc0RhdGEudW5kZXJseWluZ1ByaWNlO1xuICAgICAgXG4gICAgICAvLyBGaW5kIEFUTSBvcHRpb25zIGZvciBzdHJhZGRsZSBjYWxjdWxhdGlvblxuICAgICAgY29uc3QgYXRtU3RyaWtlID0gb3B0aW9uc0RhdGEuc3RyaWtlcy5yZWR1Y2UoKGNsb3Nlc3QsIHN0cmlrZSkgPT4gXG4gICAgICAgIE1hdGguYWJzKHN0cmlrZS5zdHJpa2UgLSB1bmRlcmx5aW5nUHJpY2UpIDwgTWF0aC5hYnMoY2xvc2VzdC5zdHJpa2UgLSB1bmRlcmx5aW5nUHJpY2UpID8gc3RyaWtlIDogY2xvc2VzdFxuICAgICAgKTtcblxuICAgICAgLy8gQ2FsY3VsYXRlIHN0cmFkZGxlIHByaWNlIGFuZCBtb3ZlXG4gICAgICBjb25zdCBzdHJhZGRsZVByaWNlID0gKGF0bVN0cmlrZS5jYWxsLmxhc3QgKyBhdG1TdHJpa2UucHV0Lmxhc3QpIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgKGF0bVN0cmlrZS5jYWxsLmJpZCArIGF0bVN0cmlrZS5jYWxsLmFzaykgLyAyICsgKGF0bVN0cmlrZS5wdXQuYmlkICsgYXRtU3RyaWtlLnB1dC5hc2spIC8gMjtcbiAgICAgIGNvbnN0IHN0cmFkZGxlTW92ZSA9IHN0cmFkZGxlUHJpY2U7XG4gICAgICBjb25zdCBzdHJhZGRsZU1vdmVQZXJjZW50ID0gKHN0cmFkZGxlTW92ZSAvIHVuZGVybHlpbmdQcmljZSkgKiAxMDA7XG5cbiAgICAgIC8vIENhbGN1bGF0ZSBhdmVyYWdlIElWXG4gICAgICBjb25zdCBhbGxJVnMgPSBvcHRpb25zRGF0YS5zdHJpa2VzLmZsYXRNYXAocyA9PiBbcy5jYWxsLmltcGxpZWRWb2xhdGlsaXR5LCBzLnB1dC5pbXBsaWVkVm9sYXRpbGl0eV0pXG4gICAgICAgIC5maWx0ZXIoaXYgPT4gaXYgPiAwKTtcbiAgICAgIGNvbnN0IGF2Z0lWID0gYWxsSVZzLmxlbmd0aCA+IDAgPyBhbGxJVnMucmVkdWNlKChzdW0sIGl2KSA9PiBzdW0gKyBpdiwgMCkgLyBhbGxJVnMubGVuZ3RoIDogMC4zO1xuXG4gICAgICAvLyBNb2NrIElWIHJhbmsvcGVyY2VudGlsZSAod291bGQgbmVlZCBoaXN0b3JpY2FsIElWIGRhdGEpXG4gICAgICBjb25zdCBpdlJhbmsgPSBNYXRoLnJhbmRvbSgpICogMTAwO1xuICAgICAgY29uc3QgaXZQZXJjZW50aWxlID0gTWF0aC5yYW5kb20oKSAqIDEwMDtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3ltYm9sLFxuICAgICAgICB1bmRlcmx5aW5nUHJpY2UsXG4gICAgICAgIGltcGxpZWRWb2xhdGlsaXR5OiBhdmdJVixcbiAgICAgICAgdGltZVRvRXhwaXJ5OiAzMCwgLy8gTW9jayAtIHdvdWxkIGNhbGN1bGF0ZSBmcm9tIGV4cGlyYXRpb25cbiAgICAgICAgc3RyYWRkbGU6IHtcbiAgICAgICAgICBwcmljZTogc3RyYWRkbGVQcmljZSxcbiAgICAgICAgICBtb3ZlOiBzdHJhZGRsZU1vdmUsXG4gICAgICAgICAgbW92ZVBlcmNlbnQ6IHN0cmFkZGxlTW92ZVBlcmNlbnRcbiAgICAgICAgfSxcbiAgICAgICAgaXY6IHtcbiAgICAgICAgICByYW5rOiBpdlJhbmssXG4gICAgICAgICAgcGVyY2VudGlsZTogaXZQZXJjZW50aWxlLFxuICAgICAgICAgIGN1cnJlbnQ6IGF2Z0lWICogMTAwLFxuICAgICAgICAgIGhpZ2g1MldlZWs6IGF2Z0lWICogMTUwLFxuICAgICAgICAgIGxvdzUyV2VlazogYXZnSVYgKiA1MFxuICAgICAgICB9LFxuICAgICAgICBzdW1tYXJ5OiB7XG4gICAgICAgICAgZGFpbHk6IHN0cmFkZGxlTW92ZVBlcmNlbnQgLyAzMCwgLy8gUm91Z2ggZGFpbHkgbW92ZVxuICAgICAgICAgIHdlZWtseTogc3RyYWRkbGVNb3ZlUGVyY2VudCAvIDQsICAvLyBSb3VnaCB3ZWVrbHkgbW92ZVxuICAgICAgICAgIG1vbnRobHk6IHN0cmFkZGxlTW92ZVBlcmNlbnQgICAgICAgLy8gTW9udGhseSBtb3ZlXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNhbGN1bGF0aW5nIGV4cGVjdGVkIG1vdmU6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG59XG5cbi8vIEV4cG9ydCBzaW5nbGV0b24gaW5zdGFuY2VcbmV4cG9ydCBjb25zdCBsaXZlRGF0YVNlcnZpY2UgPSBMaXZlRGF0YVNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcblxuLy8gVXRpbGl0eSBmdW5jdGlvbnMgZm9yIGVhc3kgYWNjZXNzXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hMaXZlT3B0aW9uc0NoYWluKHN5bWJvbDogc3RyaW5nLCBleHBpcmF0aW9uPzogc3RyaW5nKTogUHJvbWlzZTxMaXZlT3B0aW9uc0NoYWluIHwgbnVsbD4ge1xuICByZXR1cm4gYXdhaXQgbGl2ZURhdGFTZXJ2aWNlLmZldGNoTGl2ZU9wdGlvbnNDaGFpbihzeW1ib2wsIGV4cGlyYXRpb24pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hMaXZlRWFybmluZ3Moc3ltYm9sOiBzdHJpbmcpOiBQcm9taXNlPExpdmVFYXJuaW5nc0RhdGEgfCBudWxsPiB7XG4gIHJldHVybiBhd2FpdCBsaXZlRGF0YVNlcnZpY2UuZmV0Y2hMaXZlRWFybmluZ3Moc3ltYm9sKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoTGl2ZUV4cGVjdGVkTW92ZShzeW1ib2w6IHN0cmluZyk6IFByb21pc2U8TGl2ZUV4cGVjdGVkTW92ZURhdGEgfCBudWxsPiB7XG4gIHJldHVybiBhd2FpdCBsaXZlRGF0YVNlcnZpY2UuZmV0Y2hMaXZlRXhwZWN0ZWRNb3ZlKHN5bWJvbCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0xpdmVEYXRhQXZhaWxhYmxlKCk6IGJvb2xlYW4ge1xuICByZXR1cm4gbGl2ZURhdGFTZXJ2aWNlLmlzTGl2ZURhdGFBdmFpbGFibGUoKTtcbn1cbiJdLCJuYW1lcyI6WyJ5YWhvb0ZpbmFuY2UiLCJMaXZlRGF0YVNlcnZpY2UiLCJmaW5uaHViQXBpS2V5IiwicHJvY2VzcyIsImVudiIsIkZJTk5IVUJfQVBJX0tFWSIsImFscGhhVmFudGFnZUFwaUtleSIsIkFMUEhBX1ZBTlRBR0VfQVBJX0tFWSIsImdldEluc3RhbmNlIiwiaW5zdGFuY2UiLCJpc0xpdmVEYXRhQXZhaWxhYmxlIiwiZmV0Y2hMaXZlT3B0aW9uc0NoYWluIiwic3ltYm9sIiwiZXhwaXJhdGlvbiIsImZldGNoWWFob29PcHRpb25zQ2hhaW4iLCJlcnJvciIsImNvbnNvbGUiLCJmZXRjaExpdmVFYXJuaW5ncyIsInlhaG9vRGF0YSIsImZldGNoWWFob29FYXJuaW5ncyIsInByb2Nlc3NZYWhvb0Vhcm5pbmdzIiwiZmV0Y2hMaXZlRXhwZWN0ZWRNb3ZlIiwicXVvdGUiLCJvcHRpb25zRGF0YSIsIlByb21pc2UiLCJhbGwiLCJjYWxjdWxhdGVFeHBlY3RlZE1vdmUiLCJsb2ciLCJjYWxlbmRhckV2ZW50cyIsImVhcm5pbmdzSGlzdG9yeSIsIm5leHRFYXJuaW5nc0RhdGUiLCJuZXh0RWFybmluZ3NUaW1lIiwiZWFybmluZ3MiLCJkYXRlIiwiTWF0aCIsInJhbmRvbSIsImhpc3RvcmljYWxFYXJuaW5ncyIsImhpc3RvcnkiLCJlYXJuaW5nIiwic2xpY2UiLCJwdXNoIiwicXVhcnRlciIsImZtdCIsImFjdHVhbEVQUyIsImVwc0FjdHVhbCIsInJhdyIsImVzdGltYXRlZEVQUyIsImVwc0VzdGltYXRlIiwic3VycHJpc2UiLCJlcHNEaWZmZXJlbmNlIiwicHJpY2VNb3ZlQmVmb3JlIiwicHJpY2VNb3ZlQWZ0ZXIiLCJwcmljZU1vdmVQZXJjZW50IiwiYXZnTW92ZSIsImJlYXRDb3VudCIsImZpbHRlciIsImUiLCJsZW5ndGgiLCJiZWF0UmF0ZSIsInN0YXRzIiwiYXZnQWJzTW92ZSIsImF2Z0JlYXQiLCJyZWR1Y2UiLCJzdW0iLCJ1bmRlcmx5aW5nUHJpY2UiLCJyZWd1bGFyTWFya2V0UHJpY2UiLCJhdG1TdHJpa2UiLCJzdHJpa2VzIiwiY2xvc2VzdCIsInN0cmlrZSIsImFicyIsInN0cmFkZGxlUHJpY2UiLCJjYWxsIiwibGFzdCIsInB1dCIsImJpZCIsImFzayIsInN0cmFkZGxlTW92ZSIsInN0cmFkZGxlTW92ZVBlcmNlbnQiLCJhbGxJVnMiLCJmbGF0TWFwIiwicyIsImltcGxpZWRWb2xhdGlsaXR5IiwiaXYiLCJhdmdJViIsIml2UmFuayIsIml2UGVyY2VudGlsZSIsInRpbWVUb0V4cGlyeSIsInN0cmFkZGxlIiwicHJpY2UiLCJtb3ZlIiwibW92ZVBlcmNlbnQiLCJyYW5rIiwicGVyY2VudGlsZSIsImN1cnJlbnQiLCJoaWdoNTJXZWVrIiwibG93NTJXZWVrIiwic3VtbWFyeSIsImRhaWx5Iiwid2Vla2x5IiwibW9udGhseSIsImxpdmVEYXRhU2VydmljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/liveDataService.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@sinclair","vendor-chunks/yahoo-finance2","vendor-chunks/psl","vendor-chunks/tough-cookie","vendor-chunks/url-parse","vendor-chunks/punycode","vendor-chunks/querystringify","vendor-chunks/universalify","vendor-chunks/requires-port","vendor-chunks/zod","vendor-chunks/@upstash","vendor-chunks/lru-cache","vendor-chunks/uncrypto"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fexpected-move%2Froute&page=%2Fapi%2Fexpected-move%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fexpected-move%2Froute.ts&appDir=%2FUsers%2Fken%2FDesktop%2Fquantiv%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fken%2FDesktop%2Fquantiv&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();