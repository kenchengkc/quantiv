"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/options/route";
exports.ids = ["app/api/options/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Foptions%2Froute&page=%2Fapi%2Foptions%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Foptions%2Froute.ts&appDir=%2FUsers%2Fken%2FDesktop%2Fquantiv%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fken%2FDesktop%2Fquantiv&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Foptions%2Froute&page=%2Fapi%2Foptions%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Foptions%2Froute.ts&appDir=%2FUsers%2Fken%2FDesktop%2Fquantiv%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fken%2FDesktop%2Fquantiv&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_ken_Desktop_quantiv_app_api_options_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/options/route.ts */ \"(rsc)/./app/api/options/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/options/route\",\n        pathname: \"/api/options\",\n        filename: \"route\",\n        bundlePath: \"app/api/options/route\"\n    },\n    resolvedPagePath: \"/Users/ken/Desktop/quantiv/app/api/options/route.ts\",\n    nextConfigOutput,\n    userland: _Users_ken_Desktop_quantiv_app_api_options_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/options/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZvcHRpb25zJTJGcm91dGUmcGFnZT0lMkZhcGklMkZvcHRpb25zJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGb3B0aW9ucyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmtlbiUyRkRlc2t0b3AlMkZxdWFudGl2JTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRmtlbiUyRkRlc2t0b3AlMkZxdWFudGl2JmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNHO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVhbnRpdi8/NDg4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMva2VuL0Rlc2t0b3AvcXVhbnRpdi9hcHAvYXBpL29wdGlvbnMvcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL29wdGlvbnMvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9vcHRpb25zXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9vcHRpb25zL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL2tlbi9EZXNrdG9wL3F1YW50aXYvYXBwL2FwaS9vcHRpb25zL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9vcHRpb25zL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Foptions%2Froute&page=%2Fapi%2Foptions%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Foptions%2Froute.ts&appDir=%2FUsers%2Fken%2FDesktop%2Fquantiv%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fken%2FDesktop%2Fquantiv&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/options/route.ts":
/*!**********************************!*\
  !*** ./app/api/options/route.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   OPTIONS: () => (/* binding */ OPTIONS)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_schemas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/schemas */ \"(rsc)/./lib/schemas.ts\");\n/* harmony import */ var _lib_cache_lru__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/cache/lru */ \"(rsc)/./lib/cache/lru.ts\");\n/* harmony import */ var _lib_cache_redis__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/cache/redis */ \"(rsc)/./lib/cache/redis.ts\");\n/* harmony import */ var _lib_pricing_blackScholes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/pricing/blackScholes */ \"(rsc)/./lib/pricing/blackScholes.ts\");\n/* harmony import */ var _lib_data_sp500Service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/data/sp500Service */ \"(rsc)/./lib/data/sp500Service.ts\");\n/* harmony import */ var _lib_services_liveDataService__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/lib/services/liveDataService */ \"(rsc)/./lib/services/liveDataService.ts\");\n/**\n * /api/options - Options chain data endpoint\n * Returns normalized options chain with ATM data and pricing\n */ \n\n\n\n\n\n\n\n/**\n * Mock options data provider\n * In production, this would integrate with Yahoo Finance, CBOE, or other data sources\n */ class OptionsProvider {\n    static async getChain(symbol, expiry) {\n        // Simulate API delay\n        await new Promise((resolve)=>setTimeout(resolve, 100));\n        // Mock data for testing - in production this would fetch from external API\n        const spot = 150.00 + Math.random() * 50; // Random spot price\n        const selectedExpiry = expiry || \"2024-02-16\";\n        const expiryDate = new Date(selectedExpiry);\n        const daysToExpiry = Math.max(1, Math.ceil((expiryDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24)));\n        // Generate strikes around spot price\n        const strikes = [];\n        const baseStrike = Math.round(spot / 5) * 5; // Round to nearest $5\n        for(let i = -10; i <= 10; i++){\n            strikes.push(baseStrike + i * 5);\n        }\n        // Generate mock options data\n        const calls = strikes.map((strike)=>({\n                strike,\n                mid: Math.max(0.01, spot - strike + Math.random() * 5),\n                bid: 0,\n                ask: 0,\n                iv: 0.20 + Math.random() * 0.30,\n                volume: Math.floor(Math.random() * 1000),\n                openInterest: Math.floor(Math.random() * 5000)\n            }));\n        // Fix bid/ask based on mid\n        calls.forEach((call)=>{\n            const spread = Math.max(0.01, call.mid * 0.05); // 5% spread\n            call.bid = Math.max(0.01, call.mid - spread / 2);\n            call.ask = call.mid + spread / 2;\n        });\n        const puts = strikes.map((strike)=>({\n                strike,\n                mid: Math.max(0.01, strike - spot + Math.random() * 5),\n                bid: 0,\n                ask: 0,\n                iv: 0.20 + Math.random() * 0.30,\n                volume: Math.floor(Math.random() * 1000),\n                openInterest: Math.floor(Math.random() * 5000)\n            }));\n        // Fix bid/ask for puts\n        puts.forEach((put)=>{\n            const spread = Math.max(0.01, put.mid * 0.05);\n            put.bid = Math.max(0.01, put.mid - spread / 2);\n            put.ask = put.mid + spread / 2;\n        });\n        return {\n            spot,\n            expiryDate: selectedExpiry,\n            daysToExpiry,\n            strikes,\n            calls,\n            puts\n        };\n    }\n}\n/**\n * GET /api/options?symbol=AAPL&expiry=2024-01-19\n */ async function GET(request) {\n    const startTime = Date.now();\n    try {\n        // Parse and validate query parameters\n        const url = new URL(request.url);\n        const params = {\n            symbol: url.searchParams.get(\"symbol\"),\n            expiry: url.searchParams.get(\"expiry\") || undefined\n        };\n        const validation = (0,_lib_schemas__WEBPACK_IMPORTED_MODULE_1__.validateRequest)(_lib_schemas__WEBPACK_IMPORTED_MODULE_1__.OptionsRequestSchema, params);\n        if (!validation.success) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json((0,_lib_schemas__WEBPACK_IMPORTED_MODULE_1__.createApiResponse)(undefined, \"Invalid request parameters\", validation.details?.join(\", \")), {\n                status: 400\n            });\n        }\n        const { symbol, expiry } = validation.data;\n        // Generate cache key\n        const cacheKey = _lib_cache_lru__WEBPACK_IMPORTED_MODULE_2__.CacheKeys.optionsChain(symbol, expiry || \"default\");\n        // Try L1 cache first\n        let chainData = _lib_cache_lru__WEBPACK_IMPORTED_MODULE_2__.CacheInstances.optionsChain.get(cacheKey);\n        let cacheHit = \"l1\";\n        if (!chainData) {\n            // Try L2 (Redis) cache\n            const redisKey = _lib_cache_redis__WEBPACK_IMPORTED_MODULE_3__.Keys.optionsChain(symbol, expiry || \"default\");\n            chainData = await _lib_cache_redis__WEBPACK_IMPORTED_MODULE_3__.RedisCache.getJson(redisKey);\n            cacheHit = chainData ? \"l2\" : \"miss\";\n            if (!chainData) {\n                // Cache miss - fetch from provider\n                chainData = await OptionsProvider.getChain(symbol, expiry);\n                // Cache in both L1 and L2\n                _lib_cache_lru__WEBPACK_IMPORTED_MODULE_2__.CacheInstances.optionsChain.set(cacheKey, chainData, 60 * 1000); // 1 minute L1\n                await _lib_cache_redis__WEBPACK_IMPORTED_MODULE_3__.RedisCache.setJson(redisKey, chainData, 300); // 5 minutes L2\n                cacheHit = \"miss\";\n            } else {\n                // Cache in L1 for next time\n                _lib_cache_lru__WEBPACK_IMPORTED_MODULE_2__.CacheInstances.optionsChain.set(cacheKey, chainData, 60 * 1000);\n            }\n        }\n        // Find ATM strike and data\n        const atmStrike = (0,_lib_pricing_blackScholes__WEBPACK_IMPORTED_MODULE_4__.findATMStrike)(chainData.strikes, chainData.spot);\n        const atmCall = chainData.calls.find((c)=>c.strike === atmStrike);\n        const atmPut = chainData.puts.find((p)=>p.strike === atmStrike);\n        if (!atmCall || !atmPut) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json((0,_lib_schemas__WEBPACK_IMPORTED_MODULE_1__.createApiResponse)(undefined, \"ATM options not found\", \"Unable to find call and put at ATM strike\"), {\n                status: 500\n            });\n        }\n        // Calculate time to expiry in years\n        const T = chainData.daysToExpiry / 365;\n        // Try to fetch live options data first\n        let liveOptionsData = null;\n        if ((0,_lib_services_liveDataService__WEBPACK_IMPORTED_MODULE_6__.isLiveDataAvailable)()) {\n            try {\n                liveOptionsData = await (0,_lib_services_liveDataService__WEBPACK_IMPORTED_MODULE_6__.fetchLiveOptionsChain)(symbol);\n                console.log(`[options-api] Live data ${liveOptionsData ? \"found\" : \"not found\"} for ${symbol}`);\n            } catch (error) {\n                console.warn(`[options-api] Live data fetch failed for ${symbol}:`, error);\n            }\n        }\n        // If we have live data, use it; otherwise fall back to mock data\n        if (liveOptionsData) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json((0,_lib_schemas__WEBPACK_IMPORTED_MODULE_1__.createApiResponse)({\n                symbol,\n                chain: {\n                    quote: await (0,_lib_data_sp500Service__WEBPACK_IMPORTED_MODULE_5__.fetchHybridQuoteData)(symbol),\n                    strikes: {\n                        [liveOptionsData.expirationDate]: liveOptionsData.strikes.reduce((acc, strike)=>{\n                            acc[`${strike.strike}C`] = {\n                                strike: strike.strike,\n                                type: \"call\",\n                                bid: strike.call.bid,\n                                ask: strike.call.ask,\n                                last: strike.call.last,\n                                volume: strike.call.volume,\n                                openInterest: strike.call.openInterest,\n                                impliedVolatility: strike.call.impliedVolatility,\n                                delta: strike.call.delta,\n                                gamma: strike.call.gamma,\n                                theta: strike.call.theta,\n                                vega: strike.call.vega\n                            };\n                            acc[`${strike.strike}P`] = {\n                                strike: strike.strike,\n                                type: \"put\",\n                                bid: strike.put.bid,\n                                ask: strike.put.ask,\n                                last: strike.put.last,\n                                volume: strike.put.volume,\n                                openInterest: strike.put.openInterest,\n                                impliedVolatility: strike.put.impliedVolatility,\n                                delta: strike.put.delta,\n                                gamma: strike.put.gamma,\n                                theta: strike.put.theta,\n                                vega: strike.put.vega\n                            };\n                            return acc;\n                        }, {})\n                    }\n                }\n            }));\n        }\n        // Fallback to mock data\n        // Fetch enhanced quote data (real or enhanced mock)\n        const quoteData = await (0,_lib_data_sp500Service__WEBPACK_IMPORTED_MODULE_5__.fetchHybridQuoteData)(symbol);\n        // Build response data to match MiniOptionsChain component expectations\n        const expiryDate = chainData.expiryDate;\n        // Create strikes object organized by expiration date\n        const strikesByExpiry = {};\n        strikesByExpiry[expiryDate] = {};\n        // Build strikes data for the MiniOptionsChain component\n        chainData.strikes.forEach((strike)=>{\n            const call = chainData.calls.find((c)=>c.strike === strike);\n            const put = chainData.puts.find((p)=>p.strike === strike);\n            // Add call option\n            if (call) {\n                strikesByExpiry[expiryDate][`${strike}C`] = {\n                    strike: strike,\n                    type: \"call\",\n                    bid: call.bid,\n                    ask: call.ask,\n                    mark: call.mid,\n                    volume: call.volume || 0,\n                    openInterest: call.openInterest || 0,\n                    iv: call.iv,\n                    delta: call.delta,\n                    inTheMoney: strike < chainData.spot\n                };\n            }\n            // Add put option\n            if (put) {\n                strikesByExpiry[expiryDate][`${strike}P`] = {\n                    strike: strike,\n                    type: \"put\",\n                    bid: put.bid,\n                    ask: put.ask,\n                    mark: put.mid,\n                    volume: put.volume || 0,\n                    openInterest: put.openInterest || 0,\n                    iv: put.iv,\n                    delta: put.delta,\n                    inTheMoney: strike > chainData.spot\n                };\n            }\n        });\n        const responseData = {\n            chain: {\n                quote: {\n                    last: quoteData.price,\n                    change: quoteData.change,\n                    changePercent: quoteData.changePercent,\n                    name: quoteData.name,\n                    volume: quoteData.volume,\n                    marketCap: quoteData.marketCap,\n                    pe: quoteData.pe,\n                    high52Week: quoteData.high52Week,\n                    low52Week: quoteData.low52Week\n                },\n                expirations: [\n                    {\n                        date: expiryDate,\n                        dte: chainData.daysToExpiry\n                    }\n                ],\n                strikes: strikesByExpiry\n            },\n            spot: chainData.spot,\n            expiryUsed: expiryDate,\n            atm: {\n                strike: atmStrike,\n                callMid: atmCall.mid,\n                putMid: atmPut.mid,\n                iv: atmCall.iv || atmPut.iv || 0.25,\n                T: chainData.daysToExpiry / 365\n            },\n            // Keep rows for backward compatibility with other components\n            rows: chainData.strikes.map((strike)=>{\n                const call = chainData.calls.find((c)=>c.strike === strike);\n                const put = chainData.puts.find((p)=>p.strike === strike);\n                return {\n                    strike,\n                    call: call || {\n                        strike,\n                        mid: 0,\n                        bid: 0,\n                        ask: 0,\n                        iv: 0.25,\n                        volume: 0,\n                        openInterest: 0\n                    },\n                    put: put || {\n                        strike,\n                        mid: 0,\n                        bid: 0,\n                        ask: 0,\n                        iv: 0.25,\n                        volume: 0,\n                        openInterest: 0\n                    }\n                };\n            })\n        };\n        const response = (0,_lib_schemas__WEBPACK_IMPORTED_MODULE_1__.createApiResponse)(responseData);\n        const processingTime = Date.now() - startTime;\n        // Add performance headers\n        const headers = new Headers({\n            \"Content-Type\": \"application/json\",\n            \"Cache-Control\": \"public, s-maxage=60, stale-while-revalidate=300\",\n            \"X-Cache-Hit\": cacheHit,\n            \"X-Processing-Time\": `${processingTime}ms`,\n            \"X-Symbol\": symbol,\n            \"X-Expiry\": chainData.expiryDate\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response, {\n            headers\n        });\n    } catch (error) {\n        console.error(\"[API] /api/options error:\", error);\n        const errorResponse = (0,_lib_schemas__WEBPACK_IMPORTED_MODULE_1__.createApiResponse)(undefined, \"Internal server error\", error instanceof Error ? error.message : \"Unknown error\", \"Please try again or contact support if the issue persists\");\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(errorResponse, {\n            status: 500\n        });\n    }\n}\n/**\n * OPTIONS /api/options - CORS preflight\n */ async function OPTIONS() {\n    return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(null, {\n        status: 200,\n        headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Methods\": \"GET, OPTIONS\",\n            \"Access-Control-Allow-Headers\": \"Content-Type\"\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/options/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/cache/lru.ts":
/*!**************************!*\
  !*** ./lib/cache/lru.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheInstances: () => (/* binding */ CacheInstances),\n/* harmony export */   CacheKeys: () => (/* binding */ CacheKeys),\n/* harmony export */   QuantivLRUCache: () => (/* binding */ QuantivLRUCache),\n/* harmony export */   clearAllCaches: () => (/* binding */ clearAllCaches),\n/* harmony export */   getAllCacheStats: () => (/* binding */ getAllCacheStats)\n/* harmony export */ });\n/* harmony import */ var lru_cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lru-cache */ \"(rsc)/./node_modules/lru-cache/dist/esm/index.js\");\n/**\n * LRU Cache for L1 (in-process) caching\n * Used for fast API response caching within each API route\n */ \n/**\n * Generic LRU cache wrapper with TTL and statistics\n */ class QuantivLRUCache {\n    constructor(name, options = {}){\n        this.hits = 0;\n        this.misses = 0;\n        this.name = name;\n        this.cache = new lru_cache__WEBPACK_IMPORTED_MODULE_0__.LRUCache({\n            max: options.maxSize || 100,\n            ttl: options.ttlMs || 60 * 1000,\n            updateAgeOnGet: options.updateAgeOnGet ?? true,\n            dispose: (value, key)=>{\n                // Optional cleanup when items are evicted\n                console.debug(`[${this.name}] Evicted cache entry: ${key}`);\n            }\n        });\n    }\n    /**\n   * Get item from cache\n   */ get(key) {\n        const entry = this.cache.get(key);\n        if (entry) {\n            this.hits++;\n            return entry.data;\n        } else {\n            this.misses++;\n            return null;\n        }\n    }\n    /**\n   * Set item in cache\n   */ set(key, data, ttlMs) {\n        const entry = {\n            data,\n            timestamp: Date.now(),\n            key\n        };\n        if (ttlMs) {\n            this.cache.set(key, entry, {\n                ttl: ttlMs\n            });\n        } else {\n            this.cache.set(key, entry);\n        }\n    }\n    /**\n   * Check if key exists in cache\n   */ has(key) {\n        return this.cache.has(key);\n    }\n    /**\n   * Delete item from cache\n   */ delete(key) {\n        return this.cache.delete(key);\n    }\n    /**\n   * Clear all items from cache\n   */ clear() {\n        this.cache.clear();\n        this.hits = 0;\n        this.misses = 0;\n    }\n    /**\n   * Get cache statistics\n   */ getStats() {\n        const total = this.hits + this.misses;\n        return {\n            name: this.name,\n            size: this.cache.size,\n            maxSize: this.cache.max,\n            hits: this.hits,\n            misses: this.misses,\n            hitRate: total > 0 ? this.hits / total * 100 : 0,\n            calculatedSize: this.cache.calculatedSize || 0\n        };\n    }\n    /**\n   * Get or set pattern - fetch data if not in cache\n   */ async getOrSet(key, fetchFn, ttlMs) {\n        const cached = this.get(key);\n        if (cached !== null) {\n            return cached;\n        }\n        try {\n            const data = await fetchFn();\n            this.set(key, data, ttlMs);\n            return data;\n        } catch (error) {\n            console.error(`[${this.name}] Error fetching data for key ${key}:`, error);\n            throw error;\n        }\n    }\n    /**\n   * Peek at item without updating LRU order\n   */ peek(key) {\n        const entry = this.cache.peek(key);\n        return entry ? entry.data : null;\n    }\n    /**\n   * Get all keys in cache\n   */ keys() {\n        return Array.from(this.cache.keys());\n    }\n    /**\n   * Get cache info for debugging\n   */ getInfo() {\n        const entries = [];\n        const now = Date.now();\n        // Convert iterator to array to avoid downlevelIteration issues\n        const cacheEntries = Array.from(this.cache.entries());\n        for (const [key, entry] of cacheEntries){\n            entries.push({\n                key,\n                timestamp: entry.timestamp,\n                age: now - entry.timestamp\n            });\n        }\n        return {\n            name: this.name,\n            entries,\n            stats: this.getStats()\n        };\n    }\n}\n/**\n * Pre-configured cache instances for different data types\n */ const CacheInstances = {\n    // Options chain cache - larger size, shorter TTL\n    optionsChain: new QuantivLRUCache(\"options-chain\", {\n        maxSize: 200,\n        ttlMs: 60 * 1000,\n        updateAgeOnGet: true\n    }),\n    // Expected move cache - medium size, medium TTL\n    expectedMove: new QuantivLRUCache(\"expected-move\", {\n        maxSize: 150,\n        ttlMs: 90 * 1000,\n        updateAgeOnGet: true\n    }),\n    // Earnings data cache - smaller size, longer TTL\n    earnings: new QuantivLRUCache(\"earnings\", {\n        maxSize: 100,\n        ttlMs: 300 * 1000,\n        updateAgeOnGet: true\n    }),\n    // Price history cache - smaller size, longer TTL\n    priceHistory: new QuantivLRUCache(\"price-history\", {\n        maxSize: 50,\n        ttlMs: 600 * 1000,\n        updateAgeOnGet: false // Don't update age for historical data\n    }),\n    // IV series cache - medium size, longer TTL\n    ivSeries: new QuantivLRUCache(\"iv-series\", {\n        maxSize: 100,\n        ttlMs: 1800 * 1000,\n        updateAgeOnGet: false\n    })\n};\n/**\n * Get all cache statistics for monitoring\n */ function getAllCacheStats() {\n    return {\n        optionsChain: CacheInstances.optionsChain.getStats(),\n        expectedMove: CacheInstances.expectedMove.getStats(),\n        earnings: CacheInstances.earnings.getStats(),\n        priceHistory: CacheInstances.priceHistory.getStats(),\n        ivSeries: CacheInstances.ivSeries.getStats()\n    };\n}\n/**\n * Clear all caches (useful for testing or manual cache invalidation)\n */ function clearAllCaches() {\n    Object.values(CacheInstances).forEach((cache)=>cache.clear());\n}\n/**\n * Utility to generate cache keys for different data types\n */ const CacheKeys = {\n    optionsChain: (symbol, expiry)=>`${symbol.toUpperCase()}:${expiry}`,\n    expectedMove: (symbol, expiry)=>`${symbol.toUpperCase()}:${expiry}`,\n    earnings: (symbol)=>symbol.toUpperCase(),\n    priceHistory: (symbol, days)=>`${symbol.toUpperCase()}:${days}d`,\n    ivSeries: (symbol, days)=>`${symbol.toUpperCase()}:${days}d`\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/cache/lru.ts\n");

/***/ }),

/***/ "(rsc)/./lib/cache/redis.ts":
/*!****************************!*\
  !*** ./lib/cache/redis.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Keys: () => (/* binding */ Keys),\n/* harmony export */   QuantivCache: () => (/* binding */ QuantivCache),\n/* harmony export */   RedisCache: () => (/* binding */ RedisCache),\n/* harmony export */   checkRedisHealth: () => (/* binding */ checkRedisHealth),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   formatDateForKey: () => (/* binding */ formatDateForKey)\n/* harmony export */ });\n/* harmony import */ var _upstash_redis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @upstash/redis */ \"(rsc)/./node_modules/@upstash/redis/nodejs.mjs\");\n/**\n * Redis Client Wrapper for Upstash\n * Provides caching utilities and key builders for Quantiv\n */ \n// Initialize Redis client - disabled for development\nconst redis = process.env.REDIS_URL && process.env.REDIS_TOKEN ? new _upstash_redis__WEBPACK_IMPORTED_MODULE_0__.Redis({\n    url: process.env.REDIS_URL,\n    token: process.env.REDIS_TOKEN\n}) : null;\n/**\n * Redis key builders following Quantiv's naming convention\n */ const Keys = {\n    // Expected move snapshot: em:snap:${symbol}:${expiry}\n    expectedMoveSnapshot: (symbol, expiry)=>`em:snap:${symbol.toUpperCase()}:${expiry}`,\n    // Top movers for a date: em:top:${YYYYMMDD}\n    topMovers: (date)=>`em:top:${date}`,\n    // IV series for a symbol: iv:series:${symbol}\n    ivSeries: (symbol)=>`iv:series:${symbol.toUpperCase()}`,\n    // Daily visitor count: d:visits:${YYYYMMDD}\n    dailyVisits: (date)=>`d:visits:${date}`,\n    // Options chain cache: chain:${symbol}:${expiry}\n    optionsChain: (symbol, expiry)=>`chain:${symbol.toUpperCase()}:${expiry}`,\n    // Earnings data: earnings:${symbol}\n    earnings: (symbol)=>`earnings:${symbol.toUpperCase()}`,\n    // Price history: prices:${symbol}\n    priceHistory: (symbol)=>`prices:${symbol.toUpperCase()}`\n};\n/**\n * Generic JSON cache operations\n */ class RedisCache {\n    /**\n   * Set JSON data with TTL\n   */ static async setJson(key, data, ttlSeconds = 120) {\n        if (!redis) return; // Skip if Redis not configured\n        try {\n            await redis.setex(key, ttlSeconds, JSON.stringify(data));\n        } catch (error) {\n            console.error(`Redis setJson error for key ${key}:`, error);\n        // Don't throw - degrade gracefully without cache\n        }\n    }\n    /**\n   * Get JSON data\n   */ static async getJson(key) {\n        if (!redis) return null; // Skip if Redis not configured\n        try {\n            const result = await redis.get(key);\n            return result ? JSON.parse(result) : null;\n        } catch (error) {\n            console.error(`Redis getJson error for key ${key}:`, error);\n            return null; // Degrade gracefully\n        }\n    }\n    /**\n   * Increment counter and return new value\n   */ static async increment(key, ttlSeconds) {\n        if (!redis) return 1; // Return 1 if Redis not configured\n        try {\n            const newValue = await redis.incr(key);\n            if (ttlSeconds && newValue === 1) {\n                // Set TTL only on first increment (when key is created)\n                await redis.expire(key, ttlSeconds);\n            }\n            return newValue;\n        } catch (error) {\n            console.error(`Redis increment error for key ${key}:`, error);\n            return 0; // Return 0 on error\n        }\n    }\n    /**\n   * Add to sorted set (for top movers)\n   */ static async addToSortedSet(key, score, member, ttlSeconds) {\n        if (!redis) return; // Skip if Redis not configured\n        try {\n            await redis.zadd(key, {\n                score,\n                member\n            });\n            if (ttlSeconds) {\n                await redis.expire(key, ttlSeconds);\n            }\n        } catch (error) {\n            console.error(`Redis zadd error for key ${key}:`, error);\n        // Don't throw - degrade gracefully\n        }\n    }\n    /**\n   * Get top N members from sorted set (descending order)\n   */ static async getTopFromSortedSet(key, count = 10) {\n        if (!redis) return []; // Return empty array if Redis not configured\n        try {\n            const result = await redis.zrange(key, 0, count - 1, {\n                rev: true,\n                withScores: true\n            });\n            // Convert flat array to objects\n            const items = [];\n            for(let i = 0; i < result.length; i += 2){\n                items.push({\n                    member: result[i],\n                    score: result[i + 1]\n                });\n            }\n            return items;\n        } catch (error) {\n            console.error(`Redis zrange error for key ${key}:`, error);\n            return []; // Return empty array on error\n        }\n    }\n    /**\n   * Delete a key\n   */ static async delete(key) {\n        if (!redis) return; // Skip if Redis not configured\n        try {\n            await redis.del(key);\n        } catch (error) {\n            console.error(`Redis delete error for key ${key}:`, error);\n        // Don't throw - degrade gracefully\n        }\n    }\n    /**\n   * Check if key exists\n   */ static async exists(key) {\n        if (!redis) return false; // Return false if Redis not configured\n        try {\n            const result = await redis.exists(key);\n            return result === 1;\n        } catch (error) {\n            console.error(`Redis exists error for key ${key}:`, error);\n            return false;\n        }\n    }\n    /**\n   * Get TTL for a key\n   */ static async getTTL(key) {\n        if (!redis) return -1; // Return -1 if Redis not configured\n        try {\n            return await redis.ttl(key);\n        } catch (error) {\n            console.error(`Redis TTL error for key ${key}:`, error);\n            return -1;\n        }\n    }\n}\n/**\n * Specialized cache operations for Quantiv\n */ class QuantivCache {\n    /**\n   * Cache expected move snapshot\n   */ static async cacheExpectedMove(symbol, expiry, data, ttlSeconds = 120) {\n        const key = Keys.expectedMoveSnapshot(symbol, expiry);\n        const snapshot = {\n            ...data,\n            timestamp: new Date().toISOString(),\n            symbol: symbol.toUpperCase(),\n            expiry\n        };\n        await RedisCache.setJson(key, snapshot, ttlSeconds);\n    }\n    /**\n   * Get cached expected move\n   */ static async getExpectedMove(symbol, expiry) {\n        const key = Keys.expectedMoveSnapshot(symbol, expiry);\n        return await RedisCache.getJson(key);\n    }\n    /**\n   * Increment daily visitor count\n   */ static async incrementVisitorCount() {\n        const today = new Date().toISOString().split(\"T\")[0].replace(/-/g, \"\");\n        const key = Keys.dailyVisits(today);\n        // Set TTL to 48 hours (keep yesterday's count available)\n        return await RedisCache.increment(key, 48 * 60 * 60);\n    }\n    /**\n   * Get daily visitor count\n   */ static async getVisitorCount(date) {\n        const targetDate = date || new Date().toISOString().split(\"T\")[0].replace(/-/g, \"\");\n        const key = Keys.dailyVisits(targetDate);\n        if (!redis) return 0; // Return 0 if Redis not configured\n        try {\n            const count = await redis.get(key);\n            return count ? parseInt(count, 10) : 0;\n        } catch (error) {\n            console.error(`Error getting visitor count for ${targetDate}:`, error);\n            return 0;\n        }\n    }\n    /**\n   * Cache IV series data\n   */ static async cacheIVSeries(symbol, data, ttlSeconds = 24 * 60 * 60) {\n        const key = Keys.ivSeries(symbol);\n        await RedisCache.setJson(key, data, ttlSeconds);\n    }\n    /**\n   * Get cached IV series\n   */ static async getIVSeries(symbol) {\n        const key = Keys.ivSeries(symbol);\n        return await RedisCache.getJson(key);\n    }\n    /**\n   * Add symbol to top movers for a date\n   */ static async addTopMover(symbol, expectedMovePct, date) {\n        const targetDate = date || new Date().toISOString().split(\"T\")[0].replace(/-/g, \"\");\n        const key = Keys.topMovers(targetDate);\n        await RedisCache.addToSortedSet(key, expectedMovePct, symbol.toUpperCase(), 24 * 60 * 60 // 24 hour TTL\n        );\n    }\n    /**\n   * Get top movers for a date\n   */ static async getTopMovers(date, count = 10) {\n        const targetDate = date || new Date().toISOString().split(\"T\")[0].replace(/-/g, \"\");\n        const key = Keys.topMovers(targetDate);\n        const result = await RedisCache.getTopFromSortedSet(key, count);\n        return result.map((item)=>({\n                symbol: item.member,\n                expectedMovePct: item.score\n            }));\n    }\n}\n/**\n * Health check for Redis connection\n */ async function checkRedisHealth() {\n    if (!redis) {\n        return {\n            connected: false,\n            error: \"Redis not configured (missing REDIS_URL or REDIS_TOKEN)\"\n        };\n    }\n    try {\n        const start = Date.now();\n        await redis.ping();\n        const latency = Date.now() - start;\n        return {\n            connected: true,\n            latency\n        };\n    } catch (error) {\n        return {\n            connected: false,\n            error: error instanceof Error ? error.message : \"Unknown error\"\n        };\n    }\n}\n/**\n * Utility to format date for Redis keys\n */ function formatDateForKey(date = new Date()) {\n    return date.toISOString().split(\"T\")[0].replace(/-/g, \"\");\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (redis);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/cache/redis.ts\n");

/***/ }),

/***/ "(rsc)/./lib/data/sp500Service.ts":
/*!**********************************!*\
  !*** ./lib/data/sp500Service.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchHybridQuoteData: () => (/* binding */ fetchHybridQuoteData),\n/* harmony export */   fetchLiveQuoteData: () => (/* binding */ fetchLiveQuoteData),\n/* harmony export */   getAllSP500Companies: () => (/* binding */ getAllSP500Companies),\n/* harmony export */   getPopularSP500Stocks: () => (/* binding */ getPopularSP500Stocks),\n/* harmony export */   searchSP500Companies: () => (/* binding */ searchSP500Companies),\n/* harmony export */   sp500DataService: () => (/* binding */ sp500DataService)\n/* harmony export */ });\n/* harmony import */ var yahoo_finance2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! yahoo-finance2 */ \"(rsc)/./node_modules/yahoo-finance2/dist/esm/src/index-node.js\");\n/**\n * S&P 500 Data Service\n * Provides real S&P 500 company data and integrates with Yahoo Finance for live market data\n */ \n// Real S&P 500 companies (subset for initial implementation)\nconst SP500_COMPANIES = [\n    // Technology\n    {\n        symbol: \"AAPL\",\n        name: \"Apple Inc.\",\n        sector: \"Technology\",\n        industry: \"Consumer Electronics\",\n        exchange: \"NASDAQ\"\n    },\n    {\n        symbol: \"MSFT\",\n        name: \"Microsoft Corporation\",\n        sector: \"Technology\",\n        industry: \"Software\",\n        exchange: \"NASDAQ\"\n    },\n    {\n        symbol: \"GOOGL\",\n        name: \"Alphabet Inc. Class A\",\n        sector: \"Technology\",\n        industry: \"Internet Services\",\n        exchange: \"NASDAQ\"\n    },\n    {\n        symbol: \"GOOG\",\n        name: \"Alphabet Inc. Class C\",\n        sector: \"Technology\",\n        industry: \"Internet Services\",\n        exchange: \"NASDAQ\"\n    },\n    {\n        symbol: \"AMZN\",\n        name: \"Amazon.com Inc.\",\n        sector: \"Consumer Discretionary\",\n        industry: \"E-commerce\",\n        exchange: \"NASDAQ\"\n    },\n    {\n        symbol: \"TSLA\",\n        name: \"Tesla Inc.\",\n        sector: \"Consumer Discretionary\",\n        industry: \"Electric Vehicles\",\n        exchange: \"NASDAQ\"\n    },\n    {\n        symbol: \"META\",\n        name: \"Meta Platforms Inc.\",\n        sector: \"Technology\",\n        industry: \"Social Media\",\n        exchange: \"NASDAQ\"\n    },\n    {\n        symbol: \"NVDA\",\n        name: \"NVIDIA Corporation\",\n        sector: \"Technology\",\n        industry: \"Semiconductors\",\n        exchange: \"NASDAQ\"\n    },\n    {\n        symbol: \"NFLX\",\n        name: \"Netflix Inc.\",\n        sector: \"Communication Services\",\n        industry: \"Streaming\",\n        exchange: \"NASDAQ\"\n    },\n    {\n        symbol: \"AMD\",\n        name: \"Advanced Micro Devices Inc.\",\n        sector: \"Technology\",\n        industry: \"Semiconductors\",\n        exchange: \"NASDAQ\"\n    },\n    {\n        symbol: \"CRM\",\n        name: \"Salesforce Inc.\",\n        sector: \"Technology\",\n        industry: \"Cloud Software\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"ORCL\",\n        name: \"Oracle Corporation\",\n        sector: \"Technology\",\n        industry: \"Database Software\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"ADBE\",\n        name: \"Adobe Inc.\",\n        sector: \"Technology\",\n        industry: \"Software\",\n        exchange: \"NASDAQ\"\n    },\n    {\n        symbol: \"INTC\",\n        name: \"Intel Corporation\",\n        sector: \"Technology\",\n        industry: \"Semiconductors\",\n        exchange: \"NASDAQ\"\n    },\n    {\n        symbol: \"CSCO\",\n        name: \"Cisco Systems Inc.\",\n        sector: \"Technology\",\n        industry: \"Networking\",\n        exchange: \"NASDAQ\"\n    },\n    // Financial Services\n    {\n        symbol: \"JPM\",\n        name: \"JPMorgan Chase & Co.\",\n        sector: \"Financial Services\",\n        industry: \"Banking\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"BAC\",\n        name: \"Bank of America Corporation\",\n        sector: \"Financial Services\",\n        industry: \"Banking\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"WFC\",\n        name: \"Wells Fargo & Company\",\n        sector: \"Financial Services\",\n        industry: \"Banking\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"GS\",\n        name: \"Goldman Sachs Group Inc.\",\n        sector: \"Financial Services\",\n        industry: \"Investment Banking\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"MS\",\n        name: \"Morgan Stanley\",\n        sector: \"Financial Services\",\n        industry: \"Investment Banking\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"V\",\n        name: \"Visa Inc.\",\n        sector: \"Financial Services\",\n        industry: \"Payment Processing\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"MA\",\n        name: \"Mastercard Incorporated\",\n        sector: \"Financial Services\",\n        industry: \"Payment Processing\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"PYPL\",\n        name: \"PayPal Holdings Inc.\",\n        sector: \"Financial Services\",\n        industry: \"Digital Payments\",\n        exchange: \"NASDAQ\"\n    },\n    {\n        symbol: \"AXP\",\n        name: \"American Express Company\",\n        sector: \"Financial Services\",\n        industry: \"Credit Services\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"BLK\",\n        name: \"BlackRock Inc.\",\n        sector: \"Financial Services\",\n        industry: \"Asset Management\",\n        exchange: \"NYSE\"\n    },\n    // Healthcare\n    {\n        symbol: \"UNH\",\n        name: \"UnitedHealth Group Incorporated\",\n        sector: \"Healthcare\",\n        industry: \"Health Insurance\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"JNJ\",\n        name: \"Johnson & Johnson\",\n        sector: \"Healthcare\",\n        industry: \"Pharmaceuticals\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"PFE\",\n        name: \"Pfizer Inc.\",\n        sector: \"Healthcare\",\n        industry: \"Pharmaceuticals\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"ABBV\",\n        name: \"AbbVie Inc.\",\n        sector: \"Healthcare\",\n        industry: \"Pharmaceuticals\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"TMO\",\n        name: \"Thermo Fisher Scientific Inc.\",\n        sector: \"Healthcare\",\n        industry: \"Life Sciences\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"ABT\",\n        name: \"Abbott Laboratories\",\n        sector: \"Healthcare\",\n        industry: \"Medical Devices\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"CVS\",\n        name: \"CVS Health Corporation\",\n        sector: \"Healthcare\",\n        industry: \"Healthcare Services\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"LLY\",\n        name: \"Eli Lilly and Company\",\n        sector: \"Healthcare\",\n        industry: \"Pharmaceuticals\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"MRK\",\n        name: \"Merck & Co. Inc.\",\n        sector: \"Healthcare\",\n        industry: \"Pharmaceuticals\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"MDT\",\n        name: \"Medtronic plc\",\n        sector: \"Healthcare\",\n        industry: \"Medical Devices\",\n        exchange: \"NYSE\"\n    },\n    // Consumer Discretionary\n    {\n        symbol: \"HD\",\n        name: \"Home Depot Inc.\",\n        sector: \"Consumer Discretionary\",\n        industry: \"Home Improvement\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"MCD\",\n        name: \"McDonald's Corporation\",\n        sector: \"Consumer Discretionary\",\n        industry: \"Restaurants\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"DIS\",\n        name: \"Walt Disney Company\",\n        sector: \"Communication Services\",\n        industry: \"Entertainment\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"NKE\",\n        name: \"Nike Inc.\",\n        sector: \"Consumer Discretionary\",\n        industry: \"Footwear\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"SBUX\",\n        name: \"Starbucks Corporation\",\n        sector: \"Consumer Discretionary\",\n        industry: \"Restaurants\",\n        exchange: \"NASDAQ\"\n    },\n    {\n        symbol: \"LOW\",\n        name: \"Lowe's Companies Inc.\",\n        sector: \"Consumer Discretionary\",\n        industry: \"Home Improvement\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"TGT\",\n        name: \"Target Corporation\",\n        sector: \"Consumer Discretionary\",\n        industry: \"Retail\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"BKNG\",\n        name: \"Booking Holdings Inc.\",\n        sector: \"Consumer Discretionary\",\n        industry: \"Travel\",\n        exchange: \"NASDAQ\"\n    },\n    // Consumer Staples\n    {\n        symbol: \"WMT\",\n        name: \"Walmart Inc.\",\n        sector: \"Consumer Staples\",\n        industry: \"Retail\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"PG\",\n        name: \"Procter & Gamble Company\",\n        sector: \"Consumer Staples\",\n        industry: \"Personal Care\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"KO\",\n        name: \"Coca-Cola Company\",\n        sector: \"Consumer Staples\",\n        industry: \"Beverages\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"PEP\",\n        name: \"PepsiCo Inc.\",\n        sector: \"Consumer Staples\",\n        industry: \"Beverages\",\n        exchange: \"NASDAQ\"\n    },\n    {\n        symbol: \"COST\",\n        name: \"Costco Wholesale Corporation\",\n        sector: \"Consumer Staples\",\n        industry: \"Retail\",\n        exchange: \"NASDAQ\"\n    },\n    {\n        symbol: \"WBA\",\n        name: \"Walgreens Boots Alliance Inc.\",\n        sector: \"Consumer Staples\",\n        industry: \"Pharmacy\",\n        exchange: \"NASDAQ\"\n    },\n    // Energy\n    {\n        symbol: \"XOM\",\n        name: \"Exxon Mobil Corporation\",\n        sector: \"Energy\",\n        industry: \"Oil & Gas\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"CVX\",\n        name: \"Chevron Corporation\",\n        sector: \"Energy\",\n        industry: \"Oil & Gas\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"COP\",\n        name: \"ConocoPhillips\",\n        sector: \"Energy\",\n        industry: \"Oil & Gas\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"EOG\",\n        name: \"EOG Resources Inc.\",\n        sector: \"Energy\",\n        industry: \"Oil & Gas\",\n        exchange: \"NYSE\"\n    },\n    // Industrials\n    {\n        symbol: \"BA\",\n        name: \"Boeing Company\",\n        sector: \"Industrials\",\n        industry: \"Aerospace\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"CAT\",\n        name: \"Caterpillar Inc.\",\n        sector: \"Industrials\",\n        industry: \"Heavy Machinery\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"GE\",\n        name: \"General Electric Company\",\n        sector: \"Industrials\",\n        industry: \"Conglomerate\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"MMM\",\n        name: \"3M Company\",\n        sector: \"Industrials\",\n        industry: \"Diversified Manufacturing\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"UPS\",\n        name: \"United Parcel Service Inc.\",\n        sector: \"Industrials\",\n        industry: \"Logistics\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"HON\",\n        name: \"Honeywell International Inc.\",\n        sector: \"Industrials\",\n        industry: \"Aerospace\",\n        exchange: \"NASDAQ\"\n    },\n    // Utilities\n    {\n        symbol: \"NEE\",\n        name: \"NextEra Energy Inc.\",\n        sector: \"Utilities\",\n        industry: \"Electric Utilities\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"DUK\",\n        name: \"Duke Energy Corporation\",\n        sector: \"Utilities\",\n        industry: \"Electric Utilities\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"SO\",\n        name: \"Southern Company\",\n        sector: \"Utilities\",\n        industry: \"Electric Utilities\",\n        exchange: \"NYSE\"\n    },\n    // Real Estate\n    {\n        symbol: \"AMT\",\n        name: \"American Tower Corporation\",\n        sector: \"Real Estate\",\n        industry: \"REITs\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"PLD\",\n        name: \"Prologis Inc.\",\n        sector: \"Real Estate\",\n        industry: \"REITs\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"CCI\",\n        name: \"Crown Castle Inc.\",\n        sector: \"Real Estate\",\n        industry: \"REITs\",\n        exchange: \"NYSE\"\n    },\n    // Materials\n    {\n        symbol: \"LIN\",\n        name: \"Linde plc\",\n        sector: \"Materials\",\n        industry: \"Chemicals\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"APD\",\n        name: \"Air Products and Chemicals Inc.\",\n        sector: \"Materials\",\n        industry: \"Chemicals\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"SHW\",\n        name: \"Sherwin-Williams Company\",\n        sector: \"Materials\",\n        industry: \"Chemicals\",\n        exchange: \"NYSE\"\n    },\n    // ETFs (Popular ones that track S&P 500)\n    {\n        symbol: \"SPY\",\n        name: \"SPDR S&P 500 ETF Trust\",\n        sector: \"ETF\",\n        industry: \"Index Fund\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"VOO\",\n        name: \"Vanguard S&P 500 ETF\",\n        sector: \"ETF\",\n        industry: \"Index Fund\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"IVV\",\n        name: \"iShares Core S&P 500 ETF\",\n        sector: \"ETF\",\n        industry: \"Index Fund\",\n        exchange: \"NYSE\"\n    },\n    {\n        symbol: \"QQQ\",\n        name: \"Invesco QQQ Trust ETF\",\n        sector: \"ETF\",\n        industry: \"Tech Index Fund\",\n        exchange: \"NASDAQ\"\n    },\n    {\n        symbol: \"VTI\",\n        name: \"Vanguard Total Stock Market ETF\",\n        sector: \"ETF\",\n        industry: \"Total Market Fund\",\n        exchange: \"NYSE\"\n    }\n];\nclass SP500DataService {\n    constructor(){\n        this.companies = new Map();\n        // Initialize companies map\n        SP500_COMPANIES.forEach((company)=>{\n            this.companies.set(company.symbol, company);\n        });\n    }\n    static getInstance() {\n        if (!SP500DataService.instance) {\n            SP500DataService.instance = new SP500DataService();\n        }\n        return SP500DataService.instance;\n    }\n    // Get all S&P 500 companies\n    getAllCompanies() {\n        return SP500_COMPANIES;\n    }\n    // Get company by symbol\n    getCompany(symbol) {\n        return this.companies.get(symbol.toUpperCase());\n    }\n    // Search companies by symbol or name\n    searchCompanies(query, limit = 10) {\n        const upperQuery = query.toUpperCase();\n        const results = [];\n        for (const company of SP500_COMPANIES){\n            let score = 0;\n            // Exact symbol match gets highest score\n            if (company.symbol === upperQuery) {\n                score = 1000;\n            } else if (company.symbol.startsWith(upperQuery)) {\n                score = 900;\n            } else if (company.symbol.includes(upperQuery)) {\n                score = 800;\n            } else if (company.name.toLowerCase().startsWith(query.toLowerCase())) {\n                score = 700;\n            } else if (company.name.toLowerCase().includes(query.toLowerCase())) {\n                score = 600;\n            } else if (company.sector.toLowerCase().includes(query.toLowerCase())) {\n                score = 500;\n            } else if (company.industry.toLowerCase().includes(query.toLowerCase())) {\n                score = 400;\n            }\n            if (score > 0) {\n                results.push({\n                    company,\n                    score\n                });\n            }\n        }\n        return results.sort((a, b)=>b.score - a.score).slice(0, limit).map((result)=>result.company);\n    }\n    // Get popular/most traded stocks\n    getPopularStocks() {\n        const popularSymbols = [\n            \"SPY\",\n            \"QQQ\",\n            \"AAPL\",\n            \"MSFT\",\n            \"GOOGL\",\n            \"AMZN\",\n            \"TSLA\",\n            \"META\",\n            \"NVDA\",\n            \"NFLX\",\n            \"JPM\",\n            \"V\",\n            \"UNH\",\n            \"HD\",\n            \"PG\",\n            \"JNJ\",\n            \"BAC\",\n            \"XOM\"\n        ];\n        return popularSymbols.map((symbol)=>this.companies.get(symbol)).filter((company)=>company !== undefined);\n    }\n    // Get companies by sector\n    getCompaniesBySector(sector) {\n        return SP500_COMPANIES.filter((company)=>company.sector.toLowerCase() === sector.toLowerCase());\n    }\n    // Fetch live quote data using Yahoo Finance\n    async fetchLiveQuote(symbol) {\n        try {\n            const quote = await yahoo_finance2__WEBPACK_IMPORTED_MODULE_0__[\"default\"].quote(symbol);\n            const company = this.getCompany(symbol);\n            if (!quote || !quote.regularMarketPrice) {\n                return null;\n            }\n            return {\n                symbol: quote.symbol || symbol,\n                name: company?.name || quote.longName || quote.shortName || `${symbol} Company`,\n                price: quote.regularMarketPrice,\n                change: quote.regularMarketChange || 0,\n                changePercent: quote.regularMarketChangePercent || 0,\n                volume: quote.regularMarketVolume || 0,\n                marketCap: quote.marketCap,\n                pe: quote.trailingPE,\n                high52Week: quote.fiftyTwoWeekHigh,\n                low52Week: quote.fiftyTwoWeekLow,\n                previousClose: quote.regularMarketPreviousClose,\n                dayHigh: quote.regularMarketDayHigh,\n                dayLow: quote.regularMarketDayLow,\n                avgVolume: quote.averageDailyVolume3Month,\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            console.error(`Failed to fetch live quote for ${symbol}:`, error);\n            return null;\n        }\n    }\n    // Fetch multiple quotes at once\n    async fetchMultipleQuotes(symbols) {\n        const quotes = new Map();\n        try {\n            const results = await Promise.allSettled(symbols.map((symbol)=>this.fetchLiveQuote(symbol)));\n            results.forEach((result, index)=>{\n                if (result.status === \"fulfilled\" && result.value) {\n                    quotes.set(symbols[index], result.value);\n                }\n            });\n        } catch (error) {\n            console.error(\"Failed to fetch multiple quotes:\", error);\n        }\n        return quotes;\n    }\n    // Generate enhanced mock data based on real company info\n    generateEnhancedMockQuote(symbol) {\n        const company = this.getCompany(symbol);\n        if (!company) {\n            // If not in S&P 500, generate basic mock data\n            return this.generateBasicMockQuote(symbol);\n        }\n        // Sector-based price ranges for more realistic mock data\n        const sectorPriceRanges = {\n            \"Technology\": {\n                min: 50,\n                max: 500\n            },\n            \"Healthcare\": {\n                min: 80,\n                max: 400\n            },\n            \"Financial Services\": {\n                min: 30,\n                max: 200\n            },\n            \"Consumer Discretionary\": {\n                min: 40,\n                max: 300\n            },\n            \"Consumer Staples\": {\n                min: 60,\n                max: 150\n            },\n            \"Energy\": {\n                min: 40,\n                max: 120\n            },\n            \"Industrials\": {\n                min: 50,\n                max: 250\n            },\n            \"Utilities\": {\n                min: 60,\n                max: 100\n            },\n            \"Real Estate\": {\n                min: 80,\n                max: 200\n            },\n            \"Materials\": {\n                min: 70,\n                max: 180\n            },\n            \"ETF\": {\n                min: 200,\n                max: 500\n            },\n            \"Communication Services\": {\n                min: 30,\n                max: 200\n            }\n        };\n        const priceRange = sectorPriceRanges[company.sector] || {\n            min: 50,\n            max: 200\n        };\n        const basePrice = Math.random() * (priceRange.max - priceRange.min) + priceRange.min;\n        const dailyChange = (Math.random() - 0.5) * 0.06; // ±3% daily change\n        const changeAmount = basePrice * dailyChange;\n        return {\n            symbol: company.symbol,\n            name: company.name,\n            price: Math.round(basePrice * 100) / 100,\n            change: Math.round(changeAmount * 100) / 100,\n            changePercent: Math.round(dailyChange * 10000) / 100,\n            volume: this.generateRealisticVolume(company.sector),\n            marketCap: this.generateRealisticMarketCap(company.sector),\n            pe: this.generateRealisticPE(company.sector),\n            high52Week: Math.round(basePrice * (1 + Math.random() * 0.5) * 100) / 100,\n            low52Week: Math.round(basePrice * (1 - Math.random() * 0.3) * 100) / 100,\n            previousClose: Math.round((basePrice - changeAmount) * 100) / 100,\n            dayHigh: Math.round(basePrice * (1 + Math.random() * 0.02) * 100) / 100,\n            dayLow: Math.round(basePrice * (1 - Math.random() * 0.02) * 100) / 100,\n            avgVolume: this.generateRealisticVolume(company.sector) * 0.8,\n            timestamp: new Date().toISOString()\n        };\n    }\n    generateBasicMockQuote(symbol) {\n        const basePrice = Math.random() * 150 + 50; // $50-$200\n        const dailyChange = (Math.random() - 0.5) * 0.06;\n        const changeAmount = basePrice * dailyChange;\n        return {\n            symbol,\n            name: `${symbol} Company`,\n            price: Math.round(basePrice * 100) / 100,\n            change: Math.round(changeAmount * 100) / 100,\n            changePercent: Math.round(dailyChange * 10000) / 100,\n            volume: Math.floor(Math.random() * 10000000 + 1000000),\n            timestamp: new Date().toISOString()\n        };\n    }\n    generateRealisticVolume(sector) {\n        const sectorVolumeRanges = {\n            \"Technology\": {\n                min: 10000000,\n                max: 100000000\n            },\n            \"ETF\": {\n                min: 50000000,\n                max: 200000000\n            },\n            \"Financial Services\": {\n                min: 5000000,\n                max: 50000000\n            },\n            \"Healthcare\": {\n                min: 3000000,\n                max: 30000000\n            },\n            \"Consumer Discretionary\": {\n                min: 5000000,\n                max: 40000000\n            },\n            \"Consumer Staples\": {\n                min: 2000000,\n                max: 20000000\n            },\n            \"Energy\": {\n                min: 8000000,\n                max: 60000000\n            },\n            \"Industrials\": {\n                min: 2000000,\n                max: 25000000\n            },\n            \"Utilities\": {\n                min: 1000000,\n                max: 10000000\n            },\n            \"Real Estate\": {\n                min: 1000000,\n                max: 15000000\n            },\n            \"Materials\": {\n                min: 2000000,\n                max: 20000000\n            },\n            \"Communication Services\": {\n                min: 5000000,\n                max: 40000000\n            }\n        };\n        const range = sectorVolumeRanges[sector] || {\n            min: 1000000,\n            max: 20000000\n        };\n        return Math.floor(Math.random() * (range.max - range.min) + range.min);\n    }\n    generateRealisticMarketCap(sector) {\n        const sectorMarketCapRanges = {\n            \"Technology\": {\n                min: 100000000000,\n                max: 3000000000000\n            },\n            \"ETF\": {\n                min: 50000000000,\n                max: 500000000000\n            },\n            \"Financial Services\": {\n                min: 50000000000,\n                max: 500000000000\n            },\n            \"Healthcare\": {\n                min: 30000000000,\n                max: 400000000000\n            },\n            \"Consumer Discretionary\": {\n                min: 20000000000,\n                max: 300000000000\n            },\n            \"Consumer Staples\": {\n                min: 40000000000,\n                max: 250000000000\n            },\n            \"Energy\": {\n                min: 30000000000,\n                max: 400000000000\n            },\n            \"Industrials\": {\n                min: 20000000000,\n                max: 200000000000\n            },\n            \"Utilities\": {\n                min: 15000000000,\n                max: 100000000000\n            },\n            \"Real Estate\": {\n                min: 10000000000,\n                max: 80000000000\n            },\n            \"Materials\": {\n                min: 15000000000,\n                max: 150000000000\n            },\n            \"Communication Services\": {\n                min: 20000000000,\n                max: 300000000000\n            }\n        };\n        const range = sectorMarketCapRanges[sector] || {\n            min: 10000000000,\n            max: 100000000000\n        };\n        return Math.floor(Math.random() * (range.max - range.min) + range.min);\n    }\n    generateRealisticPE(sector) {\n        const sectorPERanges = {\n            \"Technology\": {\n                min: 15,\n                max: 40\n            },\n            \"ETF\": {\n                min: 18,\n                max: 25\n            },\n            \"Financial Services\": {\n                min: 8,\n                max: 15\n            },\n            \"Healthcare\": {\n                min: 12,\n                max: 30\n            },\n            \"Consumer Discretionary\": {\n                min: 10,\n                max: 25\n            },\n            \"Consumer Staples\": {\n                min: 15,\n                max: 25\n            },\n            \"Energy\": {\n                min: 8,\n                max: 20\n            },\n            \"Industrials\": {\n                min: 12,\n                max: 22\n            },\n            \"Utilities\": {\n                min: 18,\n                max: 25\n            },\n            \"Real Estate\": {\n                min: 15,\n                max: 30\n            },\n            \"Materials\": {\n                min: 10,\n                max: 18\n            },\n            \"Communication Services\": {\n                min: 12,\n                max: 25\n            }\n        };\n        const range = sectorPERanges[sector] || {\n            min: 10,\n            max: 25\n        };\n        return Math.round((Math.random() * (range.max - range.min) + range.min) * 100) / 100;\n    }\n}\n// Export singleton instance\nconst sp500DataService = SP500DataService.getInstance();\n// Utility functions\nfunction getAllSP500Companies() {\n    return sp500DataService.getAllCompanies();\n}\nfunction searchSP500Companies(query, limit) {\n    return sp500DataService.searchCompanies(query, limit);\n}\nfunction getPopularSP500Stocks() {\n    return sp500DataService.getPopularStocks();\n}\nasync function fetchLiveQuoteData(symbol) {\n    // Try to fetch live data first\n    const liveData = await sp500DataService.fetchLiveQuote(symbol);\n    if (liveData) {\n        return liveData;\n    }\n    // Fall back to enhanced mock data based on real S&P 500 company info\n    return sp500DataService.generateEnhancedMockQuote(symbol);\n}\nasync function fetchHybridQuoteData(symbol) {\n    const liveData = await fetchLiveQuoteData(symbol);\n    if (liveData) {\n        return liveData;\n    }\n    // This should not happen as generateEnhancedMockQuote always returns data\n    return sp500DataService.generateEnhancedMockQuote(symbol);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/data/sp500Service.ts\n");

/***/ }),

/***/ "(rsc)/./lib/pricing/blackScholes.ts":
/*!*************************************!*\
  !*** ./lib/pricing/blackScholes.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blackScholes: () => (/* binding */ blackScholes),\n/* harmony export */   findATMStrike: () => (/* binding */ findATMStrike),\n/* harmony export */   impliedVolBrent: () => (/* binding */ impliedVolBrent)\n/* harmony export */ });\n/**\n * Black-Scholes pricing model with Greeks calculation\n * Used for options pricing and implied volatility calculations\n */ /**\n * Standard normal cumulative distribution function\n */ function normCDF(x) {\n    const a1 = 0.254829592;\n    const a2 = -0.284496736;\n    const a3 = 1.421413741;\n    const a4 = -1.453152027;\n    const a5 = 1.061405429;\n    const p = 0.3275911;\n    const sign = x < 0 ? -1 : 1;\n    x = Math.abs(x) / Math.sqrt(2.0);\n    const t = 1.0 / (1.0 + p * x);\n    const y = 1.0 - ((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\n    return 0.5 * (1.0 + sign * y);\n}\n/**\n * Standard normal probability density function\n */ function normPDF(x) {\n    return Math.exp(-0.5 * x * x) / Math.sqrt(2 * Math.PI);\n}\n/**\n * Calculate d1 and d2 parameters for Black-Scholes\n */ function calculateD1D2(params) {\n    const { S, K, T, r, q, iv } = params;\n    if (T <= 0 || iv <= 0) {\n        throw new Error(\"Time to expiration and volatility must be positive\");\n    }\n    const d1 = (Math.log(S / K) + (r - q + 0.5 * iv * iv) * T) / (iv * Math.sqrt(T));\n    const d2 = d1 - iv * Math.sqrt(T);\n    return {\n        d1,\n        d2\n    };\n}\n/**\n * Calculate Black-Scholes option prices and Greeks\n */ function blackScholes(params) {\n    const { S, K, T, r, q } = params;\n    if (S <= 0 || K <= 0) {\n        throw new Error(\"Stock price and strike price must be positive\");\n    }\n    const { d1, d2 } = calculateD1D2(params);\n    const Nd1 = normCDF(d1);\n    const Nd2 = normCDF(d2);\n    const NegD1 = normCDF(-d1);\n    const NegD2 = normCDF(-d2);\n    const nd1 = normPDF(d1);\n    const discountFactor = Math.exp(-r * T);\n    const dividendFactor = Math.exp(-q * T);\n    // Option prices\n    const call = S * dividendFactor * Nd1 - K * discountFactor * Nd2;\n    const put = K * discountFactor * NegD2 - S * dividendFactor * NegD1;\n    // Greeks\n    const delta = {\n        call: dividendFactor * Nd1,\n        put: -dividendFactor * NegD1\n    };\n    const gamma = dividendFactor * nd1 / (S * params.iv * Math.sqrt(T));\n    const theta = {\n        call: (-S * dividendFactor * nd1 * params.iv / (2 * Math.sqrt(T)) - r * K * discountFactor * Nd2 + q * S * dividendFactor * Nd1) / 365,\n        put: (-S * dividendFactor * nd1 * params.iv / (2 * Math.sqrt(T)) + r * K * discountFactor * NegD2 - q * S * dividendFactor * NegD1) / 365\n    };\n    const vega = S * dividendFactor * nd1 * Math.sqrt(T) / 100;\n    const rho = {\n        call: K * T * discountFactor * Nd2 / 100,\n        put: -K * T * discountFactor * NegD2 / 100\n    };\n    return {\n        call: Math.max(0, call),\n        put: Math.max(0, put),\n        delta,\n        gamma,\n        theta,\n        vega,\n        rho\n    };\n}\n/**\n * Calculate implied volatility using Brent's method\n */ function impliedVolBrent(marketPrice, params, isCall = true, tolerance = 1e-6, maxIterations = 100) {\n    if (marketPrice <= 0) {\n        throw new Error(\"Market price must be positive\");\n    }\n    const { S, K, T } = params;\n    // Intrinsic value bounds\n    const intrinsic = isCall ? Math.max(0, S - K) : Math.max(0, K - S);\n    if (marketPrice <= intrinsic) {\n        return 0.01; // Minimum volatility\n    }\n    // Initial bounds for volatility search\n    let volLow = 0.01;\n    let volHigh = 5.0;\n    // Test bounds\n    const testLow = blackScholes({\n        ...params,\n        iv: volLow\n    });\n    const testHigh = blackScholes({\n        ...params,\n        iv: volHigh\n    });\n    const priceLow = isCall ? testLow.call : testLow.put;\n    const priceHigh = isCall ? testHigh.call : testHigh.put;\n    if (marketPrice < priceLow) return volLow;\n    if (marketPrice > priceHigh) return volHigh;\n    // Brent's method\n    let a = volLow;\n    let b = volHigh;\n    let c = volHigh;\n    let fa = priceLow - marketPrice;\n    let fb = priceHigh - marketPrice;\n    let fc = fb;\n    for(let iter = 0; iter < maxIterations; iter++){\n        if (Math.abs(fb) < tolerance) {\n            return b;\n        }\n        if (Math.sign(fa) === Math.sign(fb)) {\n            a = c;\n            fa = fc;\n        }\n        if (Math.abs(fa) < Math.abs(fb)) {\n            [a, b] = [\n                b,\n                a\n            ];\n            [fa, fb] = [\n                fb,\n                fa\n            ];\n        }\n        const tol = 2 * tolerance * Math.abs(b) + tolerance;\n        const m = (a - b) / 2;\n        if (Math.abs(m) < tol) {\n            return b;\n        }\n        let p, q, r, s;\n        if (Math.abs(c - b) < tolerance || Math.abs(fc - fb) < tolerance) {\n            // Bisection\n            p = m;\n            q = 1;\n        } else {\n            // Inverse quadratic interpolation\n            s = fb / fc;\n            if (Math.abs(a - c) < tolerance) {\n                p = 2 * m * s;\n                q = 1 - s;\n            } else {\n                q = fc / fa;\n                r = fb / fa;\n                p = s * (2 * m * q * (q - r) - (b - c) * (r - 1));\n                q = (q - 1) * (r - 1) * (s - 1);\n            }\n        }\n        if (p > 0) q = -q;\n        else p = -p;\n        if (2 * p < Math.min(3 * m * q - Math.abs(tol * q), Math.abs((c - b) * q))) {\n            c = b;\n            fc = fb;\n            b += p / q;\n        } else {\n            c = b;\n            fc = fb;\n            b += m;\n        }\n        const bsResult = blackScholes({\n            ...params,\n            iv: b\n        });\n        fb = (isCall ? bsResult.call : bsResult.put) - marketPrice;\n    }\n    return b;\n}\n/**\n * Find at-the-money strike and calculate ATM implied volatility\n */ function findATMStrike(strikes, spot) {\n    if (strikes.length === 0) {\n        throw new Error(\"No strikes provided\");\n    }\n    return strikes.reduce((closest, strike)=>Math.abs(strike - spot) < Math.abs(closest - spot) ? strike : closest);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SSxLQUFLRDtZQUNMSCxLQUFLbkQsSUFBSWdCO1FBQ1gsT0FBTztZQUNMb0MsSUFBSUQ7WUFDSkksS0FBS0Q7WUFDTEgsS0FBS087UUFDUDtRQUVBLE1BQU1HLFdBQVd2QyxhQUFhO1lBQUUsR0FBR1gsTUFBTTtZQUFFTSxJQUFJa0M7UUFBRTtRQUNqREcsS0FBSyxDQUFDZCxTQUFTcUIsU0FBUy9CLElBQUksR0FBRytCLFNBQVM5QixHQUFHLElBQUlRO0lBQ2pEO0lBRUEsT0FBT1k7QUFDVDtBQUVBOztDQUVDLEdBQ00sU0FBU1csY0FBY0MsT0FBaUIsRUFBRUMsSUFBWTtJQUMzRCxJQUFJRCxRQUFRRSxNQUFNLEtBQUssR0FBRztRQUN4QixNQUFNLElBQUkvQyxNQUFNO0lBQ2xCO0lBRUEsT0FBTzZDLFFBQVFHLE1BQU0sQ0FBQyxDQUFDQyxTQUFTQyxTQUM5QmxFLEtBQUtDLEdBQUcsQ0FBQ2lFLFNBQVNKLFFBQVE5RCxLQUFLQyxHQUFHLENBQUNnRSxVQUFVSCxRQUFRSSxTQUFTRDtBQUVsRSIsInNvdXJjZXMiOlsid2VicGFjazovL3F1YW50aXYvLi9saWIvcHJpY2luZy9ibGFja1NjaG9sZXMudHM/ZGM2YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEJsYWNrLVNjaG9sZXMgcHJpY2luZyBtb2RlbCB3aXRoIEdyZWVrcyBjYWxjdWxhdGlvblxuICogVXNlZCBmb3Igb3B0aW9ucyBwcmljaW5nIGFuZCBpbXBsaWVkIHZvbGF0aWxpdHkgY2FsY3VsYXRpb25zXG4gKi9cblxuZXhwb3J0IGludGVyZmFjZSBCU1BhcmFtcyB7XG4gIFM6IG51bWJlcjsgIC8vIEN1cnJlbnQgc3RvY2sgcHJpY2VcbiAgSzogbnVtYmVyOyAgLy8gU3RyaWtlIHByaWNlXG4gIFQ6IG51bWJlcjsgIC8vIFRpbWUgdG8gZXhwaXJhdGlvbiAoaW4geWVhcnMpXG4gIHI6IG51bWJlcjsgIC8vIFJpc2stZnJlZSByYXRlXG4gIHE6IG51bWJlcjsgIC8vIERpdmlkZW5kIHlpZWxkIChjYXJyeSByYXRlKVxuICBpdjogbnVtYmVyOyAvLyBJbXBsaWVkIHZvbGF0aWxpdHlcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCU1Jlc3VsdCB7XG4gIGNhbGw6IG51bWJlcjtcbiAgcHV0OiBudW1iZXI7XG4gIGRlbHRhOiB7IGNhbGw6IG51bWJlcjsgcHV0OiBudW1iZXIgfTtcbiAgZ2FtbWE6IG51bWJlcjtcbiAgdGhldGE6IHsgY2FsbDogbnVtYmVyOyBwdXQ6IG51bWJlciB9O1xuICB2ZWdhOiBudW1iZXI7XG4gIHJobzogeyBjYWxsOiBudW1iZXI7IHB1dDogbnVtYmVyIH07XG59XG5cbi8qKlxuICogU3RhbmRhcmQgbm9ybWFsIGN1bXVsYXRpdmUgZGlzdHJpYnV0aW9uIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIG5vcm1DREYoeDogbnVtYmVyKTogbnVtYmVyIHtcbiAgY29uc3QgYTEgPSAwLjI1NDgyOTU5MjtcbiAgY29uc3QgYTIgPSAtMC4yODQ0OTY3MzY7XG4gIGNvbnN0IGEzID0gMS40MjE0MTM3NDE7XG4gIGNvbnN0IGE0ID0gLTEuNDUzMTUyMDI3O1xuICBjb25zdCBhNSA9IDEuMDYxNDA1NDI5O1xuICBjb25zdCBwID0gMC4zMjc1OTExO1xuXG4gIGNvbnN0IHNpZ24gPSB4IDwgMCA/IC0xIDogMTtcbiAgeCA9IE1hdGguYWJzKHgpIC8gTWF0aC5zcXJ0KDIuMCk7XG5cbiAgY29uc3QgdCA9IDEuMCAvICgxLjAgKyBwICogeCk7XG4gIGNvbnN0IHkgPSAxLjAgLSAoKCgoKGE1ICogdCArIGE0KSAqIHQpICsgYTMpICogdCArIGEyKSAqIHQgKyBhMSkgKiB0ICogTWF0aC5leHAoLXggKiB4KTtcblxuICByZXR1cm4gMC41ICogKDEuMCArIHNpZ24gKiB5KTtcbn1cblxuLyoqXG4gKiBTdGFuZGFyZCBub3JtYWwgcHJvYmFiaWxpdHkgZGVuc2l0eSBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBub3JtUERGKHg6IG51bWJlcik6IG51bWJlciB7XG4gIHJldHVybiBNYXRoLmV4cCgtMC41ICogeCAqIHgpIC8gTWF0aC5zcXJ0KDIgKiBNYXRoLlBJKTtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGUgZDEgYW5kIGQyIHBhcmFtZXRlcnMgZm9yIEJsYWNrLVNjaG9sZXNcbiAqL1xuZnVuY3Rpb24gY2FsY3VsYXRlRDFEMihwYXJhbXM6IEJTUGFyYW1zKTogeyBkMTogbnVtYmVyOyBkMjogbnVtYmVyIH0ge1xuICBjb25zdCB7IFMsIEssIFQsIHIsIHEsIGl2IH0gPSBwYXJhbXM7XG4gIFxuICBpZiAoVCA8PSAwIHx8IGl2IDw9IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RpbWUgdG8gZXhwaXJhdGlvbiBhbmQgdm9sYXRpbGl0eSBtdXN0IGJlIHBvc2l0aXZlJyk7XG4gIH1cblxuICBjb25zdCBkMSA9IChNYXRoLmxvZyhTIC8gSykgKyAociAtIHEgKyAwLjUgKiBpdiAqIGl2KSAqIFQpIC8gKGl2ICogTWF0aC5zcXJ0KFQpKTtcbiAgY29uc3QgZDIgPSBkMSAtIGl2ICogTWF0aC5zcXJ0KFQpO1xuXG4gIHJldHVybiB7IGQxLCBkMiB9O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZSBCbGFjay1TY2hvbGVzIG9wdGlvbiBwcmljZXMgYW5kIEdyZWVrc1xuICovXG5leHBvcnQgZnVuY3Rpb24gYmxhY2tTY2hvbGVzKHBhcmFtczogQlNQYXJhbXMpOiBCU1Jlc3VsdCB7XG4gIGNvbnN0IHsgUywgSywgVCwgciwgcSB9ID0gcGFyYW1zO1xuICBcbiAgaWYgKFMgPD0gMCB8fCBLIDw9IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1N0b2NrIHByaWNlIGFuZCBzdHJpa2UgcHJpY2UgbXVzdCBiZSBwb3NpdGl2ZScpO1xuICB9XG5cbiAgY29uc3QgeyBkMSwgZDIgfSA9IGNhbGN1bGF0ZUQxRDIocGFyYW1zKTtcbiAgXG4gIGNvbnN0IE5kMSA9IG5vcm1DREYoZDEpO1xuICBjb25zdCBOZDIgPSBub3JtQ0RGKGQyKTtcbiAgY29uc3QgTmVnRDEgPSBub3JtQ0RGKC1kMSk7XG4gIGNvbnN0IE5lZ0QyID0gbm9ybUNERigtZDIpO1xuICBjb25zdCBuZDEgPSBub3JtUERGKGQxKTtcblxuICBjb25zdCBkaXNjb3VudEZhY3RvciA9IE1hdGguZXhwKC1yICogVCk7XG4gIGNvbnN0IGRpdmlkZW5kRmFjdG9yID0gTWF0aC5leHAoLXEgKiBUKTtcblxuICAvLyBPcHRpb24gcHJpY2VzXG4gIGNvbnN0IGNhbGwgPSBTICogZGl2aWRlbmRGYWN0b3IgKiBOZDEgLSBLICogZGlzY291bnRGYWN0b3IgKiBOZDI7XG4gIGNvbnN0IHB1dCA9IEsgKiBkaXNjb3VudEZhY3RvciAqIE5lZ0QyIC0gUyAqIGRpdmlkZW5kRmFjdG9yICogTmVnRDE7XG5cbiAgLy8gR3JlZWtzXG4gIGNvbnN0IGRlbHRhID0ge1xuICAgIGNhbGw6IGRpdmlkZW5kRmFjdG9yICogTmQxLFxuICAgIHB1dDogLWRpdmlkZW5kRmFjdG9yICogTmVnRDFcbiAgfTtcblxuICBjb25zdCBnYW1tYSA9IChkaXZpZGVuZEZhY3RvciAqIG5kMSkgLyAoUyAqIHBhcmFtcy5pdiAqIE1hdGguc3FydChUKSk7XG4gIFxuICBjb25zdCB0aGV0YSA9IHtcbiAgICBjYWxsOiAoLVMgKiBkaXZpZGVuZEZhY3RvciAqIG5kMSAqIHBhcmFtcy5pdiAvICgyICogTWF0aC5zcXJ0KFQpKSBcbiAgICAgICAgICAgLSByICogSyAqIGRpc2NvdW50RmFjdG9yICogTmQyIFxuICAgICAgICAgICArIHEgKiBTICogZGl2aWRlbmRGYWN0b3IgKiBOZDEpIC8gMzY1LFxuICAgIHB1dDogKC1TICogZGl2aWRlbmRGYWN0b3IgKiBuZDEgKiBwYXJhbXMuaXYgLyAoMiAqIE1hdGguc3FydChUKSkgXG4gICAgICAgICAgKyByICogSyAqIGRpc2NvdW50RmFjdG9yICogTmVnRDIgXG4gICAgICAgICAgLSBxICogUyAqIGRpdmlkZW5kRmFjdG9yICogTmVnRDEpIC8gMzY1XG4gIH07XG5cbiAgY29uc3QgdmVnYSA9IChTICogZGl2aWRlbmRGYWN0b3IgKiBuZDEgKiBNYXRoLnNxcnQoVCkpIC8gMTAwO1xuXG4gIGNvbnN0IHJobyA9IHtcbiAgICBjYWxsOiAoSyAqIFQgKiBkaXNjb3VudEZhY3RvciAqIE5kMikgLyAxMDAsXG4gICAgcHV0OiAoLUsgKiBUICogZGlzY291bnRGYWN0b3IgKiBOZWdEMikgLyAxMDBcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGNhbGw6IE1hdGgubWF4KDAsIGNhbGwpLFxuICAgIHB1dDogTWF0aC5tYXgoMCwgcHV0KSxcbiAgICBkZWx0YSxcbiAgICBnYW1tYSxcbiAgICB0aGV0YSxcbiAgICB2ZWdhLFxuICAgIHJob1xuICB9O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZSBpbXBsaWVkIHZvbGF0aWxpdHkgdXNpbmcgQnJlbnQncyBtZXRob2RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGltcGxpZWRWb2xCcmVudChcbiAgbWFya2V0UHJpY2U6IG51bWJlcixcbiAgcGFyYW1zOiBPbWl0PEJTUGFyYW1zLCAnaXYnPixcbiAgaXNDYWxsOiBib29sZWFuID0gdHJ1ZSxcbiAgdG9sZXJhbmNlOiBudW1iZXIgPSAxZS02LFxuICBtYXhJdGVyYXRpb25zOiBudW1iZXIgPSAxMDBcbik6IG51bWJlciB7XG4gIGlmIChtYXJrZXRQcmljZSA8PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNYXJrZXQgcHJpY2UgbXVzdCBiZSBwb3NpdGl2ZScpO1xuICB9XG5cbiAgY29uc3QgeyBTLCBLLCBUIH0gPSBwYXJhbXM7XG4gIFxuICAvLyBJbnRyaW5zaWMgdmFsdWUgYm91bmRzXG4gIGNvbnN0IGludHJpbnNpYyA9IGlzQ2FsbCA/IE1hdGgubWF4KDAsIFMgLSBLKSA6IE1hdGgubWF4KDAsIEsgLSBTKTtcbiAgaWYgKG1hcmtldFByaWNlIDw9IGludHJpbnNpYykge1xuICAgIHJldHVybiAwLjAxOyAvLyBNaW5pbXVtIHZvbGF0aWxpdHlcbiAgfVxuXG4gIC8vIEluaXRpYWwgYm91bmRzIGZvciB2b2xhdGlsaXR5IHNlYXJjaFxuICBsZXQgdm9sTG93ID0gMC4wMTtcbiAgbGV0IHZvbEhpZ2ggPSA1LjA7XG5cbiAgLy8gVGVzdCBib3VuZHNcbiAgY29uc3QgdGVzdExvdyA9IGJsYWNrU2Nob2xlcyh7IC4uLnBhcmFtcywgaXY6IHZvbExvdyB9KTtcbiAgY29uc3QgdGVzdEhpZ2ggPSBibGFja1NjaG9sZXMoeyAuLi5wYXJhbXMsIGl2OiB2b2xIaWdoIH0pO1xuICBcbiAgY29uc3QgcHJpY2VMb3cgPSBpc0NhbGwgPyB0ZXN0TG93LmNhbGwgOiB0ZXN0TG93LnB1dDtcbiAgY29uc3QgcHJpY2VIaWdoID0gaXNDYWxsID8gdGVzdEhpZ2guY2FsbCA6IHRlc3RIaWdoLnB1dDtcblxuICBpZiAobWFya2V0UHJpY2UgPCBwcmljZUxvdykgcmV0dXJuIHZvbExvdztcbiAgaWYgKG1hcmtldFByaWNlID4gcHJpY2VIaWdoKSByZXR1cm4gdm9sSGlnaDtcblxuICAvLyBCcmVudCdzIG1ldGhvZFxuICBsZXQgYSA9IHZvbExvdztcbiAgbGV0IGIgPSB2b2xIaWdoO1xuICBsZXQgYyA9IHZvbEhpZ2g7XG4gIFxuICBsZXQgZmEgPSBwcmljZUxvdyAtIG1hcmtldFByaWNlO1xuICBsZXQgZmIgPSBwcmljZUhpZ2ggLSBtYXJrZXRQcmljZTtcbiAgbGV0IGZjID0gZmI7XG5cbiAgZm9yIChsZXQgaXRlciA9IDA7IGl0ZXIgPCBtYXhJdGVyYXRpb25zOyBpdGVyKyspIHtcbiAgICBpZiAoTWF0aC5hYnMoZmIpIDwgdG9sZXJhbmNlKSB7XG4gICAgICByZXR1cm4gYjtcbiAgICB9XG5cbiAgICBpZiAoTWF0aC5zaWduKGZhKSA9PT0gTWF0aC5zaWduKGZiKSkge1xuICAgICAgYSA9IGM7XG4gICAgICBmYSA9IGZjO1xuICAgIH1cblxuICAgIGlmIChNYXRoLmFicyhmYSkgPCBNYXRoLmFicyhmYikpIHtcbiAgICAgIFthLCBiXSA9IFtiLCBhXTtcbiAgICAgIFtmYSwgZmJdID0gW2ZiLCBmYV07XG4gICAgfVxuXG4gICAgY29uc3QgdG9sID0gMiAqIHRvbGVyYW5jZSAqIE1hdGguYWJzKGIpICsgdG9sZXJhbmNlO1xuICAgIGNvbnN0IG0gPSAoYSAtIGIpIC8gMjtcblxuICAgIGlmIChNYXRoLmFicyhtKSA8IHRvbCkge1xuICAgICAgcmV0dXJuIGI7XG4gICAgfVxuXG4gICAgbGV0IHAsIHEsIHIsIHM7XG4gICAgaWYgKE1hdGguYWJzKGMgLSBiKSA8IHRvbGVyYW5jZSB8fCBNYXRoLmFicyhmYyAtIGZiKSA8IHRvbGVyYW5jZSkge1xuICAgICAgLy8gQmlzZWN0aW9uXG4gICAgICBwID0gbTtcbiAgICAgIHEgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJbnZlcnNlIHF1YWRyYXRpYyBpbnRlcnBvbGF0aW9uXG4gICAgICBzID0gZmIgLyBmYztcbiAgICAgIGlmIChNYXRoLmFicyhhIC0gYykgPCB0b2xlcmFuY2UpIHtcbiAgICAgICAgcCA9IDIgKiBtICogcztcbiAgICAgICAgcSA9IDEgLSBzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcSA9IGZjIC8gZmE7XG4gICAgICAgIHIgPSBmYiAvIGZhO1xuICAgICAgICBwID0gcyAqICgyICogbSAqIHEgKiAocSAtIHIpIC0gKGIgLSBjKSAqIChyIC0gMSkpO1xuICAgICAgICBxID0gKHEgLSAxKSAqIChyIC0gMSkgKiAocyAtIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwID4gMCkgcSA9IC1xO1xuICAgIGVsc2UgcCA9IC1wO1xuXG4gICAgaWYgKDIgKiBwIDwgTWF0aC5taW4oMyAqIG0gKiBxIC0gTWF0aC5hYnModG9sICogcSksIE1hdGguYWJzKChjIC0gYikgKiBxKSkpIHtcbiAgICAgIGMgPSBiO1xuICAgICAgZmMgPSBmYjtcbiAgICAgIGIgKz0gcCAvIHE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGMgPSBiO1xuICAgICAgZmMgPSBmYjtcbiAgICAgIGIgKz0gbTtcbiAgICB9XG5cbiAgICBjb25zdCBic1Jlc3VsdCA9IGJsYWNrU2Nob2xlcyh7IC4uLnBhcmFtcywgaXY6IGIgfSk7XG4gICAgZmIgPSAoaXNDYWxsID8gYnNSZXN1bHQuY2FsbCA6IGJzUmVzdWx0LnB1dCkgLSBtYXJrZXRQcmljZTtcbiAgfVxuXG4gIHJldHVybiBiO1xufVxuXG4vKipcbiAqIEZpbmQgYXQtdGhlLW1vbmV5IHN0cmlrZSBhbmQgY2FsY3VsYXRlIEFUTSBpbXBsaWVkIHZvbGF0aWxpdHlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRBVE1TdHJpa2Uoc3RyaWtlczogbnVtYmVyW10sIHNwb3Q6IG51bWJlcik6IG51bWJlciB7XG4gIGlmIChzdHJpa2VzLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gc3RyaWtlcyBwcm92aWRlZCcpO1xuICB9XG5cbiAgcmV0dXJuIHN0cmlrZXMucmVkdWNlKChjbG9zZXN0LCBzdHJpa2UpID0+IFxuICAgIE1hdGguYWJzKHN0cmlrZSAtIHNwb3QpIDwgTWF0aC5hYnMoY2xvc2VzdCAtIHNwb3QpID8gc3RyaWtlIDogY2xvc2VzdFxuICApO1xufVxuIl0sIm5hbWVzIjpbIm5vcm1DREYiLCJ4IiwiYTEiLCJhMiIsImEzIiwiYTQiLCJhNSIsInAiLCJzaWduIiwiTWF0aCIsImFicyIsInNxcnQiLCJ0IiwieSIsImV4cCIsIm5vcm1QREYiLCJQSSIsImNhbGN1bGF0ZUQxRDIiLCJwYXJhbXMiLCJTIiwiSyIsIlQiLCJyIiwicSIsIml2IiwiRXJyb3IiLCJkMSIsImxvZyIsImQyIiwiYmxhY2tTY2hvbGVzIiwiTmQxIiwiTmQyIiwiTmVnRDEiLCJOZWdEMiIsIm5kMSIsImRpc2NvdW50RmFjdG9yIiwiZGl2aWRlbmRGYWN0b3IiLCJjYWxsIiwicHV0IiwiZGVsdGEiLCJnYW1tYSIsInRoZXRhIiwidmVnYSIsInJobyIsIm1heCIsImltcGxpZWRWb2xCcmVudCIsIm1hcmtldFByaWNlIiwiaXNDYWxsIiwidG9sZXJhbmNlIiwibWF4SXRlcmF0aW9ucyIsImludHJpbnNpYyIsInZvbExvdyIsInZvbEhpZ2giLCJ0ZXN0TG93IiwidGVzdEhpZ2giLCJwcmljZUxvdyIsInByaWNlSGlnaCIsImEiLCJiIiwiYyIsImZhIiwiZmIiLCJmYyIsIml0ZXIiLCJ0b2wiLCJtIiwicyIsIm1pbiIsImJzUmVzdWx0IiwiZmluZEFUTVN0cmlrZSIsInN0cmlrZXMiLCJzcG90IiwibGVuZ3RoIiwicmVkdWNlIiwiY2xvc2VzdCIsInN0cmlrZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/pricing/blackScholes.ts\n");

/***/ }),

/***/ "(rsc)/./lib/schemas.ts":
/*!************************!*\
  !*** ./lib/schemas.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DateSchema: () => (/* binding */ DateSchema),\n/* harmony export */   EarningsDataSchema: () => (/* binding */ EarningsDataSchema),\n/* harmony export */   EarningsEventSchema: () => (/* binding */ EarningsEventSchema),\n/* harmony export */   EarningsRequestSchema: () => (/* binding */ EarningsRequestSchema),\n/* harmony export */   EarningsResponseSchema: () => (/* binding */ EarningsResponseSchema),\n/* harmony export */   ErrorResponseSchema: () => (/* binding */ ErrorResponseSchema),\n/* harmony export */   ExpectedMoveRequestSchema: () => (/* binding */ ExpectedMoveRequestSchema),\n/* harmony export */   ExpectedMoveResponseSchema: () => (/* binding */ ExpectedMoveResponseSchema),\n/* harmony export */   ExpectedMoveSchema: () => (/* binding */ ExpectedMoveSchema),\n/* harmony export */   ExpirySchema: () => (/* binding */ ExpirySchema),\n/* harmony export */   HealthResponseSchema: () => (/* binding */ HealthResponseSchema),\n/* harmony export */   HitResponseSchema: () => (/* binding */ HitResponseSchema),\n/* harmony export */   IVStatsSchema: () => (/* binding */ IVStatsSchema),\n/* harmony export */   OptionSchema: () => (/* binding */ OptionSchema),\n/* harmony export */   OptionalExpirySchema: () => (/* binding */ OptionalExpirySchema),\n/* harmony export */   OptionsChainSchema: () => (/* binding */ OptionsChainSchema),\n/* harmony export */   OptionsRequestSchema: () => (/* binding */ OptionsRequestSchema),\n/* harmony export */   OptionsResponseSchema: () => (/* binding */ OptionsResponseSchema),\n/* harmony export */   RealizedMoveSchema: () => (/* binding */ RealizedMoveSchema),\n/* harmony export */   SymbolSchema: () => (/* binding */ SymbolSchema),\n/* harmony export */   TopMoversRequestSchema: () => (/* binding */ TopMoversRequestSchema),\n/* harmony export */   TopMoversResponseSchema: () => (/* binding */ TopMoversResponseSchema),\n/* harmony export */   createApiResponse: () => (/* binding */ createApiResponse),\n/* harmony export */   validateRequest: () => (/* binding */ validateRequest)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/ZodError.js\");\n/**\n * Zod schemas for API validation and type safety\n * Used across all API routes for request/response validation\n */ \n/**\n * Common validation schemas\n */ const SymbolSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, \"Symbol is required\").max(10, \"Symbol too long\").regex(/^[A-Za-z0-9.-]+$/, \"Invalid symbol format\").transform((s)=>s.toUpperCase());\nconst ExpirySchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Expiry must be in YYYY-MM-DD format\").refine((date)=>{\n    const parsed = new Date(date);\n    const now = new Date();\n    return parsed > now;\n}, \"Expiry must be in the future\");\nconst OptionalExpirySchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Expiry must be in YYYY-MM-DD format\").refine((date)=>{\n    const parsed = new Date(date);\n    const now = new Date();\n    return parsed > now;\n}, \"Expiry must be in the future\").optional();\nconst DateSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Date must be in YYYY-MM-DD format\");\n/**\n * Options chain schemas\n */ const OptionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    strike: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Strike must be positive\"),\n    mid: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(\"Mid price cannot be negative\"),\n    bid: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(\"Bid price cannot be negative\"),\n    ask: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(\"Ask price cannot be negative\"),\n    iv: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"IV must be positive\").optional(),\n    delta: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    gamma: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    theta: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    vega: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    rho: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    volume: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative().optional(),\n    openInterest: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative().optional(),\n    lastPrice: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative().optional(),\n    change: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    changePct: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional()\n});\nconst OptionsChainSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    symbol: SymbolSchema,\n    spot: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Spot price must be positive\"),\n    expiryDate: ExpirySchema,\n    daysToExpiry: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Days to expiry must be positive\"),\n    strikes: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.number().positive()).min(1, \"At least one strike required\"),\n    calls: zod__WEBPACK_IMPORTED_MODULE_0__.array(OptionSchema).min(1, \"At least one call required\"),\n    puts: zod__WEBPACK_IMPORTED_MODULE_0__.array(OptionSchema).min(1, \"At least one put required\"),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime().optional(),\n    source: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\n/**\n * Expected move schemas\n */ const ExpectedMoveSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    straddle: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        abs: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(\"Straddle move cannot be negative\"),\n        pct: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(\"Straddle percentage cannot be negative\")\n    }),\n    iv: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        abs: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(\"IV move cannot be negative\"),\n        pct: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(\"IV percentage cannot be negative\")\n    }),\n    bands: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        oneSigma: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            upper: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n            lower: zod__WEBPACK_IMPORTED_MODULE_0__.number()\n        }),\n        twoSigma: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            upper: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n            lower: zod__WEBPACK_IMPORTED_MODULE_0__.number()\n        })\n    }),\n    confidence: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        straddle: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n            \"high\",\n            \"medium\",\n            \"low\"\n        ]),\n        iv: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n            \"high\",\n            \"medium\",\n            \"low\"\n        ])\n    })\n});\n/**\n * IV statistics schemas\n */ const IVStatsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    rank: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0).max(1, \"IV rank must be between 0 and 1\"),\n    percentile: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0).max(100, \"Percentile must be between 0 and 100\"),\n    current: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Current IV must be positive\"),\n    min: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Min IV must be positive\"),\n    max: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Max IV must be positive\"),\n    mean: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Mean IV must be positive\"),\n    median: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Median IV must be positive\"),\n    stdDev: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(\"Standard deviation cannot be negative\"),\n    daysInSample: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(\"Days in sample must be positive\")\n});\n/**\n * Earnings schemas\n */ const EarningsEventSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    date: DateSchema,\n    confidence: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        \"confirmed\",\n        \"estimated\"\n    ]),\n    timing: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        \"bmo\",\n        \"amc\",\n        \"unknown\"\n    ]).optional(),\n    estimate: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        eps: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n        revenue: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional()\n    }).optional()\n});\nconst RealizedMoveSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    date: DateSchema,\n    realizedMovePct: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    priceChange: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    priceBefore: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(),\n    priceAfter: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(),\n    volume: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative().optional()\n});\nconst EarningsDataSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    symbol: SymbolSchema,\n    next: EarningsEventSchema.optional(),\n    last: zod__WEBPACK_IMPORTED_MODULE_0__.array(RealizedMoveSchema).max(8, \"Maximum 8 historical earnings\"),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime().optional()\n});\n/**\n * API request schemas\n */ const OptionsRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    symbol: SymbolSchema,\n    expiry: OptionalExpirySchema\n});\nconst ExpectedMoveRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    symbol: SymbolSchema,\n    expiry: OptionalExpirySchema\n});\nconst EarningsRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    symbol: SymbolSchema\n});\nconst TopMoversRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    date: DateSchema.optional(),\n    limit: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1).max(50).default(10)\n});\n/**\n * API response schemas\n */ const OptionsResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    success: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n    data: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        spot: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(),\n        expiryUsed: ExpirySchema,\n        atm: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            strike: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(),\n            callMid: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(),\n            putMid: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(),\n            iv: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(),\n            T: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive()\n        }),\n        rows: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            strike: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive(),\n            call: OptionSchema,\n            put: OptionSchema\n        }))\n    }).optional(),\n    error: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime()\n});\nconst ExpectedMoveResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    success: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n    data: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        em: ExpectedMoveSchema,\n        ivRank: IVStatsSchema\n    }).optional(),\n    error: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime()\n});\nconst EarningsResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    success: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n    data: EarningsDataSchema.optional(),\n    error: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime()\n});\nconst HitResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    success: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n    data: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        count: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative()\n    }).optional(),\n    error: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime()\n});\nconst TopMoversResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    success: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n    data: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        symbol: SymbolSchema,\n        expectedMovePct: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative(),\n        spot: zod__WEBPACK_IMPORTED_MODULE_0__.number().positive().optional(),\n        volume: zod__WEBPACK_IMPORTED_MODULE_0__.number().nonnegative().optional()\n    })).optional(),\n    error: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime()\n});\n/**\n * Error response schema\n */ const ErrorResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    success: zod__WEBPACK_IMPORTED_MODULE_0__.literal(false),\n    error: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    detail: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    hint: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime()\n});\n/**\n * Health check schema\n */ const HealthResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    status: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        \"healthy\",\n        \"degraded\",\n        \"unhealthy\"\n    ]),\n    timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string().datetime(),\n    services: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        redis: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            connected: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n            latency: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n            error: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n        }),\n        cache: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            l1Stats: zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n                size: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n                hitRate: zod__WEBPACK_IMPORTED_MODULE_0__.number()\n            }))\n        })\n    }),\n    version: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\n/**\n * Utility functions for schema validation\n */ function validateRequest(schema, data) {\n    try {\n        const result = schema.parse(data);\n        return {\n            success: true,\n            data: result\n        };\n    } catch (error) {\n        if (error instanceof zod__WEBPACK_IMPORTED_MODULE_1__.ZodError) {\n            return {\n                success: false,\n                error: \"Validation failed\",\n                details: error.errors.map((e)=>`${e.path.join(\".\")}: ${e.message}`)\n            };\n        }\n        return {\n            success: false,\n            error: \"Unknown validation error\",\n            details: [\n                error instanceof Error ? error.message : \"Unknown error\"\n            ]\n        };\n    }\n}\n/**\n * Create standardized API response\n */ function createApiResponse(data, error, detail, hint) {\n    return {\n        success: !error,\n        ...data && {\n            data\n        },\n        ...error && {\n            error\n        },\n        ...detail && {\n            detail\n        },\n        ...hint && {\n            hint\n        },\n        timestamp: new Date().toISOString()\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/schemas.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/liveDataService.ts":
/*!*****************************************!*\
  !*** ./lib/services/liveDataService.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchLiveEarnings: () => (/* binding */ fetchLiveEarnings),\n/* harmony export */   fetchLiveExpectedMove: () => (/* binding */ fetchLiveExpectedMove),\n/* harmony export */   fetchLiveOptionsChain: () => (/* binding */ fetchLiveOptionsChain),\n/* harmony export */   isLiveDataAvailable: () => (/* binding */ isLiveDataAvailable),\n/* harmony export */   liveDataService: () => (/* binding */ liveDataService)\n/* harmony export */ });\n/* harmony import */ var yahoo_finance2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! yahoo-finance2 */ \"(rsc)/./node_modules/yahoo-finance2/dist/esm/src/index-node.js\");\n/**\n * Live Financial Data Service\n * Integrates with multiple financial data providers for real-time market data\n */ \nclass LiveDataService {\n    constructor(){\n        // Initialize API clients with environment variables\n        this.finnhubApiKey = process.env.FINNHUB_API_KEY || \"\";\n        this.alphaVantageApiKey = process.env.ALPHA_VANTAGE_API_KEY || \"\";\n    }\n    static getInstance() {\n        if (!LiveDataService.instance) {\n            LiveDataService.instance = new LiveDataService();\n        }\n        return LiveDataService.instance;\n    }\n    // Check if live data services are available\n    isLiveDataAvailable() {\n        return !!(this.finnhubApiKey || this.alphaVantageApiKey);\n    }\n    // Fetch live options chain data\n    async fetchLiveOptionsChain(symbol, expiration) {\n        try {\n            // Use Yahoo Finance for options data\n            return await this.fetchYahooOptionsChain(symbol, expiration);\n        } catch (error) {\n            console.error(`Failed to fetch live options chain for ${symbol}:`, error);\n            return null;\n        }\n    }\n    // Fetch live earnings data\n    async fetchLiveEarnings(symbol) {\n        try {\n            // Use Yahoo Finance for earnings data\n            const yahooData = await this.fetchYahooEarnings(symbol);\n            return this.processYahooEarnings(symbol, yahooData);\n        } catch (error) {\n            console.error(`Failed to fetch live earnings for ${symbol}:`, error);\n            return null;\n        }\n    }\n    // Fetch live expected move data\n    async fetchLiveExpectedMove(symbol) {\n        try {\n            // Get current stock price and IV data\n            const [quote, optionsData] = await Promise.all([\n                yahoo_finance2__WEBPACK_IMPORTED_MODULE_0__[\"default\"].quote(symbol),\n                this.fetchLiveOptionsChain(symbol)\n            ]);\n            if (!quote || !optionsData) return null;\n            return this.calculateExpectedMove(symbol, quote, optionsData);\n        } catch (error) {\n            console.error(`Failed to fetch live expected move for ${symbol}:`, error);\n            return null;\n        }\n    }\n    // Yahoo Finance options chain implementation (simplified)\n    async fetchYahooOptionsChain(symbol, expiration) {\n        try {\n            // For now, return null to use enhanced mock data\n            // Yahoo Finance options API has complex structure that requires more setup\n            console.log(`[live-data] Yahoo options chain not implemented yet for ${symbol}, using enhanced mock data`);\n            return null;\n        } catch (error) {\n            console.error(\"Yahoo options chain error:\", error);\n            return null;\n        }\n    }\n    // Yahoo Finance earnings implementation (simplified)\n    async fetchYahooEarnings(symbol) {\n        try {\n            // For now, return null to use enhanced mock data\n            // Yahoo Finance earnings API requires more complex setup\n            console.log(`[live-data] Yahoo earnings not implemented yet for ${symbol}, using enhanced mock data`);\n            return null;\n        } catch (error) {\n            console.error(\"Yahoo earnings error:\", error);\n            return null;\n        }\n    }\n    // Process Yahoo Finance earnings data\n    processYahooEarnings(symbol, yahooData) {\n        try {\n            if (!yahooData) return null;\n            // Extract earnings data from Yahoo Finance response\n            const calendarEvents = yahooData.calendarEvents;\n            const earningsHistory = yahooData.earningsHistory;\n            // Next earnings date\n            let nextEarningsDate;\n            let nextEarningsTime = \"UNKNOWN\";\n            if (calendarEvents?.earnings?.[0]) {\n                nextEarningsDate = calendarEvents.earnings[0].date;\n                // Yahoo doesn't provide timing, so we'll estimate\n                nextEarningsTime = Math.random() > 0.5 ? \"BMO\" : \"AMC\";\n            }\n            // Historical earnings\n            const historicalEarnings = [];\n            if (earningsHistory?.history) {\n                for (const earning of earningsHistory.history.slice(0, 8)){\n                    historicalEarnings.push({\n                        date: earning.quarter?.fmt || \"\",\n                        actualEPS: earning.epsActual?.raw,\n                        estimatedEPS: earning.epsEstimate?.raw,\n                        surprise: earning.epsDifference?.raw,\n                        priceMoveBefore: 0,\n                        priceMoveAfter: 0,\n                        priceMovePercent: Math.random() * 10 - 5 // Mock price move\n                    });\n                }\n            }\n            // Calculate stats\n            const avgMove = Math.random() * 8 + 2; // 2-10%\n            const beatCount = historicalEarnings.filter((e)=>(e.surprise || 0) > 0).length;\n            const beatRate = historicalEarnings.length > 0 ? beatCount / historicalEarnings.length : 0.6;\n            return {\n                symbol,\n                nextEarningsDate,\n                nextEarningsTime,\n                historicalEarnings,\n                stats: {\n                    avgMove,\n                    avgAbsMove: avgMove,\n                    beatRate,\n                    avgBeat: historicalEarnings.length > 0 ? historicalEarnings.reduce((sum, e)=>sum + (e.surprise || 0), 0) / historicalEarnings.length : 0\n                }\n            };\n        } catch (error) {\n            console.error(\"Error processing Yahoo earnings data:\", error);\n            return null;\n        }\n    }\n    // Calculate expected move from options data\n    calculateExpectedMove(symbol, quote, optionsData) {\n        try {\n            const underlyingPrice = quote.regularMarketPrice || optionsData.underlyingPrice;\n            // Find ATM options for straddle calculation\n            const atmStrike = optionsData.strikes.reduce((closest, strike)=>Math.abs(strike.strike - underlyingPrice) < Math.abs(closest.strike - underlyingPrice) ? strike : closest);\n            // Calculate straddle price and move\n            const straddlePrice = atmStrike.call.last + atmStrike.put.last || (atmStrike.call.bid + atmStrike.call.ask) / 2 + (atmStrike.put.bid + atmStrike.put.ask) / 2;\n            const straddleMove = straddlePrice;\n            const straddleMovePercent = straddleMove / underlyingPrice * 100;\n            // Calculate average IV\n            const allIVs = optionsData.strikes.flatMap((s)=>[\n                    s.call.impliedVolatility,\n                    s.put.impliedVolatility\n                ]).filter((iv)=>iv > 0);\n            const avgIV = allIVs.length > 0 ? allIVs.reduce((sum, iv)=>sum + iv, 0) / allIVs.length : 0.3;\n            // Mock IV rank/percentile (would need historical IV data)\n            const ivRank = Math.random() * 100;\n            const ivPercentile = Math.random() * 100;\n            return {\n                symbol,\n                underlyingPrice,\n                impliedVolatility: avgIV,\n                timeToExpiry: 30,\n                straddle: {\n                    price: straddlePrice,\n                    move: straddleMove,\n                    movePercent: straddleMovePercent\n                },\n                iv: {\n                    rank: ivRank,\n                    percentile: ivPercentile,\n                    current: avgIV * 100,\n                    high52Week: avgIV * 150,\n                    low52Week: avgIV * 50\n                },\n                summary: {\n                    daily: straddleMovePercent / 30,\n                    weekly: straddleMovePercent / 4,\n                    monthly: straddleMovePercent // Monthly move\n                }\n            };\n        } catch (error) {\n            console.error(\"Error calculating expected move:\", error);\n            return null;\n        }\n    }\n}\n// Export singleton instance\nconst liveDataService = LiveDataService.getInstance();\n// Utility functions for easy access\nasync function fetchLiveOptionsChain(symbol, expiration) {\n    return await liveDataService.fetchLiveOptionsChain(symbol, expiration);\n}\nasync function fetchLiveEarnings(symbol) {\n    return await liveDataService.fetchLiveEarnings(symbol);\n}\nasync function fetchLiveExpectedMove(symbol) {\n    return await liveDataService.fetchLiveExpectedMove(symbol);\n}\nfunction isLiveDataAvailable() {\n    return liveDataService.isLiveDataAvailable();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/liveDataService.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@sinclair","vendor-chunks/yahoo-finance2","vendor-chunks/psl","vendor-chunks/tough-cookie","vendor-chunks/url-parse","vendor-chunks/punycode","vendor-chunks/querystringify","vendor-chunks/universalify","vendor-chunks/requires-port","vendor-chunks/zod","vendor-chunks/@upstash","vendor-chunks/lru-cache","vendor-chunks/uncrypto"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Foptions%2Froute&page=%2Fapi%2Foptions%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Foptions%2Froute.ts&appDir=%2FUsers%2Fken%2FDesktop%2Fquantiv%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fken%2FDesktop%2Fquantiv&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();